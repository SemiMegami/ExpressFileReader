using System;
using System.Linq;
using System.Collections.Generic;
namespace IFC4
{
	public class IfcAbsorbedDoseMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcAbsorbedDoseMeasure() { }
		public IfcAbsorbedDoseMeasure(double value) { Value = value; }
		public static implicit operator IfcAbsorbedDoseMeasure(double x) { return new IfcAbsorbedDoseMeasure(x); }
		public static implicit operator double(IfcAbsorbedDoseMeasure x) { return x.Value; }
	}

	public class IfcAccelerationMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcAccelerationMeasure() { }
		public IfcAccelerationMeasure(double value) { Value = value; }
		public static implicit operator IfcAccelerationMeasure(double x) { return new IfcAccelerationMeasure(x); }
		public static implicit operator double(IfcAccelerationMeasure x) { return x.Value; }
	}

	public class IfcAmountOfSubstanceMeasure : REAL, IfcMeasureValue
	{
		public IfcAmountOfSubstanceMeasure() { }
		public IfcAmountOfSubstanceMeasure(double value) { Value = value; }
		public static implicit operator IfcAmountOfSubstanceMeasure(double x) { return new IfcAmountOfSubstanceMeasure(x); }
		public static implicit operator double(IfcAmountOfSubstanceMeasure x) { return x.Value; }
	}

	public class IfcAngularVelocityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcAngularVelocityMeasure() { }
		public IfcAngularVelocityMeasure(double value) { Value = value; }
		public static implicit operator IfcAngularVelocityMeasure(double x) { return new IfcAngularVelocityMeasure(x); }
		public static implicit operator double(IfcAngularVelocityMeasure x) { return x.Value; }
	}

	public class IfcArcIndex : List<IfcPositiveInteger>, IfcSegmentIndexSelect
	{
		public virtual List<IfcPositiveInteger> GetValue() { return this; }
		public IfcArcIndex() { }
		public IfcArcIndex(List<IfcPositiveInteger> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add(v);
			}
		}
		public IfcArcIndex(List<int> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add((IfcPositiveInteger)v);
			}
		}
		public static implicit operator IfcArcIndex(List<int> x) { return new IfcArcIndex(x); }
		public static implicit operator List<int>(IfcArcIndex x)
		{
			IfcArcIndex y = new IfcArcIndex();
			foreach (var v in x)
			{
				y.Add(v);
			}
			return y;
		}
	}

	public class IfcAreaDensityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcAreaDensityMeasure() { }
		public IfcAreaDensityMeasure(double value) { Value = value; }
		public static implicit operator IfcAreaDensityMeasure(double x) { return new IfcAreaDensityMeasure(x); }
		public static implicit operator double(IfcAreaDensityMeasure x) { return x.Value; }
	}

	public class IfcAreaMeasure : REAL, IfcMeasureValue
	{
		public IfcAreaMeasure() { }
		public IfcAreaMeasure(double value) { Value = value; }
		public static implicit operator IfcAreaMeasure(double x) { return new IfcAreaMeasure(x); }
		public static implicit operator double(IfcAreaMeasure x) { return x.Value; }
	}

	public class IfcBinary : BINARY, IfcSimpleValue
	{
		public IfcBinary() { }
		public IfcBinary(int value) { Value = value; }
		public static implicit operator IfcBinary(int x) { return new IfcBinary(x); }
		public static implicit operator int(IfcBinary x) { return x.Value; }
	}

	public class IfcBoolean : BOOLEAN, IfcModulusOfRotationalSubgradeReactionSelect, IfcModulusOfSubgradeReactionSelect, IfcModulusOfTranslationalSubgradeReactionSelect, IfcRotationalStiffnessSelect, IfcSimpleValue, IfcTranslationalStiffnessSelect, IfcWarpingStiffnessSelect
	{
		public IfcBoolean() { }
		public IfcBoolean(bool value) { Value = value; }
		public static implicit operator IfcBoolean(bool x) { return new IfcBoolean(x); }
		public static implicit operator bool(IfcBoolean x) { return x.Value; }
	}

	public class IfcBoxAlignment : IfcLabel, IfcSimpleValue
	{
		public IfcBoxAlignment() { }
		public IfcBoxAlignment(string value) { Value = value; }
		public static implicit operator IfcBoxAlignment(string x) { return new IfcBoxAlignment(x); }
		public static implicit operator string(IfcBoxAlignment x) { return x.Value; }
	}

	public class IfcCardinalPointReference : INTEGER
	{
		public IfcCardinalPointReference() { }
		public IfcCardinalPointReference(int value) { Value = value; }
		public static implicit operator IfcCardinalPointReference(int x) { return new IfcCardinalPointReference(x); }
		public static implicit operator int(IfcCardinalPointReference x) { return x.Value; }
	}

	public class IfcComplexNumber : List<REAL>, IfcMeasureValue
	{
		public IfcComplexNumber() { }
		public IfcComplexNumber(List<REAL> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add(v);
			}
		}
		public IfcComplexNumber(List<double> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add((REAL)v);
			}
		}
		public static implicit operator IfcComplexNumber(List<double> x) { return new IfcComplexNumber(x); }
		public static implicit operator List<double>(IfcComplexNumber x)
		{
			IfcComplexNumber y = new IfcComplexNumber();
			foreach (var v in x)
			{
				y.Add(v);
			}
			return y;
		}
	}

	public class IfcCompoundPlaneAngleMeasure : List<INTEGER>, IfcDerivedMeasureValue
	{
		public IfcCompoundPlaneAngleMeasure() { }
		public IfcCompoundPlaneAngleMeasure(List<INTEGER> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add(v);
			}
		}
		public IfcCompoundPlaneAngleMeasure(List<int> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add((INTEGER)v);
			}
		}
		public static implicit operator IfcCompoundPlaneAngleMeasure(List<int> x) { return new IfcCompoundPlaneAngleMeasure(x); }
		public static implicit operator List<int>(IfcCompoundPlaneAngleMeasure x)
		{
			IfcCompoundPlaneAngleMeasure y = new IfcCompoundPlaneAngleMeasure();
			foreach (var v in x)
			{
				y.Add(v);
			}
			return y;
		}
	}

	public class IfcContextDependentMeasure : REAL, IfcMeasureValue
	{
		public IfcContextDependentMeasure() { }
		public IfcContextDependentMeasure(double value) { Value = value; }
		public static implicit operator IfcContextDependentMeasure(double x) { return new IfcContextDependentMeasure(x); }
		public static implicit operator double(IfcContextDependentMeasure x) { return x.Value; }
	}

	public class IfcCountMeasure : NUMBER, IfcMeasureValue
	{
		public IfcCountMeasure() { }
		public IfcCountMeasure(double value) { Value = value; }
		public static implicit operator IfcCountMeasure(double x) { return new IfcCountMeasure(x); }
		public static implicit operator double(IfcCountMeasure x) { return x.Value; }
	}

	public class IfcCurvatureMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcCurvatureMeasure() { }
		public IfcCurvatureMeasure(double value) { Value = value; }
		public static implicit operator IfcCurvatureMeasure(double x) { return new IfcCurvatureMeasure(x); }
		public static implicit operator double(IfcCurvatureMeasure x) { return x.Value; }
	}

	public class IfcDate : STRING, IfcSimpleValue
	{
		public IfcDate() { }
		public IfcDate(string value) { Value = value; }
		public static implicit operator IfcDate(string x) { return new IfcDate(x); }
		public static implicit operator string(IfcDate x) { return x.Value; }
	}

	public class IfcDateTime : STRING, IfcSimpleValue
	{
		public IfcDateTime() { }
		public IfcDateTime(string value) { Value = value; }
		public static implicit operator IfcDateTime(string x) { return new IfcDateTime(x); }
		public static implicit operator string(IfcDateTime x) { return x.Value; }
	}

	public class IfcDayInMonthNumber : INTEGER
	{
		public IfcDayInMonthNumber() { }
		public IfcDayInMonthNumber(int value) { Value = value; }
		public static implicit operator IfcDayInMonthNumber(int x) { return new IfcDayInMonthNumber(x); }
		public static implicit operator int(IfcDayInMonthNumber x) { return x.Value; }
	}

	public class IfcDayInWeekNumber : INTEGER
	{
		public IfcDayInWeekNumber() { }
		public IfcDayInWeekNumber(int value) { Value = value; }
		public static implicit operator IfcDayInWeekNumber(int x) { return new IfcDayInWeekNumber(x); }
		public static implicit operator int(IfcDayInWeekNumber x) { return x.Value; }
	}

	public class IfcDescriptiveMeasure : STRING, IfcMeasureValue, IfcSizeSelect
	{
		public IfcDescriptiveMeasure() { }
		public IfcDescriptiveMeasure(string value) { Value = value; }
		public static implicit operator IfcDescriptiveMeasure(string x) { return new IfcDescriptiveMeasure(x); }
		public static implicit operator string(IfcDescriptiveMeasure x) { return x.Value; }
	}

	public class IfcDimensionCount : INTEGER
	{
		public IfcDimensionCount() { }
		public IfcDimensionCount(int value) { Value = value; }
		public static implicit operator IfcDimensionCount(int x) { return new IfcDimensionCount(x); }
		public static implicit operator int(IfcDimensionCount x) { return x.Value; }
	}

	public class IfcDoseEquivalentMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcDoseEquivalentMeasure() { }
		public IfcDoseEquivalentMeasure(double value) { Value = value; }
		public static implicit operator IfcDoseEquivalentMeasure(double x) { return new IfcDoseEquivalentMeasure(x); }
		public static implicit operator double(IfcDoseEquivalentMeasure x) { return x.Value; }
	}

	public class IfcDuration : STRING, IfcSimpleValue, IfcTimeOrRatioSelect
	{
		public IfcDuration() { }
		public IfcDuration(string value) { Value = value; }
		public static implicit operator IfcDuration(string x) { return new IfcDuration(x); }
		public static implicit operator string(IfcDuration x) { return x.Value; }
	}

	public class IfcDynamicViscosityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcDynamicViscosityMeasure() { }
		public IfcDynamicViscosityMeasure(double value) { Value = value; }
		public static implicit operator IfcDynamicViscosityMeasure(double x) { return new IfcDynamicViscosityMeasure(x); }
		public static implicit operator double(IfcDynamicViscosityMeasure x) { return x.Value; }
	}

	public class IfcElectricCapacitanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcElectricCapacitanceMeasure() { }
		public IfcElectricCapacitanceMeasure(double value) { Value = value; }
		public static implicit operator IfcElectricCapacitanceMeasure(double x) { return new IfcElectricCapacitanceMeasure(x); }
		public static implicit operator double(IfcElectricCapacitanceMeasure x) { return x.Value; }
	}

	public class IfcElectricChargeMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcElectricChargeMeasure() { }
		public IfcElectricChargeMeasure(double value) { Value = value; }
		public static implicit operator IfcElectricChargeMeasure(double x) { return new IfcElectricChargeMeasure(x); }
		public static implicit operator double(IfcElectricChargeMeasure x) { return x.Value; }
	}

	public class IfcElectricConductanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcElectricConductanceMeasure() { }
		public IfcElectricConductanceMeasure(double value) { Value = value; }
		public static implicit operator IfcElectricConductanceMeasure(double x) { return new IfcElectricConductanceMeasure(x); }
		public static implicit operator double(IfcElectricConductanceMeasure x) { return x.Value; }
	}

	public class IfcElectricCurrentMeasure : REAL, IfcMeasureValue
	{
		public IfcElectricCurrentMeasure() { }
		public IfcElectricCurrentMeasure(double value) { Value = value; }
		public static implicit operator IfcElectricCurrentMeasure(double x) { return new IfcElectricCurrentMeasure(x); }
		public static implicit operator double(IfcElectricCurrentMeasure x) { return x.Value; }
	}

	public class IfcElectricResistanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcElectricResistanceMeasure() { }
		public IfcElectricResistanceMeasure(double value) { Value = value; }
		public static implicit operator IfcElectricResistanceMeasure(double x) { return new IfcElectricResistanceMeasure(x); }
		public static implicit operator double(IfcElectricResistanceMeasure x) { return x.Value; }
	}

	public class IfcElectricVoltageMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcElectricVoltageMeasure() { }
		public IfcElectricVoltageMeasure(double value) { Value = value; }
		public static implicit operator IfcElectricVoltageMeasure(double x) { return new IfcElectricVoltageMeasure(x); }
		public static implicit operator double(IfcElectricVoltageMeasure x) { return x.Value; }
	}

	public class IfcEnergyMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcEnergyMeasure() { }
		public IfcEnergyMeasure(double value) { Value = value; }
		public static implicit operator IfcEnergyMeasure(double x) { return new IfcEnergyMeasure(x); }
		public static implicit operator double(IfcEnergyMeasure x) { return x.Value; }
	}

	public class IfcFontStyle : STRING
	{
		public IfcFontStyle() { }
		public IfcFontStyle(string value) { Value = value; }
		public static implicit operator IfcFontStyle(string x) { return new IfcFontStyle(x); }
		public static implicit operator string(IfcFontStyle x) { return x.Value; }
	}

	public class IfcFontVariant : STRING
	{
		public IfcFontVariant() { }
		public IfcFontVariant(string value) { Value = value; }
		public static implicit operator IfcFontVariant(string x) { return new IfcFontVariant(x); }
		public static implicit operator string(IfcFontVariant x) { return x.Value; }
	}

	public class IfcFontWeight : STRING
	{
		public IfcFontWeight() { }
		public IfcFontWeight(string value) { Value = value; }
		public static implicit operator IfcFontWeight(string x) { return new IfcFontWeight(x); }
		public static implicit operator string(IfcFontWeight x) { return x.Value; }
	}

	public class IfcForceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcForceMeasure() { }
		public IfcForceMeasure(double value) { Value = value; }
		public static implicit operator IfcForceMeasure(double x) { return new IfcForceMeasure(x); }
		public static implicit operator double(IfcForceMeasure x) { return x.Value; }
	}

	public class IfcFrequencyMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcFrequencyMeasure() { }
		public IfcFrequencyMeasure(double value) { Value = value; }
		public static implicit operator IfcFrequencyMeasure(double x) { return new IfcFrequencyMeasure(x); }
		public static implicit operator double(IfcFrequencyMeasure x) { return x.Value; }
	}

	public class IfcGloballyUniqueId : STRING
	{
		public IfcGloballyUniqueId() { }
		public IfcGloballyUniqueId(string value) { Value = value; }
		public static implicit operator IfcGloballyUniqueId(string x) { return new IfcGloballyUniqueId(x); }
		public static implicit operator string(IfcGloballyUniqueId x) { return x.Value; }
	}

	public class IfcHeatFluxDensityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcHeatFluxDensityMeasure() { }
		public IfcHeatFluxDensityMeasure(double value) { Value = value; }
		public static implicit operator IfcHeatFluxDensityMeasure(double x) { return new IfcHeatFluxDensityMeasure(x); }
		public static implicit operator double(IfcHeatFluxDensityMeasure x) { return x.Value; }
	}

	public class IfcHeatingValueMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcHeatingValueMeasure() { }
		public IfcHeatingValueMeasure(double value) { Value = value; }
		public static implicit operator IfcHeatingValueMeasure(double x) { return new IfcHeatingValueMeasure(x); }
		public static implicit operator double(IfcHeatingValueMeasure x) { return x.Value; }
	}

	public class IfcIdentifier : STRING, IfcSimpleValue
	{
		public IfcIdentifier() { }
		public IfcIdentifier(string value) { Value = value; }
		public static implicit operator IfcIdentifier(string x) { return new IfcIdentifier(x); }
		public static implicit operator string(IfcIdentifier x) { return x.Value; }
	}

	public class IfcIlluminanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcIlluminanceMeasure() { }
		public IfcIlluminanceMeasure(double value) { Value = value; }
		public static implicit operator IfcIlluminanceMeasure(double x) { return new IfcIlluminanceMeasure(x); }
		public static implicit operator double(IfcIlluminanceMeasure x) { return x.Value; }
	}

	public class IfcInductanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcInductanceMeasure() { }
		public IfcInductanceMeasure(double value) { Value = value; }
		public static implicit operator IfcInductanceMeasure(double x) { return new IfcInductanceMeasure(x); }
		public static implicit operator double(IfcInductanceMeasure x) { return x.Value; }
	}

	public class IfcInteger : INTEGER, IfcSimpleValue
	{
		public IfcInteger() { }
		public IfcInteger(int value) { Value = value; }
		public static implicit operator IfcInteger(int x) { return new IfcInteger(x); }
		public static implicit operator int(IfcInteger x) { return x.Value; }
	}

	public class IfcIntegerCountRateMeasure : INTEGER, IfcDerivedMeasureValue
	{
		public IfcIntegerCountRateMeasure() { }
		public IfcIntegerCountRateMeasure(int value) { Value = value; }
		public static implicit operator IfcIntegerCountRateMeasure(int x) { return new IfcIntegerCountRateMeasure(x); }
		public static implicit operator int(IfcIntegerCountRateMeasure x) { return x.Value; }
	}

	public class IfcIonConcentrationMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcIonConcentrationMeasure() { }
		public IfcIonConcentrationMeasure(double value) { Value = value; }
		public static implicit operator IfcIonConcentrationMeasure(double x) { return new IfcIonConcentrationMeasure(x); }
		public static implicit operator double(IfcIonConcentrationMeasure x) { return x.Value; }
	}

	public class IfcIsothermalMoistureCapacityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcIsothermalMoistureCapacityMeasure() { }
		public IfcIsothermalMoistureCapacityMeasure(double value) { Value = value; }
		public static implicit operator IfcIsothermalMoistureCapacityMeasure(double x) { return new IfcIsothermalMoistureCapacityMeasure(x); }
		public static implicit operator double(IfcIsothermalMoistureCapacityMeasure x) { return x.Value; }
	}

	public class IfcKinematicViscosityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcKinematicViscosityMeasure() { }
		public IfcKinematicViscosityMeasure(double value) { Value = value; }
		public static implicit operator IfcKinematicViscosityMeasure(double x) { return new IfcKinematicViscosityMeasure(x); }
		public static implicit operator double(IfcKinematicViscosityMeasure x) { return x.Value; }
	}

	public class IfcLabel : STRING, IfcSimpleValue
	{
		public IfcLabel() { }
		public IfcLabel(string value) { Value = value; }
		public static implicit operator IfcLabel(string x) { return new IfcLabel(x); }
		public static implicit operator string(IfcLabel x) { return x.Value; }
	}

	public class IfcLanguageId : IfcIdentifier, IfcSimpleValue
	{
		public IfcLanguageId() { }
		public IfcLanguageId(string value) { Value = value; }
		public static implicit operator IfcLanguageId(string x) { return new IfcLanguageId(x); }
		public static implicit operator string(IfcLanguageId x) { return x.Value; }
	}

	public class IfcLengthMeasure : REAL, IfcBendingParameterSelect, IfcMeasureValue, IfcSizeSelect
	{
		public IfcLengthMeasure() { }
		public IfcLengthMeasure(double value) { Value = value; }
		public static implicit operator IfcLengthMeasure(double x) { return new IfcLengthMeasure(x); }
		public static implicit operator double(IfcLengthMeasure x) { return x.Value; }
	}

	public class IfcLineIndex : List<IfcPositiveInteger>, IfcSegmentIndexSelect
	{
		public virtual List<IfcPositiveInteger> GetValue() { return this; }
		public IfcLineIndex() { }
		public IfcLineIndex(List<IfcPositiveInteger> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add(v);
			}
		}
		public IfcLineIndex(List<int> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add((IfcPositiveInteger)v);
			}
		}
		public static implicit operator IfcLineIndex(List<int> x) { return new IfcLineIndex(x); }
		public static implicit operator List<int>(IfcLineIndex x)
		{
			IfcLineIndex y = new IfcLineIndex();
			foreach (var v in x)
			{
				y.Add(v);
			}
			return y;
		}
	}

	public class IfcLinearForceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcLinearForceMeasure() { }
		public IfcLinearForceMeasure(double value) { Value = value; }
		public static implicit operator IfcLinearForceMeasure(double x) { return new IfcLinearForceMeasure(x); }
		public static implicit operator double(IfcLinearForceMeasure x) { return x.Value; }
	}

	public class IfcLinearMomentMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcLinearMomentMeasure() { }
		public IfcLinearMomentMeasure(double value) { Value = value; }
		public static implicit operator IfcLinearMomentMeasure(double x) { return new IfcLinearMomentMeasure(x); }
		public static implicit operator double(IfcLinearMomentMeasure x) { return x.Value; }
	}

	public class IfcLinearStiffnessMeasure : REAL, IfcDerivedMeasureValue, IfcTranslationalStiffnessSelect
	{
		public IfcLinearStiffnessMeasure() { }
		public IfcLinearStiffnessMeasure(double value) { Value = value; }
		public static implicit operator IfcLinearStiffnessMeasure(double x) { return new IfcLinearStiffnessMeasure(x); }
		public static implicit operator double(IfcLinearStiffnessMeasure x) { return x.Value; }
	}

	public class IfcLinearVelocityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcLinearVelocityMeasure() { }
		public IfcLinearVelocityMeasure(double value) { Value = value; }
		public static implicit operator IfcLinearVelocityMeasure(double x) { return new IfcLinearVelocityMeasure(x); }
		public static implicit operator double(IfcLinearVelocityMeasure x) { return x.Value; }
	}

	public class IfcLogical : LOGICAL, IfcSimpleValue
	{
		public IfcLogical() { }
		public IfcLogical(bool value) { Value = value; }
		public static implicit operator IfcLogical(bool x) { return new IfcLogical(x); }
		public static implicit operator bool(IfcLogical x) { return x.Value; }
	}

	public class IfcLuminousFluxMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcLuminousFluxMeasure() { }
		public IfcLuminousFluxMeasure(double value) { Value = value; }
		public static implicit operator IfcLuminousFluxMeasure(double x) { return new IfcLuminousFluxMeasure(x); }
		public static implicit operator double(IfcLuminousFluxMeasure x) { return x.Value; }
	}

	public class IfcLuminousIntensityDistributionMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcLuminousIntensityDistributionMeasure() { }
		public IfcLuminousIntensityDistributionMeasure(double value) { Value = value; }
		public static implicit operator IfcLuminousIntensityDistributionMeasure(double x) { return new IfcLuminousIntensityDistributionMeasure(x); }
		public static implicit operator double(IfcLuminousIntensityDistributionMeasure x) { return x.Value; }
	}

	public class IfcLuminousIntensityMeasure : REAL, IfcMeasureValue
	{
		public IfcLuminousIntensityMeasure() { }
		public IfcLuminousIntensityMeasure(double value) { Value = value; }
		public static implicit operator IfcLuminousIntensityMeasure(double x) { return new IfcLuminousIntensityMeasure(x); }
		public static implicit operator double(IfcLuminousIntensityMeasure x) { return x.Value; }
	}

	public class IfcMagneticFluxDensityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMagneticFluxDensityMeasure() { }
		public IfcMagneticFluxDensityMeasure(double value) { Value = value; }
		public static implicit operator IfcMagneticFluxDensityMeasure(double x) { return new IfcMagneticFluxDensityMeasure(x); }
		public static implicit operator double(IfcMagneticFluxDensityMeasure x) { return x.Value; }
	}

	public class IfcMagneticFluxMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMagneticFluxMeasure() { }
		public IfcMagneticFluxMeasure(double value) { Value = value; }
		public static implicit operator IfcMagneticFluxMeasure(double x) { return new IfcMagneticFluxMeasure(x); }
		public static implicit operator double(IfcMagneticFluxMeasure x) { return x.Value; }
	}

	public class IfcMassDensityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMassDensityMeasure() { }
		public IfcMassDensityMeasure(double value) { Value = value; }
		public static implicit operator IfcMassDensityMeasure(double x) { return new IfcMassDensityMeasure(x); }
		public static implicit operator double(IfcMassDensityMeasure x) { return x.Value; }
	}

	public class IfcMassFlowRateMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMassFlowRateMeasure() { }
		public IfcMassFlowRateMeasure(double value) { Value = value; }
		public static implicit operator IfcMassFlowRateMeasure(double x) { return new IfcMassFlowRateMeasure(x); }
		public static implicit operator double(IfcMassFlowRateMeasure x) { return x.Value; }
	}

	public class IfcMassMeasure : REAL, IfcMeasureValue
	{
		public IfcMassMeasure() { }
		public IfcMassMeasure(double value) { Value = value; }
		public static implicit operator IfcMassMeasure(double x) { return new IfcMassMeasure(x); }
		public static implicit operator double(IfcMassMeasure x) { return x.Value; }
	}

	public class IfcMassPerLengthMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMassPerLengthMeasure() { }
		public IfcMassPerLengthMeasure(double value) { Value = value; }
		public static implicit operator IfcMassPerLengthMeasure(double x) { return new IfcMassPerLengthMeasure(x); }
		public static implicit operator double(IfcMassPerLengthMeasure x) { return x.Value; }
	}

	public class IfcModulusOfElasticityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcModulusOfElasticityMeasure() { }
		public IfcModulusOfElasticityMeasure(double value) { Value = value; }
		public static implicit operator IfcModulusOfElasticityMeasure(double x) { return new IfcModulusOfElasticityMeasure(x); }
		public static implicit operator double(IfcModulusOfElasticityMeasure x) { return x.Value; }
	}

	public class IfcModulusOfLinearSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, IfcModulusOfTranslationalSubgradeReactionSelect
	{
		public IfcModulusOfLinearSubgradeReactionMeasure() { }
		public IfcModulusOfLinearSubgradeReactionMeasure(double value) { Value = value; }
		public static implicit operator IfcModulusOfLinearSubgradeReactionMeasure(double x) { return new IfcModulusOfLinearSubgradeReactionMeasure(x); }
		public static implicit operator double(IfcModulusOfLinearSubgradeReactionMeasure x) { return x.Value; }
	}

	public class IfcModulusOfRotationalSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, IfcModulusOfRotationalSubgradeReactionSelect
	{
		public IfcModulusOfRotationalSubgradeReactionMeasure() { }
		public IfcModulusOfRotationalSubgradeReactionMeasure(double value) { Value = value; }
		public static implicit operator IfcModulusOfRotationalSubgradeReactionMeasure(double x) { return new IfcModulusOfRotationalSubgradeReactionMeasure(x); }
		public static implicit operator double(IfcModulusOfRotationalSubgradeReactionMeasure x) { return x.Value; }
	}

	public class IfcModulusOfSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, IfcModulusOfSubgradeReactionSelect
	{
		public IfcModulusOfSubgradeReactionMeasure() { }
		public IfcModulusOfSubgradeReactionMeasure(double value) { Value = value; }
		public static implicit operator IfcModulusOfSubgradeReactionMeasure(double x) { return new IfcModulusOfSubgradeReactionMeasure(x); }
		public static implicit operator double(IfcModulusOfSubgradeReactionMeasure x) { return x.Value; }
	}

	public class IfcMoistureDiffusivityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMoistureDiffusivityMeasure() { }
		public IfcMoistureDiffusivityMeasure(double value) { Value = value; }
		public static implicit operator IfcMoistureDiffusivityMeasure(double x) { return new IfcMoistureDiffusivityMeasure(x); }
		public static implicit operator double(IfcMoistureDiffusivityMeasure x) { return x.Value; }
	}

	public class IfcMolecularWeightMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMolecularWeightMeasure() { }
		public IfcMolecularWeightMeasure(double value) { Value = value; }
		public static implicit operator IfcMolecularWeightMeasure(double x) { return new IfcMolecularWeightMeasure(x); }
		public static implicit operator double(IfcMolecularWeightMeasure x) { return x.Value; }
	}

	public class IfcMomentOfInertiaMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMomentOfInertiaMeasure() { }
		public IfcMomentOfInertiaMeasure(double value) { Value = value; }
		public static implicit operator IfcMomentOfInertiaMeasure(double x) { return new IfcMomentOfInertiaMeasure(x); }
		public static implicit operator double(IfcMomentOfInertiaMeasure x) { return x.Value; }
	}

	public class IfcMonetaryMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcMonetaryMeasure() { }
		public IfcMonetaryMeasure(double value) { Value = value; }
		public static implicit operator IfcMonetaryMeasure(double x) { return new IfcMonetaryMeasure(x); }
		public static implicit operator double(IfcMonetaryMeasure x) { return x.Value; }
	}

	public class IfcMonthInYearNumber : INTEGER
	{
		public IfcMonthInYearNumber() { }
		public IfcMonthInYearNumber(int value) { Value = value; }
		public static implicit operator IfcMonthInYearNumber(int x) { return new IfcMonthInYearNumber(x); }
		public static implicit operator int(IfcMonthInYearNumber x) { return x.Value; }
	}

	public class IfcNonNegativeLengthMeasure : IfcLengthMeasure, IfcBendingParameterSelect, IfcMeasureValue, IfcSizeSelect
	{
		public IfcNonNegativeLengthMeasure() { }
		public IfcNonNegativeLengthMeasure(double value) { Value = value; }
		public static implicit operator IfcNonNegativeLengthMeasure(double x) { return new IfcNonNegativeLengthMeasure(x); }
		public static implicit operator double(IfcNonNegativeLengthMeasure x) { return x.Value; }
	}

	public class IfcNormalisedRatioMeasure : IfcRatioMeasure, IfcColourOrFactor, IfcMeasureValue, IfcSizeSelect, IfcTimeOrRatioSelect
	{
		public IfcNormalisedRatioMeasure() { }
		public IfcNormalisedRatioMeasure(double value) { Value = value; }
		public static implicit operator IfcNormalisedRatioMeasure(double x) { return new IfcNormalisedRatioMeasure(x); }
		public static implicit operator double(IfcNormalisedRatioMeasure x) { return x.Value; }
	}

	public class IfcNumericMeasure : NUMBER, IfcMeasureValue
	{
		public IfcNumericMeasure() { }
		public IfcNumericMeasure(double value) { Value = value; }
		public static implicit operator IfcNumericMeasure(double x) { return new IfcNumericMeasure(x); }
		public static implicit operator double(IfcNumericMeasure x) { return x.Value; }
	}

	public class IfcPHMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcPHMeasure() { }
		public IfcPHMeasure(double value) { Value = value; }
		public static implicit operator IfcPHMeasure(double x) { return new IfcPHMeasure(x); }
		public static implicit operator double(IfcPHMeasure x) { return x.Value; }
	}

	public class IfcParameterValue : REAL, IfcMeasureValue, IfcTrimmingSelect
	{
		public IfcParameterValue() { }
		public IfcParameterValue(double value) { Value = value; }
		public static implicit operator IfcParameterValue(double x) { return new IfcParameterValue(x); }
		public static implicit operator double(IfcParameterValue x) { return x.Value; }
	}

	public class IfcPlanarForceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcPlanarForceMeasure() { }
		public IfcPlanarForceMeasure(double value) { Value = value; }
		public static implicit operator IfcPlanarForceMeasure(double x) { return new IfcPlanarForceMeasure(x); }
		public static implicit operator double(IfcPlanarForceMeasure x) { return x.Value; }
	}

	public class IfcPlaneAngleMeasure : REAL, IfcBendingParameterSelect, IfcMeasureValue
	{
		public IfcPlaneAngleMeasure() { }
		public IfcPlaneAngleMeasure(double value) { Value = value; }
		public static implicit operator IfcPlaneAngleMeasure(double x) { return new IfcPlaneAngleMeasure(x); }
		public static implicit operator double(IfcPlaneAngleMeasure x) { return x.Value; }
	}

	public class IfcPositiveInteger : IfcInteger, IfcSimpleValue
	{
		public IfcPositiveInteger() { }
		public IfcPositiveInteger(int value) { Value = value; }
		public static implicit operator IfcPositiveInteger(int x) { return new IfcPositiveInteger(x); }
		public static implicit operator int(IfcPositiveInteger x) { return x.Value; }
	}

	public class IfcPositiveLengthMeasure : IfcLengthMeasure, IfcBendingParameterSelect, IfcHatchLineDistanceSelect, IfcMeasureValue, IfcSizeSelect
	{
		public IfcPositiveLengthMeasure() { }
		public IfcPositiveLengthMeasure(double value) { Value = value; }
		public static implicit operator IfcPositiveLengthMeasure(double x) { return new IfcPositiveLengthMeasure(x); }
		public static implicit operator double(IfcPositiveLengthMeasure x) { return x.Value; }
	}

	public class IfcPositivePlaneAngleMeasure : IfcPlaneAngleMeasure, IfcBendingParameterSelect, IfcMeasureValue
	{
		public IfcPositivePlaneAngleMeasure() { }
		public IfcPositivePlaneAngleMeasure(double value) { Value = value; }
		public static implicit operator IfcPositivePlaneAngleMeasure(double x) { return new IfcPositivePlaneAngleMeasure(x); }
		public static implicit operator double(IfcPositivePlaneAngleMeasure x) { return x.Value; }
	}

	public class IfcPositiveRatioMeasure : IfcRatioMeasure, IfcMeasureValue, IfcSizeSelect, IfcTimeOrRatioSelect
	{
		public IfcPositiveRatioMeasure() { }
		public IfcPositiveRatioMeasure(double value) { Value = value; }
		public static implicit operator IfcPositiveRatioMeasure(double x) { return new IfcPositiveRatioMeasure(x); }
		public static implicit operator double(IfcPositiveRatioMeasure x) { return x.Value; }
	}

	public class IfcPowerMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcPowerMeasure() { }
		public IfcPowerMeasure(double value) { Value = value; }
		public static implicit operator IfcPowerMeasure(double x) { return new IfcPowerMeasure(x); }
		public static implicit operator double(IfcPowerMeasure x) { return x.Value; }
	}

	public class IfcPresentableText : STRING
	{
		public IfcPresentableText() { }
		public IfcPresentableText(string value) { Value = value; }
		public static implicit operator IfcPresentableText(string x) { return new IfcPresentableText(x); }
		public static implicit operator string(IfcPresentableText x) { return x.Value; }
	}

	public class IfcPressureMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcPressureMeasure() { }
		public IfcPressureMeasure(double value) { Value = value; }
		public static implicit operator IfcPressureMeasure(double x) { return new IfcPressureMeasure(x); }
		public static implicit operator double(IfcPressureMeasure x) { return x.Value; }
	}

	public class IfcPropertySetDefinitionSet : List<IfcPropertySetDefinition>, IfcPropertySetDefinitionSelect
	{
		public IfcPropertySetDefinitionSet() { }
		public IfcPropertySetDefinitionSet(List<IfcPropertySetDefinition> value)
		{
			Clear();
			foreach (var v in value)
			{
				Add(v);
			}
		}
	}

	public class IfcRadioActivityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcRadioActivityMeasure() { }
		public IfcRadioActivityMeasure(double value) { Value = value; }
		public static implicit operator IfcRadioActivityMeasure(double x) { return new IfcRadioActivityMeasure(x); }
		public static implicit operator double(IfcRadioActivityMeasure x) { return x.Value; }
	}

	public class IfcRatioMeasure : REAL, IfcMeasureValue, IfcSizeSelect, IfcTimeOrRatioSelect
	{
		public IfcRatioMeasure() { }
		public IfcRatioMeasure(double value) { Value = value; }
		public static implicit operator IfcRatioMeasure(double x) { return new IfcRatioMeasure(x); }
		public static implicit operator double(IfcRatioMeasure x) { return x.Value; }
	}

	public class IfcReal : REAL, IfcSimpleValue
	{
		public IfcReal() { }
		public IfcReal(double value) { Value = value; }
		public static implicit operator IfcReal(double x) { return new IfcReal(x); }
		public static implicit operator double(IfcReal x) { return x.Value; }
	}

	public class IfcRotationalFrequencyMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcRotationalFrequencyMeasure() { }
		public IfcRotationalFrequencyMeasure(double value) { Value = value; }
		public static implicit operator IfcRotationalFrequencyMeasure(double x) { return new IfcRotationalFrequencyMeasure(x); }
		public static implicit operator double(IfcRotationalFrequencyMeasure x) { return x.Value; }
	}

	public class IfcRotationalMassMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcRotationalMassMeasure() { }
		public IfcRotationalMassMeasure(double value) { Value = value; }
		public static implicit operator IfcRotationalMassMeasure(double x) { return new IfcRotationalMassMeasure(x); }
		public static implicit operator double(IfcRotationalMassMeasure x) { return x.Value; }
	}

	public class IfcRotationalStiffnessMeasure : REAL, IfcDerivedMeasureValue, IfcRotationalStiffnessSelect
	{
		public IfcRotationalStiffnessMeasure() { }
		public IfcRotationalStiffnessMeasure(double value) { Value = value; }
		public static implicit operator IfcRotationalStiffnessMeasure(double x) { return new IfcRotationalStiffnessMeasure(x); }
		public static implicit operator double(IfcRotationalStiffnessMeasure x) { return x.Value; }
	}

	public class IfcSectionModulusMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcSectionModulusMeasure() { }
		public IfcSectionModulusMeasure(double value) { Value = value; }
		public static implicit operator IfcSectionModulusMeasure(double x) { return new IfcSectionModulusMeasure(x); }
		public static implicit operator double(IfcSectionModulusMeasure x) { return x.Value; }
	}

	public class IfcSectionalAreaIntegralMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcSectionalAreaIntegralMeasure() { }
		public IfcSectionalAreaIntegralMeasure(double value) { Value = value; }
		public static implicit operator IfcSectionalAreaIntegralMeasure(double x) { return new IfcSectionalAreaIntegralMeasure(x); }
		public static implicit operator double(IfcSectionalAreaIntegralMeasure x) { return x.Value; }
	}

	public class IfcShearModulusMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcShearModulusMeasure() { }
		public IfcShearModulusMeasure(double value) { Value = value; }
		public static implicit operator IfcShearModulusMeasure(double x) { return new IfcShearModulusMeasure(x); }
		public static implicit operator double(IfcShearModulusMeasure x) { return x.Value; }
	}

	public class IfcSolidAngleMeasure : REAL, IfcMeasureValue
	{
		public IfcSolidAngleMeasure() { }
		public IfcSolidAngleMeasure(double value) { Value = value; }
		public static implicit operator IfcSolidAngleMeasure(double x) { return new IfcSolidAngleMeasure(x); }
		public static implicit operator double(IfcSolidAngleMeasure x) { return x.Value; }
	}

	public class IfcSoundPowerLevelMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcSoundPowerLevelMeasure() { }
		public IfcSoundPowerLevelMeasure(double value) { Value = value; }
		public static implicit operator IfcSoundPowerLevelMeasure(double x) { return new IfcSoundPowerLevelMeasure(x); }
		public static implicit operator double(IfcSoundPowerLevelMeasure x) { return x.Value; }
	}

	public class IfcSoundPowerMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcSoundPowerMeasure() { }
		public IfcSoundPowerMeasure(double value) { Value = value; }
		public static implicit operator IfcSoundPowerMeasure(double x) { return new IfcSoundPowerMeasure(x); }
		public static implicit operator double(IfcSoundPowerMeasure x) { return x.Value; }
	}

	public class IfcSoundPressureLevelMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcSoundPressureLevelMeasure() { }
		public IfcSoundPressureLevelMeasure(double value) { Value = value; }
		public static implicit operator IfcSoundPressureLevelMeasure(double x) { return new IfcSoundPressureLevelMeasure(x); }
		public static implicit operator double(IfcSoundPressureLevelMeasure x) { return x.Value; }
	}

	public class IfcSoundPressureMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcSoundPressureMeasure() { }
		public IfcSoundPressureMeasure(double value) { Value = value; }
		public static implicit operator IfcSoundPressureMeasure(double x) { return new IfcSoundPressureMeasure(x); }
		public static implicit operator double(IfcSoundPressureMeasure x) { return x.Value; }
	}

	public class IfcSpecificHeatCapacityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcSpecificHeatCapacityMeasure() { }
		public IfcSpecificHeatCapacityMeasure(double value) { Value = value; }
		public static implicit operator IfcSpecificHeatCapacityMeasure(double x) { return new IfcSpecificHeatCapacityMeasure(x); }
		public static implicit operator double(IfcSpecificHeatCapacityMeasure x) { return x.Value; }
	}

	public class IfcSpecularExponent : REAL, IfcSpecularHighlightSelect
	{
		public IfcSpecularExponent() { }
		public IfcSpecularExponent(double value) { Value = value; }
		public static implicit operator IfcSpecularExponent(double x) { return new IfcSpecularExponent(x); }
		public static implicit operator double(IfcSpecularExponent x) { return x.Value; }
	}

	public class IfcSpecularRoughness : REAL, IfcSpecularHighlightSelect
	{
		public IfcSpecularRoughness() { }
		public IfcSpecularRoughness(double value) { Value = value; }
		public static implicit operator IfcSpecularRoughness(double x) { return new IfcSpecularRoughness(x); }
		public static implicit operator double(IfcSpecularRoughness x) { return x.Value; }
	}

	public class IfcTemperatureGradientMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcTemperatureGradientMeasure() { }
		public IfcTemperatureGradientMeasure(double value) { Value = value; }
		public static implicit operator IfcTemperatureGradientMeasure(double x) { return new IfcTemperatureGradientMeasure(x); }
		public static implicit operator double(IfcTemperatureGradientMeasure x) { return x.Value; }
	}

	public class IfcTemperatureRateOfChangeMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcTemperatureRateOfChangeMeasure() { }
		public IfcTemperatureRateOfChangeMeasure(double value) { Value = value; }
		public static implicit operator IfcTemperatureRateOfChangeMeasure(double x) { return new IfcTemperatureRateOfChangeMeasure(x); }
		public static implicit operator double(IfcTemperatureRateOfChangeMeasure x) { return x.Value; }
	}

	public class IfcText : STRING, IfcSimpleValue
	{
		public IfcText() { }
		public IfcText(string value) { Value = value; }
		public static implicit operator IfcText(string x) { return new IfcText(x); }
		public static implicit operator string(IfcText x) { return x.Value; }
	}

	public class IfcTextAlignment : STRING
	{
		public IfcTextAlignment() { }
		public IfcTextAlignment(string value) { Value = value; }
		public static implicit operator IfcTextAlignment(string x) { return new IfcTextAlignment(x); }
		public static implicit operator string(IfcTextAlignment x) { return x.Value; }
	}

	public class IfcTextDecoration : STRING
	{
		public IfcTextDecoration() { }
		public IfcTextDecoration(string value) { Value = value; }
		public static implicit operator IfcTextDecoration(string x) { return new IfcTextDecoration(x); }
		public static implicit operator string(IfcTextDecoration x) { return x.Value; }
	}

	public class IfcTextFontName : STRING
	{
		public IfcTextFontName() { }
		public IfcTextFontName(string value) { Value = value; }
		public static implicit operator IfcTextFontName(string x) { return new IfcTextFontName(x); }
		public static implicit operator string(IfcTextFontName x) { return x.Value; }
	}

	public class IfcTextTransformation : STRING
	{
		public IfcTextTransformation() { }
		public IfcTextTransformation(string value) { Value = value; }
		public static implicit operator IfcTextTransformation(string x) { return new IfcTextTransformation(x); }
		public static implicit operator string(IfcTextTransformation x) { return x.Value; }
	}

	public class IfcThermalAdmittanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcThermalAdmittanceMeasure() { }
		public IfcThermalAdmittanceMeasure(double value) { Value = value; }
		public static implicit operator IfcThermalAdmittanceMeasure(double x) { return new IfcThermalAdmittanceMeasure(x); }
		public static implicit operator double(IfcThermalAdmittanceMeasure x) { return x.Value; }
	}

	public class IfcThermalConductivityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcThermalConductivityMeasure() { }
		public IfcThermalConductivityMeasure(double value) { Value = value; }
		public static implicit operator IfcThermalConductivityMeasure(double x) { return new IfcThermalConductivityMeasure(x); }
		public static implicit operator double(IfcThermalConductivityMeasure x) { return x.Value; }
	}

	public class IfcThermalExpansionCoefficientMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcThermalExpansionCoefficientMeasure() { }
		public IfcThermalExpansionCoefficientMeasure(double value) { Value = value; }
		public static implicit operator IfcThermalExpansionCoefficientMeasure(double x) { return new IfcThermalExpansionCoefficientMeasure(x); }
		public static implicit operator double(IfcThermalExpansionCoefficientMeasure x) { return x.Value; }
	}

	public class IfcThermalResistanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcThermalResistanceMeasure() { }
		public IfcThermalResistanceMeasure(double value) { Value = value; }
		public static implicit operator IfcThermalResistanceMeasure(double x) { return new IfcThermalResistanceMeasure(x); }
		public static implicit operator double(IfcThermalResistanceMeasure x) { return x.Value; }
	}

	public class IfcThermalTransmittanceMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcThermalTransmittanceMeasure() { }
		public IfcThermalTransmittanceMeasure(double value) { Value = value; }
		public static implicit operator IfcThermalTransmittanceMeasure(double x) { return new IfcThermalTransmittanceMeasure(x); }
		public static implicit operator double(IfcThermalTransmittanceMeasure x) { return x.Value; }
	}

	public class IfcThermodynamicTemperatureMeasure : REAL, IfcMeasureValue
	{
		public IfcThermodynamicTemperatureMeasure() { }
		public IfcThermodynamicTemperatureMeasure(double value) { Value = value; }
		public static implicit operator IfcThermodynamicTemperatureMeasure(double x) { return new IfcThermodynamicTemperatureMeasure(x); }
		public static implicit operator double(IfcThermodynamicTemperatureMeasure x) { return x.Value; }
	}

	public class IfcTime : STRING, IfcSimpleValue
	{
		public IfcTime() { }
		public IfcTime(string value) { Value = value; }
		public static implicit operator IfcTime(string x) { return new IfcTime(x); }
		public static implicit operator string(IfcTime x) { return x.Value; }
	}

	public class IfcTimeMeasure : REAL, IfcMeasureValue
	{
		public IfcTimeMeasure() { }
		public IfcTimeMeasure(double value) { Value = value; }
		public static implicit operator IfcTimeMeasure(double x) { return new IfcTimeMeasure(x); }
		public static implicit operator double(IfcTimeMeasure x) { return x.Value; }
	}

	public class IfcTimeStamp : INTEGER, IfcSimpleValue
	{
		public IfcTimeStamp() { }
		public IfcTimeStamp(int value) { Value = value; }
		public static implicit operator IfcTimeStamp(int x) { return new IfcTimeStamp(x); }
		public static implicit operator int(IfcTimeStamp x) { return x.Value; }
	}

	public class IfcTorqueMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcTorqueMeasure() { }
		public IfcTorqueMeasure(double value) { Value = value; }
		public static implicit operator IfcTorqueMeasure(double x) { return new IfcTorqueMeasure(x); }
		public static implicit operator double(IfcTorqueMeasure x) { return x.Value; }
	}

	public class IfcURIReference : STRING
	{
		public IfcURIReference() { }
		public IfcURIReference(string value) { Value = value; }
		public static implicit operator IfcURIReference(string x) { return new IfcURIReference(x); }
		public static implicit operator string(IfcURIReference x) { return x.Value; }
	}

	public class IfcVaporPermeabilityMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcVaporPermeabilityMeasure() { }
		public IfcVaporPermeabilityMeasure(double value) { Value = value; }
		public static implicit operator IfcVaporPermeabilityMeasure(double x) { return new IfcVaporPermeabilityMeasure(x); }
		public static implicit operator double(IfcVaporPermeabilityMeasure x) { return x.Value; }
	}

	public class IfcVolumeMeasure : REAL, IfcMeasureValue
	{
		public IfcVolumeMeasure() { }
		public IfcVolumeMeasure(double value) { Value = value; }
		public static implicit operator IfcVolumeMeasure(double x) { return new IfcVolumeMeasure(x); }
		public static implicit operator double(IfcVolumeMeasure x) { return x.Value; }
	}

	public class IfcVolumetricFlowRateMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcVolumetricFlowRateMeasure() { }
		public IfcVolumetricFlowRateMeasure(double value) { Value = value; }
		public static implicit operator IfcVolumetricFlowRateMeasure(double x) { return new IfcVolumetricFlowRateMeasure(x); }
		public static implicit operator double(IfcVolumetricFlowRateMeasure x) { return x.Value; }
	}

	public class IfcWarpingConstantMeasure : REAL, IfcDerivedMeasureValue
	{
		public IfcWarpingConstantMeasure() { }
		public IfcWarpingConstantMeasure(double value) { Value = value; }
		public static implicit operator IfcWarpingConstantMeasure(double x) { return new IfcWarpingConstantMeasure(x); }
		public static implicit operator double(IfcWarpingConstantMeasure x) { return x.Value; }
	}

	public class IfcWarpingMomentMeasure : REAL, IfcDerivedMeasureValue, IfcWarpingStiffnessSelect
	{
		public IfcWarpingMomentMeasure() { }
		public IfcWarpingMomentMeasure(double value) { Value = value; }
		public static implicit operator IfcWarpingMomentMeasure(double x) { return new IfcWarpingMomentMeasure(x); }
		public static implicit operator double(IfcWarpingMomentMeasure x) { return x.Value; }
	}

	public class IfcActionRequestTypeEnum
	{
		public const string EMAIL = "EMAIL";
		public const string FAX = "FAX";
		public const string PHONE = "PHONE";
		public const string POST = "POST";
		public const string VERBAL = "VERBAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcActionRequestTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionRequestTypeEnum(string x) { return new IfcActionRequestTypeEnum(x); }
		public static implicit operator string(IfcActionRequestTypeEnum x) { return x.Value; }
	}

	public class IfcActionSourceTypeEnum
	{
		public const string DEAD_LOAD_G = "DEAD_LOAD_G";
		public const string COMPLETION_G1 = "COMPLETION_G1";
		public const string LIVE_LOAD_Q = "LIVE_LOAD_Q";
		public const string SNOW_S = "SNOW_S";
		public const string WIND_W = "WIND_W";
		public const string PRESTRESSING_P = "PRESTRESSING_P";
		public const string SETTLEMENT_U = "SETTLEMENT_U";
		public const string TEMPERATURE_T = "TEMPERATURE_T";
		public const string EARTHQUAKE_E = "EARTHQUAKE_E";
		public const string FIRE = "FIRE";
		public const string IMPULSE = "IMPULSE";
		public const string IMPACT = "IMPACT";
		public const string TRANSPORT = "TRANSPORT";
		public const string ERECTION = "ERECTION";
		public const string PROPPING = "PROPPING";
		public const string SYSTEM_IMPERFECTION = "SYSTEM_IMPERFECTION";
		public const string SHRINKAGE = "SHRINKAGE";
		public const string CREEP = "CREEP";
		public const string LACK_OF_FIT = "LACK_OF_FIT";
		public const string BUOYANCY = "BUOYANCY";
		public const string ICE = "ICE";
		public const string CURRENT = "CURRENT";
		public const string WAVE = "WAVE";
		public const string RAIN = "RAIN";
		public const string BRAKES = "BRAKES";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcActionSourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionSourceTypeEnum(string x) { return new IfcActionSourceTypeEnum(x); }
		public static implicit operator string(IfcActionSourceTypeEnum x) { return x.Value; }
	}

	public class IfcActionTypeEnum
	{
		public const string PERMANENT_G = "PERMANENT_G";
		public const string VARIABLE_Q = "VARIABLE_Q";
		public const string EXTRAORDINARY_A = "EXTRAORDINARY_A";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcActionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionTypeEnum(string x) { return new IfcActionTypeEnum(x); }
		public static implicit operator string(IfcActionTypeEnum x) { return x.Value; }
	}

	public class IfcActuatorTypeEnum
	{
		public const string ELECTRICACTUATOR = "ELECTRICACTUATOR";
		public const string HANDOPERATEDACTUATOR = "HANDOPERATEDACTUATOR";
		public const string HYDRAULICACTUATOR = "HYDRAULICACTUATOR";
		public const string PNEUMATICACTUATOR = "PNEUMATICACTUATOR";
		public const string THERMOSTATICACTUATOR = "THERMOSTATICACTUATOR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcActuatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActuatorTypeEnum(string x) { return new IfcActuatorTypeEnum(x); }
		public static implicit operator string(IfcActuatorTypeEnum x) { return x.Value; }
	}

	public class IfcAddressTypeEnum
	{
		public const string OFFICE = "OFFICE";
		public const string SITE = "SITE";
		public const string HOME = "HOME";
		public const string DISTRIBUTIONPOINT = "DISTRIBUTIONPOINT";
		public const string USERDEFINED = "USERDEFINED";
		private string Value;
		public IfcAddressTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAddressTypeEnum(string x) { return new IfcAddressTypeEnum(x); }
		public static implicit operator string(IfcAddressTypeEnum x) { return x.Value; }
	}

	public class IfcAirTerminalBoxTypeEnum
	{
		public const string CONSTANTFLOW = "CONSTANTFLOW";
		public const string VARIABLEFLOWPRESSUREDEPENDANT = "VARIABLEFLOWPRESSUREDEPENDANT";
		public const string VARIABLEFLOWPRESSUREINDEPENDANT = "VARIABLEFLOWPRESSUREINDEPENDANT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAirTerminalBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirTerminalBoxTypeEnum(string x) { return new IfcAirTerminalBoxTypeEnum(x); }
		public static implicit operator string(IfcAirTerminalBoxTypeEnum x) { return x.Value; }
	}

	public class IfcAirTerminalTypeEnum
	{
		public const string DIFFUSER = "DIFFUSER";
		public const string GRILLE = "GRILLE";
		public const string LOUVRE = "LOUVRE";
		public const string REGISTER = "REGISTER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAirTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirTerminalTypeEnum(string x) { return new IfcAirTerminalTypeEnum(x); }
		public static implicit operator string(IfcAirTerminalTypeEnum x) { return x.Value; }
	}

	public class IfcAirToAirHeatRecoveryTypeEnum
	{
		public const string FIXEDPLATECOUNTERFLOWEXCHANGER = "FIXEDPLATECOUNTERFLOWEXCHANGER";
		public const string FIXEDPLATECROSSFLOWEXCHANGER = "FIXEDPLATECROSSFLOWEXCHANGER";
		public const string FIXEDPLATEPARALLELFLOWEXCHANGER = "FIXEDPLATEPARALLELFLOWEXCHANGER";
		public const string ROTARYWHEEL = "ROTARYWHEEL";
		public const string RUNAROUNDCOILLOOP = "RUNAROUNDCOILLOOP";
		public const string HEATPIPE = "HEATPIPE";
		public const string TWINTOWERENTHALPYRECOVERYLOOPS = "TWINTOWERENTHALPYRECOVERYLOOPS";
		public const string THERMOSIPHONSEALEDTUBEHEATEXCHANGERS = "THERMOSIPHONSEALEDTUBEHEATEXCHANGERS";
		public const string THERMOSIPHONCOILTYPEHEATEXCHANGERS = "THERMOSIPHONCOILTYPEHEATEXCHANGERS";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAirToAirHeatRecoveryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirToAirHeatRecoveryTypeEnum(string x) { return new IfcAirToAirHeatRecoveryTypeEnum(x); }
		public static implicit operator string(IfcAirToAirHeatRecoveryTypeEnum x) { return x.Value; }
	}

	public class IfcAlarmTypeEnum
	{
		public const string BELL = "BELL";
		public const string BREAKGLASSBUTTON = "BREAKGLASSBUTTON";
		public const string LIGHT = "LIGHT";
		public const string MANUALPULLBOX = "MANUALPULLBOX";
		public const string SIREN = "SIREN";
		public const string WHISTLE = "WHISTLE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAlarmTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAlarmTypeEnum(string x) { return new IfcAlarmTypeEnum(x); }
		public static implicit operator string(IfcAlarmTypeEnum x) { return x.Value; }
	}

	public class IfcAnalysisModelTypeEnum
	{
		public const string IN_PLANE_LOADING_2D = "IN_PLANE_LOADING_2D";
		public const string OUT_PLANE_LOADING_2D = "OUT_PLANE_LOADING_2D";
		public const string LOADING_3D = "LOADING_3D";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAnalysisModelTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAnalysisModelTypeEnum(string x) { return new IfcAnalysisModelTypeEnum(x); }
		public static implicit operator string(IfcAnalysisModelTypeEnum x) { return x.Value; }
	}

	public class IfcAnalysisTheoryTypeEnum
	{
		public const string FIRST_ORDER_THEORY = "FIRST_ORDER_THEORY";
		public const string SECOND_ORDER_THEORY = "SECOND_ORDER_THEORY";
		public const string THIRD_ORDER_THEORY = "THIRD_ORDER_THEORY";
		public const string FULL_NONLINEAR_THEORY = "FULL_NONLINEAR_THEORY";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAnalysisTheoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAnalysisTheoryTypeEnum(string x) { return new IfcAnalysisTheoryTypeEnum(x); }
		public static implicit operator string(IfcAnalysisTheoryTypeEnum x) { return x.Value; }
	}

	public class IfcArithmeticOperatorEnum
	{
		public const string ADD = "ADD";
		public const string DIVIDE = "DIVIDE";
		public const string MULTIPLY = "MULTIPLY";
		public const string SUBTRACT = "SUBTRACT";
		private string Value;
		public IfcArithmeticOperatorEnum(string value) { Value = value; }
		public static implicit operator IfcArithmeticOperatorEnum(string x) { return new IfcArithmeticOperatorEnum(x); }
		public static implicit operator string(IfcArithmeticOperatorEnum x) { return x.Value; }
	}

	public class IfcAssemblyPlaceEnum
	{
		public const string SITE = "SITE";
		public const string FACTORY = "FACTORY";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAssemblyPlaceEnum(string value) { Value = value; }
		public static implicit operator IfcAssemblyPlaceEnum(string x) { return new IfcAssemblyPlaceEnum(x); }
		public static implicit operator string(IfcAssemblyPlaceEnum x) { return x.Value; }
	}

	public class IfcAudioVisualApplianceTypeEnum
	{
		public const string AMPLIFIER = "AMPLIFIER";
		public const string CAMERA = "CAMERA";
		public const string DISPLAY = "DISPLAY";
		public const string MICROPHONE = "MICROPHONE";
		public const string PLAYER = "PLAYER";
		public const string PROJECTOR = "PROJECTOR";
		public const string RECEIVER = "RECEIVER";
		public const string SPEAKER = "SPEAKER";
		public const string SWITCHER = "SWITCHER";
		public const string TELEPHONE = "TELEPHONE";
		public const string TUNER = "TUNER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcAudioVisualApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAudioVisualApplianceTypeEnum(string x) { return new IfcAudioVisualApplianceTypeEnum(x); }
		public static implicit operator string(IfcAudioVisualApplianceTypeEnum x) { return x.Value; }
	}

	public class IfcBSplineCurveForm
	{
		public const string POLYLINE_FORM = "POLYLINE_FORM";
		public const string CIRCULAR_ARC = "CIRCULAR_ARC";
		public const string ELLIPTIC_ARC = "ELLIPTIC_ARC";
		public const string PARABOLIC_ARC = "PARABOLIC_ARC";
		public const string HYPERBOLIC_ARC = "HYPERBOLIC_ARC";
		public const string UNSPECIFIED = "UNSPECIFIED";
		private string Value;
		public IfcBSplineCurveForm(string value) { Value = value; }
		public static implicit operator IfcBSplineCurveForm(string x) { return new IfcBSplineCurveForm(x); }
		public static implicit operator string(IfcBSplineCurveForm x) { return x.Value; }
	}

	public class IfcBSplineSurfaceForm
	{
		public const string PLANE_SURF = "PLANE_SURF";
		public const string CYLINDRICAL_SURF = "CYLINDRICAL_SURF";
		public const string CONICAL_SURF = "CONICAL_SURF";
		public const string SPHERICAL_SURF = "SPHERICAL_SURF";
		public const string TOROIDAL_SURF = "TOROIDAL_SURF";
		public const string SURF_OF_REVOLUTION = "SURF_OF_REVOLUTION";
		public const string RULED_SURF = "RULED_SURF";
		public const string GENERALISED_CONE = "GENERALISED_CONE";
		public const string QUADRIC_SURF = "QUADRIC_SURF";
		public const string SURF_OF_LINEAR_EXTRUSION = "SURF_OF_LINEAR_EXTRUSION";
		public const string UNSPECIFIED = "UNSPECIFIED";
		private string Value;
		public IfcBSplineSurfaceForm(string value) { Value = value; }
		public static implicit operator IfcBSplineSurfaceForm(string x) { return new IfcBSplineSurfaceForm(x); }
		public static implicit operator string(IfcBSplineSurfaceForm x) { return x.Value; }
	}

	public class IfcBeamTypeEnum
	{
		public const string BEAM = "BEAM";
		public const string JOIST = "JOIST";
		public const string HOLLOWCORE = "HOLLOWCORE";
		public const string LINTEL = "LINTEL";
		public const string SPANDREL = "SPANDREL";
		public const string T_BEAM = "T_BEAM";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBeamTypeEnum(string x) { return new IfcBeamTypeEnum(x); }
		public static implicit operator string(IfcBeamTypeEnum x) { return x.Value; }
	}

	public class IfcBenchmarkEnum
	{
		public const string GREATERTHAN = "GREATERTHAN";
		public const string GREATERTHANOREQUALTO = "GREATERTHANOREQUALTO";
		public const string LESSTHAN = "LESSTHAN";
		public const string LESSTHANOREQUALTO = "LESSTHANOREQUALTO";
		public const string EQUALTO = "EQUALTO";
		public const string NOTEQUALTO = "NOTEQUALTO";
		public const string INCLUDES = "INCLUDES";
		public const string NOTINCLUDES = "NOTINCLUDES";
		public const string INCLUDEDIN = "INCLUDEDIN";
		public const string NOTINCLUDEDIN = "NOTINCLUDEDIN";
		private string Value;
		public IfcBenchmarkEnum(string value) { Value = value; }
		public static implicit operator IfcBenchmarkEnum(string x) { return new IfcBenchmarkEnum(x); }
		public static implicit operator string(IfcBenchmarkEnum x) { return x.Value; }
	}

	public class IfcBoilerTypeEnum
	{
		public const string WATER = "WATER";
		public const string STEAM = "STEAM";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcBoilerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBoilerTypeEnum(string x) { return new IfcBoilerTypeEnum(x); }
		public static implicit operator string(IfcBoilerTypeEnum x) { return x.Value; }
	}

	public class IfcBooleanOperator
	{
		public const string UNION = "UNION";
		public const string INTERSECTION = "INTERSECTION";
		public const string DIFFERENCE = "DIFFERENCE";
		private string Value;
		public IfcBooleanOperator(string value) { Value = value; }
		public static implicit operator IfcBooleanOperator(string x) { return new IfcBooleanOperator(x); }
		public static implicit operator string(IfcBooleanOperator x) { return x.Value; }
	}

	public class IfcBuildingElementPartTypeEnum
	{
		public const string INSULATION = "INSULATION";
		public const string PRECASTPANEL = "PRECASTPANEL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcBuildingElementPartTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBuildingElementPartTypeEnum(string x) { return new IfcBuildingElementPartTypeEnum(x); }
		public static implicit operator string(IfcBuildingElementPartTypeEnum x) { return x.Value; }
	}

	public class IfcBuildingElementProxyTypeEnum
	{
		public const string COMPLEX = "COMPLEX";
		public const string ELEMENT = "ELEMENT";
		public const string PARTIAL = "PARTIAL";
		public const string PROVISIONFORVOID = "PROVISIONFORVOID";
		public const string PROVISIONFORSPACE = "PROVISIONFORSPACE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcBuildingElementProxyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBuildingElementProxyTypeEnum(string x) { return new IfcBuildingElementProxyTypeEnum(x); }
		public static implicit operator string(IfcBuildingElementProxyTypeEnum x) { return x.Value; }
	}

	public class IfcBuildingSystemTypeEnum
	{
		public const string FENESTRATION = "FENESTRATION";
		public const string FOUNDATION = "FOUNDATION";
		public const string LOADBEARING = "LOADBEARING";
		public const string OUTERSHELL = "OUTERSHELL";
		public const string SHADING = "SHADING";
		public const string TRANSPORT = "TRANSPORT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcBuildingSystemTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBuildingSystemTypeEnum(string x) { return new IfcBuildingSystemTypeEnum(x); }
		public static implicit operator string(IfcBuildingSystemTypeEnum x) { return x.Value; }
	}

	public class IfcBurnerTypeEnum
	{
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcBurnerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBurnerTypeEnum(string x) { return new IfcBurnerTypeEnum(x); }
		public static implicit operator string(IfcBurnerTypeEnum x) { return x.Value; }
	}

	public class IfcCableCarrierFittingTypeEnum
	{
		public const string BEND = "BEND";
		public const string CROSS = "CROSS";
		public const string REDUCER = "REDUCER";
		public const string TEE = "TEE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCableCarrierFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableCarrierFittingTypeEnum(string x) { return new IfcCableCarrierFittingTypeEnum(x); }
		public static implicit operator string(IfcCableCarrierFittingTypeEnum x) { return x.Value; }
	}

	public class IfcCableCarrierSegmentTypeEnum
	{
		public const string CABLELADDERSEGMENT = "CABLELADDERSEGMENT";
		public const string CABLETRAYSEGMENT = "CABLETRAYSEGMENT";
		public const string CABLETRUNKINGSEGMENT = "CABLETRUNKINGSEGMENT";
		public const string CONDUITSEGMENT = "CONDUITSEGMENT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCableCarrierSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableCarrierSegmentTypeEnum(string x) { return new IfcCableCarrierSegmentTypeEnum(x); }
		public static implicit operator string(IfcCableCarrierSegmentTypeEnum x) { return x.Value; }
	}

	public class IfcCableFittingTypeEnum
	{
		public const string CONNECTOR = "CONNECTOR";
		public const string ENTRY = "ENTRY";
		public const string EXIT = "EXIT";
		public const string JUNCTION = "JUNCTION";
		public const string TRANSITION = "TRANSITION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCableFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableFittingTypeEnum(string x) { return new IfcCableFittingTypeEnum(x); }
		public static implicit operator string(IfcCableFittingTypeEnum x) { return x.Value; }
	}

	public class IfcCableSegmentTypeEnum
	{
		public const string BUSBARSEGMENT = "BUSBARSEGMENT";
		public const string CABLESEGMENT = "CABLESEGMENT";
		public const string CONDUCTORSEGMENT = "CONDUCTORSEGMENT";
		public const string CORESEGMENT = "CORESEGMENT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCableSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableSegmentTypeEnum(string x) { return new IfcCableSegmentTypeEnum(x); }
		public static implicit operator string(IfcCableSegmentTypeEnum x) { return x.Value; }
	}

	public class IfcChangeActionEnum
	{
		public const string NOCHANGE = "NOCHANGE";
		public const string MODIFIED = "MODIFIED";
		public const string ADDED = "ADDED";
		public const string DELETED = "DELETED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcChangeActionEnum(string value) { Value = value; }
		public static implicit operator IfcChangeActionEnum(string x) { return new IfcChangeActionEnum(x); }
		public static implicit operator string(IfcChangeActionEnum x) { return x.Value; }
	}

	public class IfcChillerTypeEnum
	{
		public const string AIRCOOLED = "AIRCOOLED";
		public const string WATERCOOLED = "WATERCOOLED";
		public const string HEATRECOVERY = "HEATRECOVERY";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcChillerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcChillerTypeEnum(string x) { return new IfcChillerTypeEnum(x); }
		public static implicit operator string(IfcChillerTypeEnum x) { return x.Value; }
	}

	public class IfcChimneyTypeEnum
	{
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcChimneyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcChimneyTypeEnum(string x) { return new IfcChimneyTypeEnum(x); }
		public static implicit operator string(IfcChimneyTypeEnum x) { return x.Value; }
	}

	public class IfcCoilTypeEnum
	{
		public const string DXCOOLINGCOIL = "DXCOOLINGCOIL";
		public const string ELECTRICHEATINGCOIL = "ELECTRICHEATINGCOIL";
		public const string GASHEATINGCOIL = "GASHEATINGCOIL";
		public const string HYDRONICCOIL = "HYDRONICCOIL";
		public const string STEAMHEATINGCOIL = "STEAMHEATINGCOIL";
		public const string WATERCOOLINGCOIL = "WATERCOOLINGCOIL";
		public const string WATERHEATINGCOIL = "WATERHEATINGCOIL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCoilTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoilTypeEnum(string x) { return new IfcCoilTypeEnum(x); }
		public static implicit operator string(IfcCoilTypeEnum x) { return x.Value; }
	}

	public class IfcColumnTypeEnum
	{
		public const string COLUMN = "COLUMN";
		public const string PILASTER = "PILASTER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcColumnTypeEnum(string value) { Value = value; }
		public static implicit operator IfcColumnTypeEnum(string x) { return new IfcColumnTypeEnum(x); }
		public static implicit operator string(IfcColumnTypeEnum x) { return x.Value; }
	}

	public class IfcCommunicationsApplianceTypeEnum
	{
		public const string ANTENNA = "ANTENNA";
		public const string COMPUTER = "COMPUTER";
		public const string FAX = "FAX";
		public const string GATEWAY = "GATEWAY";
		public const string MODEM = "MODEM";
		public const string NETWORKAPPLIANCE = "NETWORKAPPLIANCE";
		public const string NETWORKBRIDGE = "NETWORKBRIDGE";
		public const string NETWORKHUB = "NETWORKHUB";
		public const string PRINTER = "PRINTER";
		public const string REPEATER = "REPEATER";
		public const string ROUTER = "ROUTER";
		public const string SCANNER = "SCANNER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCommunicationsApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCommunicationsApplianceTypeEnum(string x) { return new IfcCommunicationsApplianceTypeEnum(x); }
		public static implicit operator string(IfcCommunicationsApplianceTypeEnum x) { return x.Value; }
	}

	public class IfcComplexPropertyTemplateTypeEnum
	{
		public const string P_COMPLEX = "P_COMPLEX";
		public const string Q_COMPLEX = "Q_COMPLEX";
		private string Value;
		public IfcComplexPropertyTemplateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcComplexPropertyTemplateTypeEnum(string x) { return new IfcComplexPropertyTemplateTypeEnum(x); }
		public static implicit operator string(IfcComplexPropertyTemplateTypeEnum x) { return x.Value; }
	}

	public class IfcCompressorTypeEnum
	{
		public const string DYNAMIC = "DYNAMIC";
		public const string RECIPROCATING = "RECIPROCATING";
		public const string ROTARY = "ROTARY";
		public const string SCROLL = "SCROLL";
		public const string TROCHOIDAL = "TROCHOIDAL";
		public const string SINGLESTAGE = "SINGLESTAGE";
		public const string BOOSTER = "BOOSTER";
		public const string OPENTYPE = "OPENTYPE";
		public const string HERMETIC = "HERMETIC";
		public const string SEMIHERMETIC = "SEMIHERMETIC";
		public const string WELDEDSHELLHERMETIC = "WELDEDSHELLHERMETIC";
		public const string ROLLINGPISTON = "ROLLINGPISTON";
		public const string ROTARYVANE = "ROTARYVANE";
		public const string SINGLESCREW = "SINGLESCREW";
		public const string TWINSCREW = "TWINSCREW";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCompressorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCompressorTypeEnum(string x) { return new IfcCompressorTypeEnum(x); }
		public static implicit operator string(IfcCompressorTypeEnum x) { return x.Value; }
	}

	public class IfcCondenserTypeEnum
	{
		public const string AIRCOOLED = "AIRCOOLED";
		public const string EVAPORATIVECOOLED = "EVAPORATIVECOOLED";
		public const string WATERCOOLED = "WATERCOOLED";
		public const string WATERCOOLEDBRAZEDPLATE = "WATERCOOLEDBRAZEDPLATE";
		public const string WATERCOOLEDSHELLCOIL = "WATERCOOLEDSHELLCOIL";
		public const string WATERCOOLEDSHELLTUBE = "WATERCOOLEDSHELLTUBE";
		public const string WATERCOOLEDTUBEINTUBE = "WATERCOOLEDTUBEINTUBE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCondenserTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCondenserTypeEnum(string x) { return new IfcCondenserTypeEnum(x); }
		public static implicit operator string(IfcCondenserTypeEnum x) { return x.Value; }
	}

	public class IfcConnectionTypeEnum
	{
		public const string ATPATH = "ATPATH";
		public const string ATSTART = "ATSTART";
		public const string ATEND = "ATEND";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConnectionTypeEnum(string x) { return new IfcConnectionTypeEnum(x); }
		public static implicit operator string(IfcConnectionTypeEnum x) { return x.Value; }
	}

	public class IfcConstraintEnum
	{
		public const string HARD = "HARD";
		public const string SOFT = "SOFT";
		public const string ADVISORY = "ADVISORY";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcConstraintEnum(string value) { Value = value; }
		public static implicit operator IfcConstraintEnum(string x) { return new IfcConstraintEnum(x); }
		public static implicit operator string(IfcConstraintEnum x) { return x.Value; }
	}

	public class IfcConstructionEquipmentResourceTypeEnum
	{
		public const string DEMOLISHING = "DEMOLISHING";
		public const string EARTHMOVING = "EARTHMOVING";
		public const string ERECTING = "ERECTING";
		public const string HEATING = "HEATING";
		public const string LIGHTING = "LIGHTING";
		public const string PAVING = "PAVING";
		public const string PUMPING = "PUMPING";
		public const string TRANSPORTING = "TRANSPORTING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcConstructionEquipmentResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConstructionEquipmentResourceTypeEnum(string x) { return new IfcConstructionEquipmentResourceTypeEnum(x); }
		public static implicit operator string(IfcConstructionEquipmentResourceTypeEnum x) { return x.Value; }
	}

	public class IfcConstructionMaterialResourceTypeEnum
	{
		public const string AGGREGATES = "AGGREGATES";
		public const string CONCRETE = "CONCRETE";
		public const string DRYWALL = "DRYWALL";
		public const string FUEL = "FUEL";
		public const string GYPSUM = "GYPSUM";
		public const string MASONRY = "MASONRY";
		public const string METAL = "METAL";
		public const string PLASTIC = "PLASTIC";
		public const string WOOD = "WOOD";
		public const string NOTDEFINED = "NOTDEFINED";
		public const string USERDEFINED = "USERDEFINED";
		private string Value;
		public IfcConstructionMaterialResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConstructionMaterialResourceTypeEnum(string x) { return new IfcConstructionMaterialResourceTypeEnum(x); }
		public static implicit operator string(IfcConstructionMaterialResourceTypeEnum x) { return x.Value; }
	}

	public class IfcConstructionProductResourceTypeEnum
	{
		public const string ASSEMBLY = "ASSEMBLY";
		public const string FORMWORK = "FORMWORK";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcConstructionProductResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConstructionProductResourceTypeEnum(string x) { return new IfcConstructionProductResourceTypeEnum(x); }
		public static implicit operator string(IfcConstructionProductResourceTypeEnum x) { return x.Value; }
	}

	public class IfcControllerTypeEnum
	{
		public const string FLOATING = "FLOATING";
		public const string PROGRAMMABLE = "PROGRAMMABLE";
		public const string PROPORTIONAL = "PROPORTIONAL";
		public const string MULTIPOSITION = "MULTIPOSITION";
		public const string TWOPOSITION = "TWOPOSITION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcControllerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcControllerTypeEnum(string x) { return new IfcControllerTypeEnum(x); }
		public static implicit operator string(IfcControllerTypeEnum x) { return x.Value; }
	}

	public class IfcCooledBeamTypeEnum
	{
		public const string ACTIVE = "ACTIVE";
		public const string PASSIVE = "PASSIVE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCooledBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCooledBeamTypeEnum(string x) { return new IfcCooledBeamTypeEnum(x); }
		public static implicit operator string(IfcCooledBeamTypeEnum x) { return x.Value; }
	}

	public class IfcCoolingTowerTypeEnum
	{
		public const string NATURALDRAFT = "NATURALDRAFT";
		public const string MECHANICALINDUCEDDRAFT = "MECHANICALINDUCEDDRAFT";
		public const string MECHANICALFORCEDDRAFT = "MECHANICALFORCEDDRAFT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCoolingTowerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoolingTowerTypeEnum(string x) { return new IfcCoolingTowerTypeEnum(x); }
		public static implicit operator string(IfcCoolingTowerTypeEnum x) { return x.Value; }
	}

	public class IfcCostItemTypeEnum
	{
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCostItemTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCostItemTypeEnum(string x) { return new IfcCostItemTypeEnum(x); }
		public static implicit operator string(IfcCostItemTypeEnum x) { return x.Value; }
	}

	public class IfcCostScheduleTypeEnum
	{
		public const string BUDGET = "BUDGET";
		public const string COSTPLAN = "COSTPLAN";
		public const string ESTIMATE = "ESTIMATE";
		public const string TENDER = "TENDER";
		public const string PRICEDBILLOFQUANTITIES = "PRICEDBILLOFQUANTITIES";
		public const string UNPRICEDBILLOFQUANTITIES = "UNPRICEDBILLOFQUANTITIES";
		public const string SCHEDULEOFRATES = "SCHEDULEOFRATES";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCostScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCostScheduleTypeEnum(string x) { return new IfcCostScheduleTypeEnum(x); }
		public static implicit operator string(IfcCostScheduleTypeEnum x) { return x.Value; }
	}

	public class IfcCoveringTypeEnum
	{
		public const string CEILING = "CEILING";
		public const string FLOORING = "FLOORING";
		public const string CLADDING = "CLADDING";
		public const string ROOFING = "ROOFING";
		public const string MOLDING = "MOLDING";
		public const string SKIRTINGBOARD = "SKIRTINGBOARD";
		public const string INSULATION = "INSULATION";
		public const string MEMBRANE = "MEMBRANE";
		public const string SLEEVING = "SLEEVING";
		public const string WRAPPING = "WRAPPING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCoveringTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoveringTypeEnum(string x) { return new IfcCoveringTypeEnum(x); }
		public static implicit operator string(IfcCoveringTypeEnum x) { return x.Value; }
	}

	public class IfcCrewResourceTypeEnum
	{
		public const string OFFICE = "OFFICE";
		public const string SITE = "SITE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCrewResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCrewResourceTypeEnum(string x) { return new IfcCrewResourceTypeEnum(x); }
		public static implicit operator string(IfcCrewResourceTypeEnum x) { return x.Value; }
	}

	public class IfcCurtainWallTypeEnum
	{
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCurtainWallTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCurtainWallTypeEnum(string x) { return new IfcCurtainWallTypeEnum(x); }
		public static implicit operator string(IfcCurtainWallTypeEnum x) { return x.Value; }
	}

	public class IfcCurveInterpolationEnum
	{
		public const string LINEAR = "LINEAR";
		public const string LOG_LINEAR = "LOG_LINEAR";
		public const string LOG_LOG = "LOG_LOG";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcCurveInterpolationEnum(string value) { Value = value; }
		public static implicit operator IfcCurveInterpolationEnum(string x) { return new IfcCurveInterpolationEnum(x); }
		public static implicit operator string(IfcCurveInterpolationEnum x) { return x.Value; }
	}

	public class IfcDamperTypeEnum
	{
		public const string BACKDRAFTDAMPER = "BACKDRAFTDAMPER";
		public const string BALANCINGDAMPER = "BALANCINGDAMPER";
		public const string BLASTDAMPER = "BLASTDAMPER";
		public const string CONTROLDAMPER = "CONTROLDAMPER";
		public const string FIREDAMPER = "FIREDAMPER";
		public const string FIRESMOKEDAMPER = "FIRESMOKEDAMPER";
		public const string FUMEHOODEXHAUST = "FUMEHOODEXHAUST";
		public const string GRAVITYDAMPER = "GRAVITYDAMPER";
		public const string GRAVITYRELIEFDAMPER = "GRAVITYRELIEFDAMPER";
		public const string RELIEFDAMPER = "RELIEFDAMPER";
		public const string SMOKEDAMPER = "SMOKEDAMPER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDamperTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDamperTypeEnum(string x) { return new IfcDamperTypeEnum(x); }
		public static implicit operator string(IfcDamperTypeEnum x) { return x.Value; }
	}

	public class IfcDataOriginEnum
	{
		public const string MEASURED = "MEASURED";
		public const string PREDICTED = "PREDICTED";
		public const string SIMULATED = "SIMULATED";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDataOriginEnum(string value) { Value = value; }
		public static implicit operator IfcDataOriginEnum(string x) { return new IfcDataOriginEnum(x); }
		public static implicit operator string(IfcDataOriginEnum x) { return x.Value; }
	}

	public class IfcDerivedUnitEnum
	{
		public const string ANGULARVELOCITYUNIT = "ANGULARVELOCITYUNIT";
		public const string AREADENSITYUNIT = "AREADENSITYUNIT";
		public const string COMPOUNDPLANEANGLEUNIT = "COMPOUNDPLANEANGLEUNIT";
		public const string DYNAMICVISCOSITYUNIT = "DYNAMICVISCOSITYUNIT";
		public const string HEATFLUXDENSITYUNIT = "HEATFLUXDENSITYUNIT";
		public const string INTEGERCOUNTRATEUNIT = "INTEGERCOUNTRATEUNIT";
		public const string ISOTHERMALMOISTURECAPACITYUNIT = "ISOTHERMALMOISTURECAPACITYUNIT";
		public const string KINEMATICVISCOSITYUNIT = "KINEMATICVISCOSITYUNIT";
		public const string LINEARVELOCITYUNIT = "LINEARVELOCITYUNIT";
		public const string MASSDENSITYUNIT = "MASSDENSITYUNIT";
		public const string MASSFLOWRATEUNIT = "MASSFLOWRATEUNIT";
		public const string MOISTUREDIFFUSIVITYUNIT = "MOISTUREDIFFUSIVITYUNIT";
		public const string MOLECULARWEIGHTUNIT = "MOLECULARWEIGHTUNIT";
		public const string SPECIFICHEATCAPACITYUNIT = "SPECIFICHEATCAPACITYUNIT";
		public const string THERMALADMITTANCEUNIT = "THERMALADMITTANCEUNIT";
		public const string THERMALCONDUCTANCEUNIT = "THERMALCONDUCTANCEUNIT";
		public const string THERMALRESISTANCEUNIT = "THERMALRESISTANCEUNIT";
		public const string THERMALTRANSMITTANCEUNIT = "THERMALTRANSMITTANCEUNIT";
		public const string VAPORPERMEABILITYUNIT = "VAPORPERMEABILITYUNIT";
		public const string VOLUMETRICFLOWRATEUNIT = "VOLUMETRICFLOWRATEUNIT";
		public const string ROTATIONALFREQUENCYUNIT = "ROTATIONALFREQUENCYUNIT";
		public const string TORQUEUNIT = "TORQUEUNIT";
		public const string MOMENTOFINERTIAUNIT = "MOMENTOFINERTIAUNIT";
		public const string LINEARMOMENTUNIT = "LINEARMOMENTUNIT";
		public const string LINEARFORCEUNIT = "LINEARFORCEUNIT";
		public const string PLANARFORCEUNIT = "PLANARFORCEUNIT";
		public const string MODULUSOFELASTICITYUNIT = "MODULUSOFELASTICITYUNIT";
		public const string SHEARMODULUSUNIT = "SHEARMODULUSUNIT";
		public const string LINEARSTIFFNESSUNIT = "LINEARSTIFFNESSUNIT";
		public const string ROTATIONALSTIFFNESSUNIT = "ROTATIONALSTIFFNESSUNIT";
		public const string MODULUSOFSUBGRADEREACTIONUNIT = "MODULUSOFSUBGRADEREACTIONUNIT";
		public const string ACCELERATIONUNIT = "ACCELERATIONUNIT";
		public const string CURVATUREUNIT = "CURVATUREUNIT";
		public const string HEATINGVALUEUNIT = "HEATINGVALUEUNIT";
		public const string IONCONCENTRATIONUNIT = "IONCONCENTRATIONUNIT";
		public const string LUMINOUSINTENSITYDISTRIBUTIONUNIT = "LUMINOUSINTENSITYDISTRIBUTIONUNIT";
		public const string MASSPERLENGTHUNIT = "MASSPERLENGTHUNIT";
		public const string MODULUSOFLINEARSUBGRADEREACTIONUNIT = "MODULUSOFLINEARSUBGRADEREACTIONUNIT";
		public const string MODULUSOFROTATIONALSUBGRADEREACTIONUNIT = "MODULUSOFROTATIONALSUBGRADEREACTIONUNIT";
		public const string PHUNIT = "PHUNIT";
		public const string ROTATIONALMASSUNIT = "ROTATIONALMASSUNIT";
		public const string SECTIONAREAINTEGRALUNIT = "SECTIONAREAINTEGRALUNIT";
		public const string SECTIONMODULUSUNIT = "SECTIONMODULUSUNIT";
		public const string SOUNDPOWERLEVELUNIT = "SOUNDPOWERLEVELUNIT";
		public const string SOUNDPOWERUNIT = "SOUNDPOWERUNIT";
		public const string SOUNDPRESSURELEVELUNIT = "SOUNDPRESSURELEVELUNIT";
		public const string SOUNDPRESSUREUNIT = "SOUNDPRESSUREUNIT";
		public const string TEMPERATUREGRADIENTUNIT = "TEMPERATUREGRADIENTUNIT";
		public const string TEMPERATURERATEOFCHANGEUNIT = "TEMPERATURERATEOFCHANGEUNIT";
		public const string THERMALEXPANSIONCOEFFICIENTUNIT = "THERMALEXPANSIONCOEFFICIENTUNIT";
		public const string WARPINGCONSTANTUNIT = "WARPINGCONSTANTUNIT";
		public const string WARPINGMOMENTUNIT = "WARPINGMOMENTUNIT";
		public const string USERDEFINED = "USERDEFINED";
		private string Value;
		public IfcDerivedUnitEnum(string value) { Value = value; }
		public static implicit operator IfcDerivedUnitEnum(string x) { return new IfcDerivedUnitEnum(x); }
		public static implicit operator string(IfcDerivedUnitEnum x) { return x.Value; }
	}

	public class IfcDirectionSenseEnum
	{
		public const string POSITIVE = "POSITIVE";
		public const string NEGATIVE = "NEGATIVE";
		private string Value;
		public IfcDirectionSenseEnum(string value) { Value = value; }
		public static implicit operator IfcDirectionSenseEnum(string x) { return new IfcDirectionSenseEnum(x); }
		public static implicit operator string(IfcDirectionSenseEnum x) { return x.Value; }
	}

	public class IfcDiscreteAccessoryTypeEnum
	{
		public const string ANCHORPLATE = "ANCHORPLATE";
		public const string BRACKET = "BRACKET";
		public const string SHOE = "SHOE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDiscreteAccessoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDiscreteAccessoryTypeEnum(string x) { return new IfcDiscreteAccessoryTypeEnum(x); }
		public static implicit operator string(IfcDiscreteAccessoryTypeEnum x) { return x.Value; }
	}

	public class IfcDistributionChamberElementTypeEnum
	{
		public const string FORMEDDUCT = "FORMEDDUCT";
		public const string INSPECTIONCHAMBER = "INSPECTIONCHAMBER";
		public const string INSPECTIONPIT = "INSPECTIONPIT";
		public const string MANHOLE = "MANHOLE";
		public const string METERCHAMBER = "METERCHAMBER";
		public const string SUMP = "SUMP";
		public const string TRENCH = "TRENCH";
		public const string VALVECHAMBER = "VALVECHAMBER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDistributionChamberElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDistributionChamberElementTypeEnum(string x) { return new IfcDistributionChamberElementTypeEnum(x); }
		public static implicit operator string(IfcDistributionChamberElementTypeEnum x) { return x.Value; }
	}

	public class IfcDistributionPortTypeEnum
	{
		public const string CABLE = "CABLE";
		public const string CABLECARRIER = "CABLECARRIER";
		public const string DUCT = "DUCT";
		public const string PIPE = "PIPE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDistributionPortTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDistributionPortTypeEnum(string x) { return new IfcDistributionPortTypeEnum(x); }
		public static implicit operator string(IfcDistributionPortTypeEnum x) { return x.Value; }
	}

	public class IfcDistributionSystemEnum
	{
		public const string AIRCONDITIONING = "AIRCONDITIONING";
		public const string AUDIOVISUAL = "AUDIOVISUAL";
		public const string CHEMICAL = "CHEMICAL";
		public const string CHILLEDWATER = "CHILLEDWATER";
		public const string COMMUNICATION = "COMMUNICATION";
		public const string COMPRESSEDAIR = "COMPRESSEDAIR";
		public const string CONDENSERWATER = "CONDENSERWATER";
		public const string CONTROL = "CONTROL";
		public const string CONVEYING = "CONVEYING";
		public const string DATA = "DATA";
		public const string DISPOSAL = "DISPOSAL";
		public const string DOMESTICCOLDWATER = "DOMESTICCOLDWATER";
		public const string DOMESTICHOTWATER = "DOMESTICHOTWATER";
		public const string DRAINAGE = "DRAINAGE";
		public const string EARTHING = "EARTHING";
		public const string ELECTRICAL = "ELECTRICAL";
		public const string ELECTROACOUSTIC = "ELECTROACOUSTIC";
		public const string EXHAUST = "EXHAUST";
		public const string FIREPROTECTION = "FIREPROTECTION";
		public const string FUEL = "FUEL";
		public const string GAS = "GAS";
		public const string HAZARDOUS = "HAZARDOUS";
		public const string HEATING = "HEATING";
		public const string LIGHTING = "LIGHTING";
		public const string LIGHTNINGPROTECTION = "LIGHTNINGPROTECTION";
		public const string MUNICIPALSOLIDWASTE = "MUNICIPALSOLIDWASTE";
		public const string OIL = "OIL";
		public const string OPERATIONAL = "OPERATIONAL";
		public const string POWERGENERATION = "POWERGENERATION";
		public const string RAINWATER = "RAINWATER";
		public const string REFRIGERATION = "REFRIGERATION";
		public const string SECURITY = "SECURITY";
		public const string SEWAGE = "SEWAGE";
		public const string SIGNAL = "SIGNAL";
		public const string STORMWATER = "STORMWATER";
		public const string TELEPHONE = "TELEPHONE";
		public const string TV = "TV";
		public const string VACUUM = "VACUUM";
		public const string VENT = "VENT";
		public const string VENTILATION = "VENTILATION";
		public const string WASTEWATER = "WASTEWATER";
		public const string WATERSUPPLY = "WATERSUPPLY";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDistributionSystemEnum(string value) { Value = value; }
		public static implicit operator IfcDistributionSystemEnum(string x) { return new IfcDistributionSystemEnum(x); }
		public static implicit operator string(IfcDistributionSystemEnum x) { return x.Value; }
	}

	public class IfcDocumentConfidentialityEnum
	{
		public const string PUBLIC = "PUBLIC";
		public const string RESTRICTED = "RESTRICTED";
		public const string CONFIDENTIAL = "CONFIDENTIAL";
		public const string PERSONAL = "PERSONAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDocumentConfidentialityEnum(string value) { Value = value; }
		public static implicit operator IfcDocumentConfidentialityEnum(string x) { return new IfcDocumentConfidentialityEnum(x); }
		public static implicit operator string(IfcDocumentConfidentialityEnum x) { return x.Value; }
	}

	public class IfcDocumentStatusEnum
	{
		public const string DRAFT = "DRAFT";
		public const string FINALDRAFT = "FINALDRAFT";
		public const string FINAL = "FINAL";
		public const string REVISION = "REVISION";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDocumentStatusEnum(string value) { Value = value; }
		public static implicit operator IfcDocumentStatusEnum(string x) { return new IfcDocumentStatusEnum(x); }
		public static implicit operator string(IfcDocumentStatusEnum x) { return x.Value; }
	}

	public class IfcDoorPanelOperationEnum
	{
		public const string SWINGING = "SWINGING";
		public const string DOUBLE_ACTING = "DOUBLE_ACTING";
		public const string SLIDING = "SLIDING";
		public const string FOLDING = "FOLDING";
		public const string REVOLVING = "REVOLVING";
		public const string ROLLINGUP = "ROLLINGUP";
		public const string FIXEDPANEL = "FIXEDPANEL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDoorPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorPanelOperationEnum(string x) { return new IfcDoorPanelOperationEnum(x); }
		public static implicit operator string(IfcDoorPanelOperationEnum x) { return x.Value; }
	}

	public class IfcDoorPanelPositionEnum
	{
		public const string LEFT = "LEFT";
		public const string MIDDLE = "MIDDLE";
		public const string RIGHT = "RIGHT";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDoorPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IfcDoorPanelPositionEnum(string x) { return new IfcDoorPanelPositionEnum(x); }
		public static implicit operator string(IfcDoorPanelPositionEnum x) { return x.Value; }
	}

	public class IfcDoorStyleConstructionEnum
	{
		public const string ALUMINIUM = "ALUMINIUM";
		public const string HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
		public const string STEEL = "STEEL";
		public const string WOOD = "WOOD";
		public const string ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
		public const string ALUMINIUM_PLASTIC = "ALUMINIUM_PLASTIC";
		public const string PLASTIC = "PLASTIC";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDoorStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcDoorStyleConstructionEnum(string x) { return new IfcDoorStyleConstructionEnum(x); }
		public static implicit operator string(IfcDoorStyleConstructionEnum x) { return x.Value; }
	}

	public class IfcDoorStyleOperationEnum
	{
		public const string SINGLE_SWING_LEFT = "SINGLE_SWING_LEFT";
		public const string SINGLE_SWING_RIGHT = "SINGLE_SWING_RIGHT";
		public const string DOUBLE_DOOR_SINGLE_SWING = "DOUBLE_DOOR_SINGLE_SWING";
		public const string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";
		public const string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";
		public const string DOUBLE_SWING_LEFT = "DOUBLE_SWING_LEFT";
		public const string DOUBLE_SWING_RIGHT = "DOUBLE_SWING_RIGHT";
		public const string DOUBLE_DOOR_DOUBLE_SWING = "DOUBLE_DOOR_DOUBLE_SWING";
		public const string SLIDING_TO_LEFT = "SLIDING_TO_LEFT";
		public const string SLIDING_TO_RIGHT = "SLIDING_TO_RIGHT";
		public const string DOUBLE_DOOR_SLIDING = "DOUBLE_DOOR_SLIDING";
		public const string FOLDING_TO_LEFT = "FOLDING_TO_LEFT";
		public const string FOLDING_TO_RIGHT = "FOLDING_TO_RIGHT";
		public const string DOUBLE_DOOR_FOLDING = "DOUBLE_DOOR_FOLDING";
		public const string REVOLVING = "REVOLVING";
		public const string ROLLINGUP = "ROLLINGUP";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDoorStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorStyleOperationEnum(string x) { return new IfcDoorStyleOperationEnum(x); }
		public static implicit operator string(IfcDoorStyleOperationEnum x) { return x.Value; }
	}

	public class IfcDoorTypeEnum
	{
		public const string DOOR = "DOOR";
		public const string GATE = "GATE";
		public const string TRAPDOOR = "TRAPDOOR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDoorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDoorTypeEnum(string x) { return new IfcDoorTypeEnum(x); }
		public static implicit operator string(IfcDoorTypeEnum x) { return x.Value; }
	}

	public class IfcDoorTypeOperationEnum
	{
		public const string SINGLE_SWING_LEFT = "SINGLE_SWING_LEFT";
		public const string SINGLE_SWING_RIGHT = "SINGLE_SWING_RIGHT";
		public const string DOUBLE_DOOR_SINGLE_SWING = "DOUBLE_DOOR_SINGLE_SWING";
		public const string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";
		public const string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";
		public const string DOUBLE_SWING_LEFT = "DOUBLE_SWING_LEFT";
		public const string DOUBLE_SWING_RIGHT = "DOUBLE_SWING_RIGHT";
		public const string DOUBLE_DOOR_DOUBLE_SWING = "DOUBLE_DOOR_DOUBLE_SWING";
		public const string SLIDING_TO_LEFT = "SLIDING_TO_LEFT";
		public const string SLIDING_TO_RIGHT = "SLIDING_TO_RIGHT";
		public const string DOUBLE_DOOR_SLIDING = "DOUBLE_DOOR_SLIDING";
		public const string FOLDING_TO_LEFT = "FOLDING_TO_LEFT";
		public const string FOLDING_TO_RIGHT = "FOLDING_TO_RIGHT";
		public const string DOUBLE_DOOR_FOLDING = "DOUBLE_DOOR_FOLDING";
		public const string REVOLVING = "REVOLVING";
		public const string ROLLINGUP = "ROLLINGUP";
		public const string SWING_FIXED_LEFT = "SWING_FIXED_LEFT";
		public const string SWING_FIXED_RIGHT = "SWING_FIXED_RIGHT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDoorTypeOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorTypeOperationEnum(string x) { return new IfcDoorTypeOperationEnum(x); }
		public static implicit operator string(IfcDoorTypeOperationEnum x) { return x.Value; }
	}

	public class IfcDuctFittingTypeEnum
	{
		public const string BEND = "BEND";
		public const string CONNECTOR = "CONNECTOR";
		public const string ENTRY = "ENTRY";
		public const string EXIT = "EXIT";
		public const string JUNCTION = "JUNCTION";
		public const string OBSTRUCTION = "OBSTRUCTION";
		public const string TRANSITION = "TRANSITION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDuctFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctFittingTypeEnum(string x) { return new IfcDuctFittingTypeEnum(x); }
		public static implicit operator string(IfcDuctFittingTypeEnum x) { return x.Value; }
	}

	public class IfcDuctSegmentTypeEnum
	{
		public const string RIGIDSEGMENT = "RIGIDSEGMENT";
		public const string FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDuctSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctSegmentTypeEnum(string x) { return new IfcDuctSegmentTypeEnum(x); }
		public static implicit operator string(IfcDuctSegmentTypeEnum x) { return x.Value; }
	}

	public class IfcDuctSilencerTypeEnum
	{
		public const string FLATOVAL = "FLATOVAL";
		public const string RECTANGULAR = "RECTANGULAR";
		public const string ROUND = "ROUND";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcDuctSilencerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctSilencerTypeEnum(string x) { return new IfcDuctSilencerTypeEnum(x); }
		public static implicit operator string(IfcDuctSilencerTypeEnum x) { return x.Value; }
	}

	public class IfcElectricApplianceTypeEnum
	{
		public const string DISHWASHER = "DISHWASHER";
		public const string ELECTRICCOOKER = "ELECTRICCOOKER";
		public const string FREESTANDINGELECTRICHEATER = "FREESTANDINGELECTRICHEATER";
		public const string FREESTANDINGFAN = "FREESTANDINGFAN";
		public const string FREESTANDINGWATERHEATER = "FREESTANDINGWATERHEATER";
		public const string FREESTANDINGWATERCOOLER = "FREESTANDINGWATERCOOLER";
		public const string FREEZER = "FREEZER";
		public const string FRIDGE_FREEZER = "FRIDGE_FREEZER";
		public const string HANDDRYER = "HANDDRYER";
		public const string KITCHENMACHINE = "KITCHENMACHINE";
		public const string MICROWAVE = "MICROWAVE";
		public const string PHOTOCOPIER = "PHOTOCOPIER";
		public const string REFRIGERATOR = "REFRIGERATOR";
		public const string TUMBLEDRYER = "TUMBLEDRYER";
		public const string VENDINGMACHINE = "VENDINGMACHINE";
		public const string WASHINGMACHINE = "WASHINGMACHINE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcElectricApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricApplianceTypeEnum(string x) { return new IfcElectricApplianceTypeEnum(x); }
		public static implicit operator string(IfcElectricApplianceTypeEnum x) { return x.Value; }
	}

	public class IfcElectricDistributionBoardTypeEnum
	{
		public const string CONSUMERUNIT = "CONSUMERUNIT";
		public const string DISTRIBUTIONBOARD = "DISTRIBUTIONBOARD";
		public const string MOTORCONTROLCENTRE = "MOTORCONTROLCENTRE";
		public const string SWITCHBOARD = "SWITCHBOARD";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcElectricDistributionBoardTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricDistributionBoardTypeEnum(string x) { return new IfcElectricDistributionBoardTypeEnum(x); }
		public static implicit operator string(IfcElectricDistributionBoardTypeEnum x) { return x.Value; }
	}

	public class IfcElectricFlowStorageDeviceTypeEnum
	{
		public const string BATTERY = "BATTERY";
		public const string CAPACITORBANK = "CAPACITORBANK";
		public const string HARMONICFILTER = "HARMONICFILTER";
		public const string INDUCTORBANK = "INDUCTORBANK";
		public const string UPS = "UPS";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcElectricFlowStorageDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricFlowStorageDeviceTypeEnum(string x) { return new IfcElectricFlowStorageDeviceTypeEnum(x); }
		public static implicit operator string(IfcElectricFlowStorageDeviceTypeEnum x) { return x.Value; }
	}

	public class IfcElectricGeneratorTypeEnum
	{
		public const string CHP = "CHP";
		public const string ENGINEGENERATOR = "ENGINEGENERATOR";
		public const string STANDALONE = "STANDALONE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcElectricGeneratorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricGeneratorTypeEnum(string x) { return new IfcElectricGeneratorTypeEnum(x); }
		public static implicit operator string(IfcElectricGeneratorTypeEnum x) { return x.Value; }
	}

	public class IfcElectricMotorTypeEnum
	{
		public const string DC = "DC";
		public const string INDUCTION = "INDUCTION";
		public const string POLYPHASE = "POLYPHASE";
		public const string RELUCTANCESYNCHRONOUS = "RELUCTANCESYNCHRONOUS";
		public const string SYNCHRONOUS = "SYNCHRONOUS";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcElectricMotorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricMotorTypeEnum(string x) { return new IfcElectricMotorTypeEnum(x); }
		public static implicit operator string(IfcElectricMotorTypeEnum x) { return x.Value; }
	}

	public class IfcElectricTimeControlTypeEnum
	{
		public const string TIMECLOCK = "TIMECLOCK";
		public const string TIMEDELAY = "TIMEDELAY";
		public const string RELAY = "RELAY";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcElectricTimeControlTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricTimeControlTypeEnum(string x) { return new IfcElectricTimeControlTypeEnum(x); }
		public static implicit operator string(IfcElectricTimeControlTypeEnum x) { return x.Value; }
	}

	public class IfcElementAssemblyTypeEnum
	{
		public const string ACCESSORY_ASSEMBLY = "ACCESSORY_ASSEMBLY";
		public const string ARCH = "ARCH";
		public const string BEAM_GRID = "BEAM_GRID";
		public const string BRACED_FRAME = "BRACED_FRAME";
		public const string GIRDER = "GIRDER";
		public const string REINFORCEMENT_UNIT = "REINFORCEMENT_UNIT";
		public const string RIGID_FRAME = "RIGID_FRAME";
		public const string SLAB_FIELD = "SLAB_FIELD";
		public const string TRUSS = "TRUSS";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcElementAssemblyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElementAssemblyTypeEnum(string x) { return new IfcElementAssemblyTypeEnum(x); }
		public static implicit operator string(IfcElementAssemblyTypeEnum x) { return x.Value; }
	}

	public class IfcElementCompositionEnum
	{
		public const string COMPLEX = "COMPLEX";
		public const string ELEMENT = "ELEMENT";
		public const string PARTIAL = "PARTIAL";
		private string Value;
		public IfcElementCompositionEnum(string value) { Value = value; }
		public static implicit operator IfcElementCompositionEnum(string x) { return new IfcElementCompositionEnum(x); }
		public static implicit operator string(IfcElementCompositionEnum x) { return x.Value; }
	}

	public class IfcEngineTypeEnum
	{
		public const string EXTERNALCOMBUSTION = "EXTERNALCOMBUSTION";
		public const string INTERNALCOMBUSTION = "INTERNALCOMBUSTION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcEngineTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEngineTypeEnum(string x) { return new IfcEngineTypeEnum(x); }
		public static implicit operator string(IfcEngineTypeEnum x) { return x.Value; }
	}

	public class IfcEvaporativeCoolerTypeEnum
	{
		public const string DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER = "DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER";
		public const string DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER = "DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER";
		public const string DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER = "DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER";
		public const string DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER = "DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER";
		public const string DIRECTEVAPORATIVEAIRWASHER = "DIRECTEVAPORATIVEAIRWASHER";
		public const string INDIRECTEVAPORATIVEPACKAGEAIRCOOLER = "INDIRECTEVAPORATIVEPACKAGEAIRCOOLER";
		public const string INDIRECTEVAPORATIVEWETCOIL = "INDIRECTEVAPORATIVEWETCOIL";
		public const string INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER = "INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER";
		public const string INDIRECTDIRECTCOMBINATION = "INDIRECTDIRECTCOMBINATION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcEvaporativeCoolerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEvaporativeCoolerTypeEnum(string x) { return new IfcEvaporativeCoolerTypeEnum(x); }
		public static implicit operator string(IfcEvaporativeCoolerTypeEnum x) { return x.Value; }
	}

	public class IfcEvaporatorTypeEnum
	{
		public const string DIRECTEXPANSION = "DIRECTEXPANSION";
		public const string DIRECTEXPANSIONSHELLANDTUBE = "DIRECTEXPANSIONSHELLANDTUBE";
		public const string DIRECTEXPANSIONTUBEINTUBE = "DIRECTEXPANSIONTUBEINTUBE";
		public const string DIRECTEXPANSIONBRAZEDPLATE = "DIRECTEXPANSIONBRAZEDPLATE";
		public const string FLOODEDSHELLANDTUBE = "FLOODEDSHELLANDTUBE";
		public const string SHELLANDCOIL = "SHELLANDCOIL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcEvaporatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEvaporatorTypeEnum(string x) { return new IfcEvaporatorTypeEnum(x); }
		public static implicit operator string(IfcEvaporatorTypeEnum x) { return x.Value; }
	}

	public class IfcEventTriggerTypeEnum
	{
		public const string EVENTRULE = "EVENTRULE";
		public const string EVENTMESSAGE = "EVENTMESSAGE";
		public const string EVENTTIME = "EVENTTIME";
		public const string EVENTCOMPLEX = "EVENTCOMPLEX";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcEventTriggerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEventTriggerTypeEnum(string x) { return new IfcEventTriggerTypeEnum(x); }
		public static implicit operator string(IfcEventTriggerTypeEnum x) { return x.Value; }
	}

	public class IfcEventTypeEnum
	{
		public const string STARTEVENT = "STARTEVENT";
		public const string ENDEVENT = "ENDEVENT";
		public const string INTERMEDIATEEVENT = "INTERMEDIATEEVENT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcEventTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEventTypeEnum(string x) { return new IfcEventTypeEnum(x); }
		public static implicit operator string(IfcEventTypeEnum x) { return x.Value; }
	}

	public class IfcExternalSpatialElementTypeEnum
	{
		public const string EXTERNAL = "EXTERNAL";
		public const string EXTERNAL_EARTH = "EXTERNAL_EARTH";
		public const string EXTERNAL_WATER = "EXTERNAL_WATER";
		public const string EXTERNAL_FIRE = "EXTERNAL_FIRE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcExternalSpatialElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcExternalSpatialElementTypeEnum(string x) { return new IfcExternalSpatialElementTypeEnum(x); }
		public static implicit operator string(IfcExternalSpatialElementTypeEnum x) { return x.Value; }
	}

	public class IfcFanTypeEnum
	{
		public const string CENTRIFUGALFORWARDCURVED = "CENTRIFUGALFORWARDCURVED";
		public const string CENTRIFUGALRADIAL = "CENTRIFUGALRADIAL";
		public const string CENTRIFUGALBACKWARDINCLINEDCURVED = "CENTRIFUGALBACKWARDINCLINEDCURVED";
		public const string CENTRIFUGALAIRFOIL = "CENTRIFUGALAIRFOIL";
		public const string TUBEAXIAL = "TUBEAXIAL";
		public const string VANEAXIAL = "VANEAXIAL";
		public const string PROPELLORAXIAL = "PROPELLORAXIAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFanTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFanTypeEnum(string x) { return new IfcFanTypeEnum(x); }
		public static implicit operator string(IfcFanTypeEnum x) { return x.Value; }
	}

	public class IfcFastenerTypeEnum
	{
		public const string GLUE = "GLUE";
		public const string MORTAR = "MORTAR";
		public const string WELD = "WELD";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFastenerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFastenerTypeEnum(string x) { return new IfcFastenerTypeEnum(x); }
		public static implicit operator string(IfcFastenerTypeEnum x) { return x.Value; }
	}

	public class IfcFilterTypeEnum
	{
		public const string AIRPARTICLEFILTER = "AIRPARTICLEFILTER";
		public const string COMPRESSEDAIRFILTER = "COMPRESSEDAIRFILTER";
		public const string ODORFILTER = "ODORFILTER";
		public const string OILFILTER = "OILFILTER";
		public const string STRAINER = "STRAINER";
		public const string WATERFILTER = "WATERFILTER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFilterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFilterTypeEnum(string x) { return new IfcFilterTypeEnum(x); }
		public static implicit operator string(IfcFilterTypeEnum x) { return x.Value; }
	}

	public class IfcFireSuppressionTerminalTypeEnum
	{
		public const string BREECHINGINLET = "BREECHINGINLET";
		public const string FIREHYDRANT = "FIREHYDRANT";
		public const string HOSEREEL = "HOSEREEL";
		public const string SPRINKLER = "SPRINKLER";
		public const string SPRINKLERDEFLECTOR = "SPRINKLERDEFLECTOR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFireSuppressionTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFireSuppressionTerminalTypeEnum(string x) { return new IfcFireSuppressionTerminalTypeEnum(x); }
		public static implicit operator string(IfcFireSuppressionTerminalTypeEnum x) { return x.Value; }
	}

	public class IfcFlowDirectionEnum
	{
		public const string SOURCE = "SOURCE";
		public const string SINK = "SINK";
		public const string SOURCEANDSINK = "SOURCEANDSINK";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFlowDirectionEnum(string value) { Value = value; }
		public static implicit operator IfcFlowDirectionEnum(string x) { return new IfcFlowDirectionEnum(x); }
		public static implicit operator string(IfcFlowDirectionEnum x) { return x.Value; }
	}

	public class IfcFlowInstrumentTypeEnum
	{
		public const string PRESSUREGAUGE = "PRESSUREGAUGE";
		public const string THERMOMETER = "THERMOMETER";
		public const string AMMETER = "AMMETER";
		public const string FREQUENCYMETER = "FREQUENCYMETER";
		public const string POWERFACTORMETER = "POWERFACTORMETER";
		public const string PHASEANGLEMETER = "PHASEANGLEMETER";
		public const string VOLTMETER_PEAK = "VOLTMETER_PEAK";
		public const string VOLTMETER_RMS = "VOLTMETER_RMS";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFlowInstrumentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFlowInstrumentTypeEnum(string x) { return new IfcFlowInstrumentTypeEnum(x); }
		public static implicit operator string(IfcFlowInstrumentTypeEnum x) { return x.Value; }
	}

	public class IfcFlowMeterTypeEnum
	{
		public const string ENERGYMETER = "ENERGYMETER";
		public const string GASMETER = "GASMETER";
		public const string OILMETER = "OILMETER";
		public const string WATERMETER = "WATERMETER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFlowMeterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFlowMeterTypeEnum(string x) { return new IfcFlowMeterTypeEnum(x); }
		public static implicit operator string(IfcFlowMeterTypeEnum x) { return x.Value; }
	}

	public class IfcFootingTypeEnum
	{
		public const string CAISSON_FOUNDATION = "CAISSON_FOUNDATION";
		public const string FOOTING_BEAM = "FOOTING_BEAM";
		public const string PAD_FOOTING = "PAD_FOOTING";
		public const string PILE_CAP = "PILE_CAP";
		public const string STRIP_FOOTING = "STRIP_FOOTING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFootingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFootingTypeEnum(string x) { return new IfcFootingTypeEnum(x); }
		public static implicit operator string(IfcFootingTypeEnum x) { return x.Value; }
	}

	public class IfcFurnitureTypeEnum
	{
		public const string CHAIR = "CHAIR";
		public const string TABLE = "TABLE";
		public const string DESK = "DESK";
		public const string BED = "BED";
		public const string FILECABINET = "FILECABINET";
		public const string SHELF = "SHELF";
		public const string SOFA = "SOFA";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcFurnitureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFurnitureTypeEnum(string x) { return new IfcFurnitureTypeEnum(x); }
		public static implicit operator string(IfcFurnitureTypeEnum x) { return x.Value; }
	}

	public class IfcGeographicElementTypeEnum
	{
		public const string TERRAIN = "TERRAIN";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcGeographicElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcGeographicElementTypeEnum(string x) { return new IfcGeographicElementTypeEnum(x); }
		public static implicit operator string(IfcGeographicElementTypeEnum x) { return x.Value; }
	}

	public class IfcGeometricProjectionEnum
	{
		public const string GRAPH_VIEW = "GRAPH_VIEW";
		public const string SKETCH_VIEW = "SKETCH_VIEW";
		public const string MODEL_VIEW = "MODEL_VIEW";
		public const string PLAN_VIEW = "PLAN_VIEW";
		public const string REFLECTED_PLAN_VIEW = "REFLECTED_PLAN_VIEW";
		public const string SECTION_VIEW = "SECTION_VIEW";
		public const string ELEVATION_VIEW = "ELEVATION_VIEW";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcGeometricProjectionEnum(string value) { Value = value; }
		public static implicit operator IfcGeometricProjectionEnum(string x) { return new IfcGeometricProjectionEnum(x); }
		public static implicit operator string(IfcGeometricProjectionEnum x) { return x.Value; }
	}

	public class IfcGlobalOrLocalEnum
	{
		public const string GLOBAL_COORDS = "GLOBAL_COORDS";
		public const string LOCAL_COORDS = "LOCAL_COORDS";
		private string Value;
		public IfcGlobalOrLocalEnum(string value) { Value = value; }
		public static implicit operator IfcGlobalOrLocalEnum(string x) { return new IfcGlobalOrLocalEnum(x); }
		public static implicit operator string(IfcGlobalOrLocalEnum x) { return x.Value; }
	}

	public class IfcGridTypeEnum
	{
		public const string RECTANGULAR = "RECTANGULAR";
		public const string RADIAL = "RADIAL";
		public const string TRIANGULAR = "TRIANGULAR";
		public const string IRREGULAR = "IRREGULAR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcGridTypeEnum(string value) { Value = value; }
		public static implicit operator IfcGridTypeEnum(string x) { return new IfcGridTypeEnum(x); }
		public static implicit operator string(IfcGridTypeEnum x) { return x.Value; }
	}

	public class IfcHeatExchangerTypeEnum
	{
		public const string PLATE = "PLATE";
		public const string SHELLANDTUBE = "SHELLANDTUBE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcHeatExchangerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcHeatExchangerTypeEnum(string x) { return new IfcHeatExchangerTypeEnum(x); }
		public static implicit operator string(IfcHeatExchangerTypeEnum x) { return x.Value; }
	}

	public class IfcHumidifierTypeEnum
	{
		public const string STEAMINJECTION = "STEAMINJECTION";
		public const string ADIABATICAIRWASHER = "ADIABATICAIRWASHER";
		public const string ADIABATICPAN = "ADIABATICPAN";
		public const string ADIABATICWETTEDELEMENT = "ADIABATICWETTEDELEMENT";
		public const string ADIABATICATOMIZING = "ADIABATICATOMIZING";
		public const string ADIABATICULTRASONIC = "ADIABATICULTRASONIC";
		public const string ADIABATICRIGIDMEDIA = "ADIABATICRIGIDMEDIA";
		public const string ADIABATICCOMPRESSEDAIRNOZZLE = "ADIABATICCOMPRESSEDAIRNOZZLE";
		public const string ASSISTEDELECTRIC = "ASSISTEDELECTRIC";
		public const string ASSISTEDNATURALGAS = "ASSISTEDNATURALGAS";
		public const string ASSISTEDPROPANE = "ASSISTEDPROPANE";
		public const string ASSISTEDBUTANE = "ASSISTEDBUTANE";
		public const string ASSISTEDSTEAM = "ASSISTEDSTEAM";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcHumidifierTypeEnum(string value) { Value = value; }
		public static implicit operator IfcHumidifierTypeEnum(string x) { return new IfcHumidifierTypeEnum(x); }
		public static implicit operator string(IfcHumidifierTypeEnum x) { return x.Value; }
	}

	public class IfcInterceptorTypeEnum
	{
		public const string CYCLONIC = "CYCLONIC";
		public const string GREASE = "GREASE";
		public const string OIL = "OIL";
		public const string PETROL = "PETROL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcInterceptorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcInterceptorTypeEnum(string x) { return new IfcInterceptorTypeEnum(x); }
		public static implicit operator string(IfcInterceptorTypeEnum x) { return x.Value; }
	}

	public class IfcInternalOrExternalEnum
	{
		public const string INTERNAL = "INTERNAL";
		public const string EXTERNAL = "EXTERNAL";
		public const string EXTERNAL_EARTH = "EXTERNAL_EARTH";
		public const string EXTERNAL_WATER = "EXTERNAL_WATER";
		public const string EXTERNAL_FIRE = "EXTERNAL_FIRE";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcInternalOrExternalEnum(string value) { Value = value; }
		public static implicit operator IfcInternalOrExternalEnum(string x) { return new IfcInternalOrExternalEnum(x); }
		public static implicit operator string(IfcInternalOrExternalEnum x) { return x.Value; }
	}

	public class IfcInventoryTypeEnum
	{
		public const string ASSETINVENTORY = "ASSETINVENTORY";
		public const string SPACEINVENTORY = "SPACEINVENTORY";
		public const string FURNITUREINVENTORY = "FURNITUREINVENTORY";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcInventoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcInventoryTypeEnum(string x) { return new IfcInventoryTypeEnum(x); }
		public static implicit operator string(IfcInventoryTypeEnum x) { return x.Value; }
	}

	public class IfcJunctionBoxTypeEnum
	{
		public const string DATA = "DATA";
		public const string POWER = "POWER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcJunctionBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IfcJunctionBoxTypeEnum(string x) { return new IfcJunctionBoxTypeEnum(x); }
		public static implicit operator string(IfcJunctionBoxTypeEnum x) { return x.Value; }
	}

	public class IfcKnotType
	{
		public const string UNIFORM_KNOTS = "UNIFORM_KNOTS";
		public const string QUASI_UNIFORM_KNOTS = "QUASI_UNIFORM_KNOTS";
		public const string PIECEWISE_BEZIER_KNOTS = "PIECEWISE_BEZIER_KNOTS";
		public const string UNSPECIFIED = "UNSPECIFIED";
		private string Value;
		public IfcKnotType(string value) { Value = value; }
		public static implicit operator IfcKnotType(string x) { return new IfcKnotType(x); }
		public static implicit operator string(IfcKnotType x) { return x.Value; }
	}

	public class IfcLaborResourceTypeEnum
	{
		public const string ADMINISTRATION = "ADMINISTRATION";
		public const string CARPENTRY = "CARPENTRY";
		public const string CLEANING = "CLEANING";
		public const string CONCRETE = "CONCRETE";
		public const string DRYWALL = "DRYWALL";
		public const string ELECTRIC = "ELECTRIC";
		public const string FINISHING = "FINISHING";
		public const string FLOORING = "FLOORING";
		public const string GENERAL = "GENERAL";
		public const string HVAC = "HVAC";
		public const string LANDSCAPING = "LANDSCAPING";
		public const string MASONRY = "MASONRY";
		public const string PAINTING = "PAINTING";
		public const string PAVING = "PAVING";
		public const string PLUMBING = "PLUMBING";
		public const string ROOFING = "ROOFING";
		public const string SITEGRADING = "SITEGRADING";
		public const string STEELWORK = "STEELWORK";
		public const string SURVEYING = "SURVEYING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcLaborResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLaborResourceTypeEnum(string x) { return new IfcLaborResourceTypeEnum(x); }
		public static implicit operator string(IfcLaborResourceTypeEnum x) { return x.Value; }
	}

	public class IfcLampTypeEnum
	{
		public const string COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
		public const string FLUORESCENT = "FLUORESCENT";
		public const string HALOGEN = "HALOGEN";
		public const string HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
		public const string HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
		public const string LED = "LED";
		public const string METALHALIDE = "METALHALIDE";
		public const string OLED = "OLED";
		public const string TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcLampTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLampTypeEnum(string x) { return new IfcLampTypeEnum(x); }
		public static implicit operator string(IfcLampTypeEnum x) { return x.Value; }
	}

	public class IfcLayerSetDirectionEnum
	{
		public const string AXIS1 = "AXIS1";
		public const string AXIS2 = "AXIS2";
		public const string AXIS3 = "AXIS3";
		private string Value;
		public IfcLayerSetDirectionEnum(string value) { Value = value; }
		public static implicit operator IfcLayerSetDirectionEnum(string x) { return new IfcLayerSetDirectionEnum(x); }
		public static implicit operator string(IfcLayerSetDirectionEnum x) { return x.Value; }
	}

	public class IfcLightDistributionCurveEnum
	{
		public const string TYPE_A = "TYPE_A";
		public const string TYPE_B = "TYPE_B";
		public const string TYPE_C = "TYPE_C";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcLightDistributionCurveEnum(string value) { Value = value; }
		public static implicit operator IfcLightDistributionCurveEnum(string x) { return new IfcLightDistributionCurveEnum(x); }
		public static implicit operator string(IfcLightDistributionCurveEnum x) { return x.Value; }
	}

	public class IfcLightEmissionSourceEnum
	{
		public const string COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
		public const string FLUORESCENT = "FLUORESCENT";
		public const string HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
		public const string HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
		public const string LIGHTEMITTINGDIODE = "LIGHTEMITTINGDIODE";
		public const string LOWPRESSURESODIUM = "LOWPRESSURESODIUM";
		public const string LOWVOLTAGEHALOGEN = "LOWVOLTAGEHALOGEN";
		public const string MAINVOLTAGEHALOGEN = "MAINVOLTAGEHALOGEN";
		public const string METALHALIDE = "METALHALIDE";
		public const string TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcLightEmissionSourceEnum(string value) { Value = value; }
		public static implicit operator IfcLightEmissionSourceEnum(string x) { return new IfcLightEmissionSourceEnum(x); }
		public static implicit operator string(IfcLightEmissionSourceEnum x) { return x.Value; }
	}

	public class IfcLightFixtureTypeEnum
	{
		public const string POINTSOURCE = "POINTSOURCE";
		public const string DIRECTIONSOURCE = "DIRECTIONSOURCE";
		public const string SECURITYLIGHTING = "SECURITYLIGHTING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcLightFixtureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLightFixtureTypeEnum(string x) { return new IfcLightFixtureTypeEnum(x); }
		public static implicit operator string(IfcLightFixtureTypeEnum x) { return x.Value; }
	}

	public class IfcLoadGroupTypeEnum
	{
		public const string LOAD_GROUP = "LOAD_GROUP";
		public const string LOAD_CASE = "LOAD_CASE";
		public const string LOAD_COMBINATION = "LOAD_COMBINATION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcLoadGroupTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLoadGroupTypeEnum(string x) { return new IfcLoadGroupTypeEnum(x); }
		public static implicit operator string(IfcLoadGroupTypeEnum x) { return x.Value; }
	}

	public class IfcLogicalOperatorEnum
	{
		public const string LOGICALAND = "LOGICALAND";
		public const string LOGICALOR = "LOGICALOR";
		public const string LOGICALXOR = "LOGICALXOR";
		public const string LOGICALNOTAND = "LOGICALNOTAND";
		public const string LOGICALNOTOR = "LOGICALNOTOR";
		private string Value;
		public IfcLogicalOperatorEnum(string value) { Value = value; }
		public static implicit operator IfcLogicalOperatorEnum(string x) { return new IfcLogicalOperatorEnum(x); }
		public static implicit operator string(IfcLogicalOperatorEnum x) { return x.Value; }
	}

	public class IfcMechanicalFastenerTypeEnum
	{
		public const string ANCHORBOLT = "ANCHORBOLT";
		public const string BOLT = "BOLT";
		public const string DOWEL = "DOWEL";
		public const string NAIL = "NAIL";
		public const string NAILPLATE = "NAILPLATE";
		public const string RIVET = "RIVET";
		public const string SCREW = "SCREW";
		public const string SHEARCONNECTOR = "SHEARCONNECTOR";
		public const string STAPLE = "STAPLE";
		public const string STUDSHEARCONNECTOR = "STUDSHEARCONNECTOR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcMechanicalFastenerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMechanicalFastenerTypeEnum(string x) { return new IfcMechanicalFastenerTypeEnum(x); }
		public static implicit operator string(IfcMechanicalFastenerTypeEnum x) { return x.Value; }
	}

	public class IfcMedicalDeviceTypeEnum
	{
		public const string AIRSTATION = "AIRSTATION";
		public const string FEEDAIRUNIT = "FEEDAIRUNIT";
		public const string OXYGENGENERATOR = "OXYGENGENERATOR";
		public const string OXYGENPLANT = "OXYGENPLANT";
		public const string VACUUMSTATION = "VACUUMSTATION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcMedicalDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMedicalDeviceTypeEnum(string x) { return new IfcMedicalDeviceTypeEnum(x); }
		public static implicit operator string(IfcMedicalDeviceTypeEnum x) { return x.Value; }
	}

	public class IfcMemberTypeEnum
	{
		public const string BRACE = "BRACE";
		public const string CHORD = "CHORD";
		public const string COLLAR = "COLLAR";
		public const string MEMBER = "MEMBER";
		public const string MULLION = "MULLION";
		public const string PLATE = "PLATE";
		public const string POST = "POST";
		public const string PURLIN = "PURLIN";
		public const string RAFTER = "RAFTER";
		public const string STRINGER = "STRINGER";
		public const string STRUT = "STRUT";
		public const string STUD = "STUD";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMemberTypeEnum(string x) { return new IfcMemberTypeEnum(x); }
		public static implicit operator string(IfcMemberTypeEnum x) { return x.Value; }
	}

	public class IfcMotorConnectionTypeEnum
	{
		public const string BELTDRIVE = "BELTDRIVE";
		public const string COUPLING = "COUPLING";
		public const string DIRECTDRIVE = "DIRECTDRIVE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcMotorConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMotorConnectionTypeEnum(string x) { return new IfcMotorConnectionTypeEnum(x); }
		public static implicit operator string(IfcMotorConnectionTypeEnum x) { return x.Value; }
	}

	public class IfcNullStyle : IfcPresentationStyleSelect
	{
		public const string NULL = "NULL";
		private string Value;
		public IfcNullStyle(string value) { Value = value; }
		public static implicit operator IfcNullStyle(string x) { return new IfcNullStyle(x); }
		public static implicit operator string(IfcNullStyle x) { return x.Value; }
	}

	public class IfcObjectTypeEnum
	{
		public const string PRODUCT = "PRODUCT";
		public const string PROCESS = "PROCESS";
		public const string CONTROL = "CONTROL";
		public const string RESOURCE = "RESOURCE";
		public const string ACTOR = "ACTOR";
		public const string GROUP = "GROUP";
		public const string PROJECT = "PROJECT";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcObjectTypeEnum(string value) { Value = value; }
		public static implicit operator IfcObjectTypeEnum(string x) { return new IfcObjectTypeEnum(x); }
		public static implicit operator string(IfcObjectTypeEnum x) { return x.Value; }
	}

	public class IfcObjectiveEnum
	{
		public const string CODECOMPLIANCE = "CODECOMPLIANCE";
		public const string CODEWAIVER = "CODEWAIVER";
		public const string DESIGNINTENT = "DESIGNINTENT";
		public const string EXTERNAL = "EXTERNAL";
		public const string HEALTHANDSAFETY = "HEALTHANDSAFETY";
		public const string MERGECONFLICT = "MERGECONFLICT";
		public const string MODELVIEW = "MODELVIEW";
		public const string PARAMETER = "PARAMETER";
		public const string REQUIREMENT = "REQUIREMENT";
		public const string SPECIFICATION = "SPECIFICATION";
		public const string TRIGGERCONDITION = "TRIGGERCONDITION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcObjectiveEnum(string value) { Value = value; }
		public static implicit operator IfcObjectiveEnum(string x) { return new IfcObjectiveEnum(x); }
		public static implicit operator string(IfcObjectiveEnum x) { return x.Value; }
	}

	public class IfcOccupantTypeEnum
	{
		public const string ASSIGNEE = "ASSIGNEE";
		public const string ASSIGNOR = "ASSIGNOR";
		public const string LESSEE = "LESSEE";
		public const string LESSOR = "LESSOR";
		public const string LETTINGAGENT = "LETTINGAGENT";
		public const string OWNER = "OWNER";
		public const string TENANT = "TENANT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcOccupantTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOccupantTypeEnum(string x) { return new IfcOccupantTypeEnum(x); }
		public static implicit operator string(IfcOccupantTypeEnum x) { return x.Value; }
	}

	public class IfcOpeningElementTypeEnum
	{
		public const string OPENING = "OPENING";
		public const string RECESS = "RECESS";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcOpeningElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOpeningElementTypeEnum(string x) { return new IfcOpeningElementTypeEnum(x); }
		public static implicit operator string(IfcOpeningElementTypeEnum x) { return x.Value; }
	}

	public class IfcOutletTypeEnum
	{
		public const string AUDIOVISUALOUTLET = "AUDIOVISUALOUTLET";
		public const string COMMUNICATIONSOUTLET = "COMMUNICATIONSOUTLET";
		public const string POWEROUTLET = "POWEROUTLET";
		public const string DATAOUTLET = "DATAOUTLET";
		public const string TELEPHONEOUTLET = "TELEPHONEOUTLET";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcOutletTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOutletTypeEnum(string x) { return new IfcOutletTypeEnum(x); }
		public static implicit operator string(IfcOutletTypeEnum x) { return x.Value; }
	}

	public class IfcPerformanceHistoryTypeEnum
	{
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPerformanceHistoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPerformanceHistoryTypeEnum(string x) { return new IfcPerformanceHistoryTypeEnum(x); }
		public static implicit operator string(IfcPerformanceHistoryTypeEnum x) { return x.Value; }
	}

	public class IfcPermeableCoveringOperationEnum
	{
		public const string GRILL = "GRILL";
		public const string LOUVER = "LOUVER";
		public const string SCREEN = "SCREEN";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPermeableCoveringOperationEnum(string value) { Value = value; }
		public static implicit operator IfcPermeableCoveringOperationEnum(string x) { return new IfcPermeableCoveringOperationEnum(x); }
		public static implicit operator string(IfcPermeableCoveringOperationEnum x) { return x.Value; }
	}

	public class IfcPermitTypeEnum
	{
		public const string ACCESS = "ACCESS";
		public const string BUILDING = "BUILDING";
		public const string WORK = "WORK";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPermitTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPermitTypeEnum(string x) { return new IfcPermitTypeEnum(x); }
		public static implicit operator string(IfcPermitTypeEnum x) { return x.Value; }
	}

	public class IfcPhysicalOrVirtualEnum
	{
		public const string PHYSICAL = "PHYSICAL";
		public const string VIRTUAL = "VIRTUAL";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPhysicalOrVirtualEnum(string value) { Value = value; }
		public static implicit operator IfcPhysicalOrVirtualEnum(string x) { return new IfcPhysicalOrVirtualEnum(x); }
		public static implicit operator string(IfcPhysicalOrVirtualEnum x) { return x.Value; }
	}

	public class IfcPileConstructionEnum
	{
		public const string CAST_IN_PLACE = "CAST_IN_PLACE";
		public const string COMPOSITE = "COMPOSITE";
		public const string PRECAST_CONCRETE = "PRECAST_CONCRETE";
		public const string PREFAB_STEEL = "PREFAB_STEEL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPileConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcPileConstructionEnum(string x) { return new IfcPileConstructionEnum(x); }
		public static implicit operator string(IfcPileConstructionEnum x) { return x.Value; }
	}

	public class IfcPileTypeEnum
	{
		public const string BORED = "BORED";
		public const string DRIVEN = "DRIVEN";
		public const string JETGROUTING = "JETGROUTING";
		public const string COHESION = "COHESION";
		public const string FRICTION = "FRICTION";
		public const string SUPPORT = "SUPPORT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPileTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPileTypeEnum(string x) { return new IfcPileTypeEnum(x); }
		public static implicit operator string(IfcPileTypeEnum x) { return x.Value; }
	}

	public class IfcPipeFittingTypeEnum
	{
		public const string BEND = "BEND";
		public const string CONNECTOR = "CONNECTOR";
		public const string ENTRY = "ENTRY";
		public const string EXIT = "EXIT";
		public const string JUNCTION = "JUNCTION";
		public const string OBSTRUCTION = "OBSTRUCTION";
		public const string TRANSITION = "TRANSITION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPipeFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPipeFittingTypeEnum(string x) { return new IfcPipeFittingTypeEnum(x); }
		public static implicit operator string(IfcPipeFittingTypeEnum x) { return x.Value; }
	}

	public class IfcPipeSegmentTypeEnum
	{
		public const string CULVERT = "CULVERT";
		public const string FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
		public const string RIGIDSEGMENT = "RIGIDSEGMENT";
		public const string GUTTER = "GUTTER";
		public const string SPOOL = "SPOOL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPipeSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPipeSegmentTypeEnum(string x) { return new IfcPipeSegmentTypeEnum(x); }
		public static implicit operator string(IfcPipeSegmentTypeEnum x) { return x.Value; }
	}

	public class IfcPlateTypeEnum
	{
		public const string CURTAIN_PANEL = "CURTAIN_PANEL";
		public const string SHEET = "SHEET";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPlateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPlateTypeEnum(string x) { return new IfcPlateTypeEnum(x); }
		public static implicit operator string(IfcPlateTypeEnum x) { return x.Value; }
	}

	public class IfcPreferredSurfaceCurveRepresentation
	{
		public const string CURVE3D = "CURVE3D";
		public const string PCURVE_S1 = "PCURVE_S1";
		public const string PCURVE_S2 = "PCURVE_S2";
		private string Value;
		public IfcPreferredSurfaceCurveRepresentation(string value) { Value = value; }
		public static implicit operator IfcPreferredSurfaceCurveRepresentation(string x) { return new IfcPreferredSurfaceCurveRepresentation(x); }
		public static implicit operator string(IfcPreferredSurfaceCurveRepresentation x) { return x.Value; }
	}

	public class IfcProcedureTypeEnum
	{
		public const string ADVICE_CAUTION = "ADVICE_CAUTION";
		public const string ADVICE_NOTE = "ADVICE_NOTE";
		public const string ADVICE_WARNING = "ADVICE_WARNING";
		public const string CALIBRATION = "CALIBRATION";
		public const string DIAGNOSTIC = "DIAGNOSTIC";
		public const string SHUTDOWN = "SHUTDOWN";
		public const string STARTUP = "STARTUP";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcProcedureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProcedureTypeEnum(string x) { return new IfcProcedureTypeEnum(x); }
		public static implicit operator string(IfcProcedureTypeEnum x) { return x.Value; }
	}

	public class IfcProfileTypeEnum
	{
		public const string CURVE = "CURVE";
		public const string AREA = "AREA";
		private string Value;
		public IfcProfileTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProfileTypeEnum(string x) { return new IfcProfileTypeEnum(x); }
		public static implicit operator string(IfcProfileTypeEnum x) { return x.Value; }
	}

	public class IfcProjectOrderTypeEnum
	{
		public const string CHANGEORDER = "CHANGEORDER";
		public const string MAINTENANCEWORKORDER = "MAINTENANCEWORKORDER";
		public const string MOVEORDER = "MOVEORDER";
		public const string PURCHASEORDER = "PURCHASEORDER";
		public const string WORKORDER = "WORKORDER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcProjectOrderTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProjectOrderTypeEnum(string x) { return new IfcProjectOrderTypeEnum(x); }
		public static implicit operator string(IfcProjectOrderTypeEnum x) { return x.Value; }
	}

	public class IfcProjectedOrTrueLengthEnum
	{
		public const string PROJECTED_LENGTH = "PROJECTED_LENGTH";
		public const string TRUE_LENGTH = "TRUE_LENGTH";
		private string Value;
		public IfcProjectedOrTrueLengthEnum(string value) { Value = value; }
		public static implicit operator IfcProjectedOrTrueLengthEnum(string x) { return new IfcProjectedOrTrueLengthEnum(x); }
		public static implicit operator string(IfcProjectedOrTrueLengthEnum x) { return x.Value; }
	}

	public class IfcProjectionElementTypeEnum
	{
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcProjectionElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProjectionElementTypeEnum(string x) { return new IfcProjectionElementTypeEnum(x); }
		public static implicit operator string(IfcProjectionElementTypeEnum x) { return x.Value; }
	}

	public class IfcPropertySetTemplateTypeEnum
	{
		public const string PSET_TYPEDRIVENONLY = "PSET_TYPEDRIVENONLY";
		public const string PSET_TYPEDRIVENOVERRIDE = "PSET_TYPEDRIVENOVERRIDE";
		public const string PSET_OCCURRENCEDRIVEN = "PSET_OCCURRENCEDRIVEN";
		public const string PSET_PERFORMANCEDRIVEN = "PSET_PERFORMANCEDRIVEN";
		public const string QTO_TYPEDRIVENONLY = "QTO_TYPEDRIVENONLY";
		public const string QTO_TYPEDRIVENOVERRIDE = "QTO_TYPEDRIVENOVERRIDE";
		public const string QTO_OCCURRENCEDRIVEN = "QTO_OCCURRENCEDRIVEN";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPropertySetTemplateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPropertySetTemplateTypeEnum(string x) { return new IfcPropertySetTemplateTypeEnum(x); }
		public static implicit operator string(IfcPropertySetTemplateTypeEnum x) { return x.Value; }
	}

	public class IfcProtectiveDeviceTrippingUnitTypeEnum
	{
		public const string ELECTRONIC = "ELECTRONIC";
		public const string ELECTROMAGNETIC = "ELECTROMAGNETIC";
		public const string RESIDUALCURRENT = "RESIDUALCURRENT";
		public const string THERMAL = "THERMAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcProtectiveDeviceTrippingUnitTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProtectiveDeviceTrippingUnitTypeEnum(string x) { return new IfcProtectiveDeviceTrippingUnitTypeEnum(x); }
		public static implicit operator string(IfcProtectiveDeviceTrippingUnitTypeEnum x) { return x.Value; }
	}

	public class IfcProtectiveDeviceTypeEnum
	{
		public const string CIRCUITBREAKER = "CIRCUITBREAKER";
		public const string EARTHLEAKAGECIRCUITBREAKER = "EARTHLEAKAGECIRCUITBREAKER";
		public const string EARTHINGSWITCH = "EARTHINGSWITCH";
		public const string FUSEDISCONNECTOR = "FUSEDISCONNECTOR";
		public const string RESIDUALCURRENTCIRCUITBREAKER = "RESIDUALCURRENTCIRCUITBREAKER";
		public const string RESIDUALCURRENTSWITCH = "RESIDUALCURRENTSWITCH";
		public const string VARISTOR = "VARISTOR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcProtectiveDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProtectiveDeviceTypeEnum(string x) { return new IfcProtectiveDeviceTypeEnum(x); }
		public static implicit operator string(IfcProtectiveDeviceTypeEnum x) { return x.Value; }
	}

	public class IfcPumpTypeEnum
	{
		public const string CIRCULATOR = "CIRCULATOR";
		public const string ENDSUCTION = "ENDSUCTION";
		public const string SPLITCASE = "SPLITCASE";
		public const string SUBMERSIBLEPUMP = "SUBMERSIBLEPUMP";
		public const string SUMPPUMP = "SUMPPUMP";
		public const string VERTICALINLINE = "VERTICALINLINE";
		public const string VERTICALTURBINE = "VERTICALTURBINE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcPumpTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPumpTypeEnum(string x) { return new IfcPumpTypeEnum(x); }
		public static implicit operator string(IfcPumpTypeEnum x) { return x.Value; }
	}

	public class IfcRailingTypeEnum
	{
		public const string HANDRAIL = "HANDRAIL";
		public const string GUARDRAIL = "GUARDRAIL";
		public const string BALUSTRADE = "BALUSTRADE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcRailingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRailingTypeEnum(string x) { return new IfcRailingTypeEnum(x); }
		public static implicit operator string(IfcRailingTypeEnum x) { return x.Value; }
	}

	public class IfcRampFlightTypeEnum
	{
		public const string STRAIGHT = "STRAIGHT";
		public const string SPIRAL = "SPIRAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcRampFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRampFlightTypeEnum(string x) { return new IfcRampFlightTypeEnum(x); }
		public static implicit operator string(IfcRampFlightTypeEnum x) { return x.Value; }
	}

	public class IfcRampTypeEnum
	{
		public const string STRAIGHT_RUN_RAMP = "STRAIGHT_RUN_RAMP";
		public const string TWO_STRAIGHT_RUN_RAMP = "TWO_STRAIGHT_RUN_RAMP";
		public const string QUARTER_TURN_RAMP = "QUARTER_TURN_RAMP";
		public const string TWO_QUARTER_TURN_RAMP = "TWO_QUARTER_TURN_RAMP";
		public const string HALF_TURN_RAMP = "HALF_TURN_RAMP";
		public const string SPIRAL_RAMP = "SPIRAL_RAMP";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcRampTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRampTypeEnum(string x) { return new IfcRampTypeEnum(x); }
		public static implicit operator string(IfcRampTypeEnum x) { return x.Value; }
	}

	public class IfcRecurrenceTypeEnum
	{
		public const string DAILY = "DAILY";
		public const string WEEKLY = "WEEKLY";
		public const string MONTHLY_BY_DAY_OF_MONTH = "MONTHLY_BY_DAY_OF_MONTH";
		public const string MONTHLY_BY_POSITION = "MONTHLY_BY_POSITION";
		public const string BY_DAY_COUNT = "BY_DAY_COUNT";
		public const string BY_WEEKDAY_COUNT = "BY_WEEKDAY_COUNT";
		public const string YEARLY_BY_DAY_OF_MONTH = "YEARLY_BY_DAY_OF_MONTH";
		public const string YEARLY_BY_POSITION = "YEARLY_BY_POSITION";
		private string Value;
		public IfcRecurrenceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRecurrenceTypeEnum(string x) { return new IfcRecurrenceTypeEnum(x); }
		public static implicit operator string(IfcRecurrenceTypeEnum x) { return x.Value; }
	}

	public class IfcReflectanceMethodEnum
	{
		public const string BLINN = "BLINN";
		public const string FLAT = "FLAT";
		public const string GLASS = "GLASS";
		public const string MATT = "MATT";
		public const string METAL = "METAL";
		public const string MIRROR = "MIRROR";
		public const string PHONG = "PHONG";
		public const string PLASTIC = "PLASTIC";
		public const string STRAUSS = "STRAUSS";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcReflectanceMethodEnum(string value) { Value = value; }
		public static implicit operator IfcReflectanceMethodEnum(string x) { return new IfcReflectanceMethodEnum(x); }
		public static implicit operator string(IfcReflectanceMethodEnum x) { return x.Value; }
	}

	public class IfcReinforcingBarRoleEnum
	{
		public const string MAIN = "MAIN";
		public const string SHEAR = "SHEAR";
		public const string LIGATURE = "LIGATURE";
		public const string STUD = "STUD";
		public const string PUNCHING = "PUNCHING";
		public const string EDGE = "EDGE";
		public const string RING = "RING";
		public const string ANCHORING = "ANCHORING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcReinforcingBarRoleEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarRoleEnum(string x) { return new IfcReinforcingBarRoleEnum(x); }
		public static implicit operator string(IfcReinforcingBarRoleEnum x) { return x.Value; }
	}

	public class IfcReinforcingBarSurfaceEnum
	{
		public const string PLAIN = "PLAIN";
		public const string TEXTURED = "TEXTURED";
		private string Value;
		public IfcReinforcingBarSurfaceEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarSurfaceEnum(string x) { return new IfcReinforcingBarSurfaceEnum(x); }
		public static implicit operator string(IfcReinforcingBarSurfaceEnum x) { return x.Value; }
	}

	public class IfcReinforcingBarTypeEnum
	{
		public const string ANCHORING = "ANCHORING";
		public const string EDGE = "EDGE";
		public const string LIGATURE = "LIGATURE";
		public const string MAIN = "MAIN";
		public const string PUNCHING = "PUNCHING";
		public const string RING = "RING";
		public const string SHEAR = "SHEAR";
		public const string STUD = "STUD";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcReinforcingBarTypeEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarTypeEnum(string x) { return new IfcReinforcingBarTypeEnum(x); }
		public static implicit operator string(IfcReinforcingBarTypeEnum x) { return x.Value; }
	}

	public class IfcReinforcingMeshTypeEnum
	{
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcReinforcingMeshTypeEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingMeshTypeEnum(string x) { return new IfcReinforcingMeshTypeEnum(x); }
		public static implicit operator string(IfcReinforcingMeshTypeEnum x) { return x.Value; }
	}

	public class IfcRoleEnum
	{
		public const string SUPPLIER = "SUPPLIER";
		public const string MANUFACTURER = "MANUFACTURER";
		public const string CONTRACTOR = "CONTRACTOR";
		public const string SUBCONTRACTOR = "SUBCONTRACTOR";
		public const string ARCHITECT = "ARCHITECT";
		public const string STRUCTURALENGINEER = "STRUCTURALENGINEER";
		public const string COSTENGINEER = "COSTENGINEER";
		public const string CLIENT = "CLIENT";
		public const string BUILDINGOWNER = "BUILDINGOWNER";
		public const string BUILDINGOPERATOR = "BUILDINGOPERATOR";
		public const string MECHANICALENGINEER = "MECHANICALENGINEER";
		public const string ELECTRICALENGINEER = "ELECTRICALENGINEER";
		public const string PROJECTMANAGER = "PROJECTMANAGER";
		public const string FACILITIESMANAGER = "FACILITIESMANAGER";
		public const string CIVILENGINEER = "CIVILENGINEER";
		public const string COMMISSIONINGENGINEER = "COMMISSIONINGENGINEER";
		public const string ENGINEER = "ENGINEER";
		public const string OWNER = "OWNER";
		public const string CONSULTANT = "CONSULTANT";
		public const string CONSTRUCTIONMANAGER = "CONSTRUCTIONMANAGER";
		public const string FIELDCONSTRUCTIONMANAGER = "FIELDCONSTRUCTIONMANAGER";
		public const string RESELLER = "RESELLER";
		public const string USERDEFINED = "USERDEFINED";
		private string Value;
		public IfcRoleEnum(string value) { Value = value; }
		public static implicit operator IfcRoleEnum(string x) { return new IfcRoleEnum(x); }
		public static implicit operator string(IfcRoleEnum x) { return x.Value; }
	}

	public class IfcRoofTypeEnum
	{
		public const string FLAT_ROOF = "FLAT_ROOF";
		public const string SHED_ROOF = "SHED_ROOF";
		public const string GABLE_ROOF = "GABLE_ROOF";
		public const string HIP_ROOF = "HIP_ROOF";
		public const string HIPPED_GABLE_ROOF = "HIPPED_GABLE_ROOF";
		public const string GAMBREL_ROOF = "GAMBREL_ROOF";
		public const string MANSARD_ROOF = "MANSARD_ROOF";
		public const string BARREL_ROOF = "BARREL_ROOF";
		public const string RAINBOW_ROOF = "RAINBOW_ROOF";
		public const string BUTTERFLY_ROOF = "BUTTERFLY_ROOF";
		public const string PAVILION_ROOF = "PAVILION_ROOF";
		public const string DOME_ROOF = "DOME_ROOF";
		public const string FREEFORM = "FREEFORM";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcRoofTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRoofTypeEnum(string x) { return new IfcRoofTypeEnum(x); }
		public static implicit operator string(IfcRoofTypeEnum x) { return x.Value; }
	}

	public class IfcSIPrefix
	{
		public const string EXA = "EXA";
		public const string PETA = "PETA";
		public const string TERA = "TERA";
		public const string GIGA = "GIGA";
		public const string MEGA = "MEGA";
		public const string KILO = "KILO";
		public const string HECTO = "HECTO";
		public const string DECA = "DECA";
		public const string DECI = "DECI";
		public const string CENTI = "CENTI";
		public const string MILLI = "MILLI";
		public const string MICRO = "MICRO";
		public const string NANO = "NANO";
		public const string PICO = "PICO";
		public const string FEMTO = "FEMTO";
		public const string ATTO = "ATTO";
		private string Value;
		public IfcSIPrefix(string value) { Value = value; }
		public static implicit operator IfcSIPrefix(string x) { return new IfcSIPrefix(x); }
		public static implicit operator string(IfcSIPrefix x) { return x.Value; }
	}

	public class IfcSIUnitName
	{
		public const string AMPERE = "AMPERE";
		public const string BECQUEREL = "BECQUEREL";
		public const string CANDELA = "CANDELA";
		public const string COULOMB = "COULOMB";
		public const string CUBIC_METRE = "CUBIC_METRE";
		public const string DEGREE_CELSIUS = "DEGREE_CELSIUS";
		public const string FARAD = "FARAD";
		public const string GRAM = "GRAM";
		public const string GRAY = "GRAY";
		public const string HENRY = "HENRY";
		public const string HERTZ = "HERTZ";
		public const string JOULE = "JOULE";
		public const string KELVIN = "KELVIN";
		public const string LUMEN = "LUMEN";
		public const string LUX = "LUX";
		public const string METRE = "METRE";
		public const string MOLE = "MOLE";
		public const string NEWTON = "NEWTON";
		public const string OHM = "OHM";
		public const string PASCAL = "PASCAL";
		public const string RADIAN = "RADIAN";
		public const string SECOND = "SECOND";
		public const string SIEMENS = "SIEMENS";
		public const string SIEVERT = "SIEVERT";
		public const string SQUARE_METRE = "SQUARE_METRE";
		public const string STERADIAN = "STERADIAN";
		public const string TESLA = "TESLA";
		public const string VOLT = "VOLT";
		public const string WATT = "WATT";
		public const string WEBER = "WEBER";
		private string Value;
		public IfcSIUnitName(string value) { Value = value; }
		public static implicit operator IfcSIUnitName(string x) { return new IfcSIUnitName(x); }
		public static implicit operator string(IfcSIUnitName x) { return x.Value; }
	}

	public class IfcSanitaryTerminalTypeEnum
	{
		public const string BATH = "BATH";
		public const string BIDET = "BIDET";
		public const string CISTERN = "CISTERN";
		public const string SHOWER = "SHOWER";
		public const string SINK = "SINK";
		public const string SANITARYFOUNTAIN = "SANITARYFOUNTAIN";
		public const string TOILETPAN = "TOILETPAN";
		public const string URINAL = "URINAL";
		public const string WASHHANDBASIN = "WASHHANDBASIN";
		public const string WCSEAT = "WCSEAT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSanitaryTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSanitaryTerminalTypeEnum(string x) { return new IfcSanitaryTerminalTypeEnum(x); }
		public static implicit operator string(IfcSanitaryTerminalTypeEnum x) { return x.Value; }
	}

	public class IfcSectionTypeEnum
	{
		public const string UNIFORM = "UNIFORM";
		public const string TAPERED = "TAPERED";
		private string Value;
		public IfcSectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSectionTypeEnum(string x) { return new IfcSectionTypeEnum(x); }
		public static implicit operator string(IfcSectionTypeEnum x) { return x.Value; }
	}

	public class IfcSensorTypeEnum
	{
		public const string COSENSOR = "COSENSOR";
		public const string CO2SENSOR = "CO2SENSOR";
		public const string CONDUCTANCESENSOR = "CONDUCTANCESENSOR";
		public const string CONTACTSENSOR = "CONTACTSENSOR";
		public const string FIRESENSOR = "FIRESENSOR";
		public const string FLOWSENSOR = "FLOWSENSOR";
		public const string FROSTSENSOR = "FROSTSENSOR";
		public const string GASSENSOR = "GASSENSOR";
		public const string HEATSENSOR = "HEATSENSOR";
		public const string HUMIDITYSENSOR = "HUMIDITYSENSOR";
		public const string IDENTIFIERSENSOR = "IDENTIFIERSENSOR";
		public const string IONCONCENTRATIONSENSOR = "IONCONCENTRATIONSENSOR";
		public const string LEVELSENSOR = "LEVELSENSOR";
		public const string LIGHTSENSOR = "LIGHTSENSOR";
		public const string MOISTURESENSOR = "MOISTURESENSOR";
		public const string MOVEMENTSENSOR = "MOVEMENTSENSOR";
		public const string PHSENSOR = "PHSENSOR";
		public const string PRESSURESENSOR = "PRESSURESENSOR";
		public const string RADIATIONSENSOR = "RADIATIONSENSOR";
		public const string RADIOACTIVITYSENSOR = "RADIOACTIVITYSENSOR";
		public const string SMOKESENSOR = "SMOKESENSOR";
		public const string SOUNDSENSOR = "SOUNDSENSOR";
		public const string TEMPERATURESENSOR = "TEMPERATURESENSOR";
		public const string WINDSENSOR = "WINDSENSOR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSensorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSensorTypeEnum(string x) { return new IfcSensorTypeEnum(x); }
		public static implicit operator string(IfcSensorTypeEnum x) { return x.Value; }
	}

	public class IfcSequenceEnum
	{
		public const string START_START = "START_START";
		public const string START_FINISH = "START_FINISH";
		public const string FINISH_START = "FINISH_START";
		public const string FINISH_FINISH = "FINISH_FINISH";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSequenceEnum(string value) { Value = value; }
		public static implicit operator IfcSequenceEnum(string x) { return new IfcSequenceEnum(x); }
		public static implicit operator string(IfcSequenceEnum x) { return x.Value; }
	}

	public class IfcShadingDeviceTypeEnum
	{
		public const string JALOUSIE = "JALOUSIE";
		public const string SHUTTER = "SHUTTER";
		public const string AWNING = "AWNING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcShadingDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcShadingDeviceTypeEnum(string x) { return new IfcShadingDeviceTypeEnum(x); }
		public static implicit operator string(IfcShadingDeviceTypeEnum x) { return x.Value; }
	}

	public class IfcSimplePropertyTemplateTypeEnum
	{
		public const string P_SINGLEVALUE = "P_SINGLEVALUE";
		public const string P_ENUMERATEDVALUE = "P_ENUMERATEDVALUE";
		public const string P_BOUNDEDVALUE = "P_BOUNDEDVALUE";
		public const string P_LISTVALUE = "P_LISTVALUE";
		public const string P_TABLEVALUE = "P_TABLEVALUE";
		public const string P_REFERENCEVALUE = "P_REFERENCEVALUE";
		public const string Q_LENGTH = "Q_LENGTH";
		public const string Q_AREA = "Q_AREA";
		public const string Q_VOLUME = "Q_VOLUME";
		public const string Q_COUNT = "Q_COUNT";
		public const string Q_WEIGHT = "Q_WEIGHT";
		public const string Q_TIME = "Q_TIME";
		private string Value;
		public IfcSimplePropertyTemplateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSimplePropertyTemplateTypeEnum(string x) { return new IfcSimplePropertyTemplateTypeEnum(x); }
		public static implicit operator string(IfcSimplePropertyTemplateTypeEnum x) { return x.Value; }
	}

	public class IfcSlabTypeEnum
	{
		public const string FLOOR = "FLOOR";
		public const string ROOF = "ROOF";
		public const string LANDING = "LANDING";
		public const string BASESLAB = "BASESLAB";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSlabTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSlabTypeEnum(string x) { return new IfcSlabTypeEnum(x); }
		public static implicit operator string(IfcSlabTypeEnum x) { return x.Value; }
	}

	public class IfcSolarDeviceTypeEnum
	{
		public const string SOLARCOLLECTOR = "SOLARCOLLECTOR";
		public const string SOLARPANEL = "SOLARPANEL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSolarDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSolarDeviceTypeEnum(string x) { return new IfcSolarDeviceTypeEnum(x); }
		public static implicit operator string(IfcSolarDeviceTypeEnum x) { return x.Value; }
	}

	public class IfcSpaceHeaterTypeEnum
	{
		public const string CONVECTOR = "CONVECTOR";
		public const string RADIATOR = "RADIATOR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSpaceHeaterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpaceHeaterTypeEnum(string x) { return new IfcSpaceHeaterTypeEnum(x); }
		public static implicit operator string(IfcSpaceHeaterTypeEnum x) { return x.Value; }
	}

	public class IfcSpaceTypeEnum
	{
		public const string SPACE = "SPACE";
		public const string PARKING = "PARKING";
		public const string GFA = "GFA";
		public const string INTERNAL = "INTERNAL";
		public const string EXTERNAL = "EXTERNAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSpaceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpaceTypeEnum(string x) { return new IfcSpaceTypeEnum(x); }
		public static implicit operator string(IfcSpaceTypeEnum x) { return x.Value; }
	}

	public class IfcSpatialZoneTypeEnum
	{
		public const string CONSTRUCTION = "CONSTRUCTION";
		public const string FIRESAFETY = "FIRESAFETY";
		public const string LIGHTING = "LIGHTING";
		public const string OCCUPANCY = "OCCUPANCY";
		public const string SECURITY = "SECURITY";
		public const string THERMAL = "THERMAL";
		public const string TRANSPORT = "TRANSPORT";
		public const string VENTILATION = "VENTILATION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSpatialZoneTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpatialZoneTypeEnum(string x) { return new IfcSpatialZoneTypeEnum(x); }
		public static implicit operator string(IfcSpatialZoneTypeEnum x) { return x.Value; }
	}

	public class IfcStackTerminalTypeEnum
	{
		public const string BIRDCAGE = "BIRDCAGE";
		public const string COWL = "COWL";
		public const string RAINWATERHOPPER = "RAINWATERHOPPER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcStackTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStackTerminalTypeEnum(string x) { return new IfcStackTerminalTypeEnum(x); }
		public static implicit operator string(IfcStackTerminalTypeEnum x) { return x.Value; }
	}

	public class IfcStairFlightTypeEnum
	{
		public const string STRAIGHT = "STRAIGHT";
		public const string WINDER = "WINDER";
		public const string SPIRAL = "SPIRAL";
		public const string CURVED = "CURVED";
		public const string FREEFORM = "FREEFORM";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcStairFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStairFlightTypeEnum(string x) { return new IfcStairFlightTypeEnum(x); }
		public static implicit operator string(IfcStairFlightTypeEnum x) { return x.Value; }
	}

	public class IfcStairTypeEnum
	{
		public const string STRAIGHT_RUN_STAIR = "STRAIGHT_RUN_STAIR";
		public const string TWO_STRAIGHT_RUN_STAIR = "TWO_STRAIGHT_RUN_STAIR";
		public const string QUARTER_WINDING_STAIR = "QUARTER_WINDING_STAIR";
		public const string QUARTER_TURN_STAIR = "QUARTER_TURN_STAIR";
		public const string HALF_WINDING_STAIR = "HALF_WINDING_STAIR";
		public const string HALF_TURN_STAIR = "HALF_TURN_STAIR";
		public const string TWO_QUARTER_WINDING_STAIR = "TWO_QUARTER_WINDING_STAIR";
		public const string TWO_QUARTER_TURN_STAIR = "TWO_QUARTER_TURN_STAIR";
		public const string THREE_QUARTER_WINDING_STAIR = "THREE_QUARTER_WINDING_STAIR";
		public const string THREE_QUARTER_TURN_STAIR = "THREE_QUARTER_TURN_STAIR";
		public const string SPIRAL_STAIR = "SPIRAL_STAIR";
		public const string DOUBLE_RETURN_STAIR = "DOUBLE_RETURN_STAIR";
		public const string CURVED_RUN_STAIR = "CURVED_RUN_STAIR";
		public const string TWO_CURVED_RUN_STAIR = "TWO_CURVED_RUN_STAIR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcStairTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStairTypeEnum(string x) { return new IfcStairTypeEnum(x); }
		public static implicit operator string(IfcStairTypeEnum x) { return x.Value; }
	}

	public class IfcStateEnum
	{
		public const string READWRITE = "READWRITE";
		public const string READONLY = "READONLY";
		public const string LOCKED = "LOCKED";
		public const string READWRITELOCKED = "READWRITELOCKED";
		public const string READONLYLOCKED = "READONLYLOCKED";
		private string Value;
		public IfcStateEnum(string value) { Value = value; }
		public static implicit operator IfcStateEnum(string x) { return new IfcStateEnum(x); }
		public static implicit operator string(IfcStateEnum x) { return x.Value; }
	}

	public class IfcStructuralCurveActivityTypeEnum
	{
		public const string CONST = "CONST";
		public const string LINEAR = "LINEAR";
		public const string POLYGONAL = "POLYGONAL";
		public const string EQUIDISTANT = "EQUIDISTANT";
		public const string SINUS = "SINUS";
		public const string PARABOLA = "PARABOLA";
		public const string DISCRETE = "DISCRETE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcStructuralCurveActivityTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralCurveActivityTypeEnum(string x) { return new IfcStructuralCurveActivityTypeEnum(x); }
		public static implicit operator string(IfcStructuralCurveActivityTypeEnum x) { return x.Value; }
	}

	public class IfcStructuralCurveMemberTypeEnum
	{
		public const string RIGID_JOINED_MEMBER = "RIGID_JOINED_MEMBER";
		public const string PIN_JOINED_MEMBER = "PIN_JOINED_MEMBER";
		public const string CABLE = "CABLE";
		public const string TENSION_MEMBER = "TENSION_MEMBER";
		public const string COMPRESSION_MEMBER = "COMPRESSION_MEMBER";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcStructuralCurveMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralCurveMemberTypeEnum(string x) { return new IfcStructuralCurveMemberTypeEnum(x); }
		public static implicit operator string(IfcStructuralCurveMemberTypeEnum x) { return x.Value; }
	}

	public class IfcStructuralSurfaceActivityTypeEnum
	{
		public const string CONST = "CONST";
		public const string BILINEAR = "BILINEAR";
		public const string DISCRETE = "DISCRETE";
		public const string ISOCONTOUR = "ISOCONTOUR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcStructuralSurfaceActivityTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralSurfaceActivityTypeEnum(string x) { return new IfcStructuralSurfaceActivityTypeEnum(x); }
		public static implicit operator string(IfcStructuralSurfaceActivityTypeEnum x) { return x.Value; }
	}

	public class IfcStructuralSurfaceMemberTypeEnum
	{
		public const string BENDING_ELEMENT = "BENDING_ELEMENT";
		public const string MEMBRANE_ELEMENT = "MEMBRANE_ELEMENT";
		public const string SHELL = "SHELL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcStructuralSurfaceMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralSurfaceMemberTypeEnum(string x) { return new IfcStructuralSurfaceMemberTypeEnum(x); }
		public static implicit operator string(IfcStructuralSurfaceMemberTypeEnum x) { return x.Value; }
	}

	public class IfcSubContractResourceTypeEnum
	{
		public const string PURCHASE = "PURCHASE";
		public const string WORK = "WORK";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSubContractResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSubContractResourceTypeEnum(string x) { return new IfcSubContractResourceTypeEnum(x); }
		public static implicit operator string(IfcSubContractResourceTypeEnum x) { return x.Value; }
	}

	public class IfcSurfaceFeatureTypeEnum
	{
		public const string MARK = "MARK";
		public const string TAG = "TAG";
		public const string TREATMENT = "TREATMENT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSurfaceFeatureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSurfaceFeatureTypeEnum(string x) { return new IfcSurfaceFeatureTypeEnum(x); }
		public static implicit operator string(IfcSurfaceFeatureTypeEnum x) { return x.Value; }
	}

	public class IfcSurfaceSide
	{
		public const string POSITIVE = "POSITIVE";
		public const string NEGATIVE = "NEGATIVE";
		public const string BOTH = "BOTH";
		private string Value;
		public IfcSurfaceSide(string value) { Value = value; }
		public static implicit operator IfcSurfaceSide(string x) { return new IfcSurfaceSide(x); }
		public static implicit operator string(IfcSurfaceSide x) { return x.Value; }
	}

	public class IfcSwitchingDeviceTypeEnum
	{
		public const string CONTACTOR = "CONTACTOR";
		public const string DIMMERSWITCH = "DIMMERSWITCH";
		public const string EMERGENCYSTOP = "EMERGENCYSTOP";
		public const string KEYPAD = "KEYPAD";
		public const string MOMENTARYSWITCH = "MOMENTARYSWITCH";
		public const string SELECTORSWITCH = "SELECTORSWITCH";
		public const string STARTER = "STARTER";
		public const string SWITCHDISCONNECTOR = "SWITCHDISCONNECTOR";
		public const string TOGGLESWITCH = "TOGGLESWITCH";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSwitchingDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSwitchingDeviceTypeEnum(string x) { return new IfcSwitchingDeviceTypeEnum(x); }
		public static implicit operator string(IfcSwitchingDeviceTypeEnum x) { return x.Value; }
	}

	public class IfcSystemFurnitureElementTypeEnum
	{
		public const string PANEL = "PANEL";
		public const string WORKSURFACE = "WORKSURFACE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcSystemFurnitureElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSystemFurnitureElementTypeEnum(string x) { return new IfcSystemFurnitureElementTypeEnum(x); }
		public static implicit operator string(IfcSystemFurnitureElementTypeEnum x) { return x.Value; }
	}

	public class IfcTankTypeEnum
	{
		public const string BASIN = "BASIN";
		public const string BREAKPRESSURE = "BREAKPRESSURE";
		public const string EXPANSION = "EXPANSION";
		public const string FEEDANDEXPANSION = "FEEDANDEXPANSION";
		public const string PRESSUREVESSEL = "PRESSUREVESSEL";
		public const string STORAGE = "STORAGE";
		public const string VESSEL = "VESSEL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTankTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTankTypeEnum(string x) { return new IfcTankTypeEnum(x); }
		public static implicit operator string(IfcTankTypeEnum x) { return x.Value; }
	}

	public class IfcTaskDurationEnum
	{
		public const string ELAPSEDTIME = "ELAPSEDTIME";
		public const string WORKTIME = "WORKTIME";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTaskDurationEnum(string value) { Value = value; }
		public static implicit operator IfcTaskDurationEnum(string x) { return new IfcTaskDurationEnum(x); }
		public static implicit operator string(IfcTaskDurationEnum x) { return x.Value; }
	}

	public class IfcTaskTypeEnum
	{
		public const string ATTENDANCE = "ATTENDANCE";
		public const string CONSTRUCTION = "CONSTRUCTION";
		public const string DEMOLITION = "DEMOLITION";
		public const string DISMANTLE = "DISMANTLE";
		public const string DISPOSAL = "DISPOSAL";
		public const string INSTALLATION = "INSTALLATION";
		public const string LOGISTIC = "LOGISTIC";
		public const string MAINTENANCE = "MAINTENANCE";
		public const string MOVE = "MOVE";
		public const string OPERATION = "OPERATION";
		public const string REMOVAL = "REMOVAL";
		public const string RENOVATION = "RENOVATION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTaskTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTaskTypeEnum(string x) { return new IfcTaskTypeEnum(x); }
		public static implicit operator string(IfcTaskTypeEnum x) { return x.Value; }
	}

	public class IfcTendonAnchorTypeEnum
	{
		public const string COUPLER = "COUPLER";
		public const string FIXED_END = "FIXED_END";
		public const string TENSIONING_END = "TENSIONING_END";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTendonAnchorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTendonAnchorTypeEnum(string x) { return new IfcTendonAnchorTypeEnum(x); }
		public static implicit operator string(IfcTendonAnchorTypeEnum x) { return x.Value; }
	}

	public class IfcTendonTypeEnum
	{
		public const string BAR = "BAR";
		public const string COATED = "COATED";
		public const string STRAND = "STRAND";
		public const string WIRE = "WIRE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTendonTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTendonTypeEnum(string x) { return new IfcTendonTypeEnum(x); }
		public static implicit operator string(IfcTendonTypeEnum x) { return x.Value; }
	}

	public class IfcTextPath
	{
		public const string LEFT = "LEFT";
		public const string RIGHT = "RIGHT";
		public const string UP = "UP";
		public const string DOWN = "DOWN";
		private string Value;
		public IfcTextPath(string value) { Value = value; }
		public static implicit operator IfcTextPath(string x) { return new IfcTextPath(x); }
		public static implicit operator string(IfcTextPath x) { return x.Value; }
	}

	public class IfcTimeSeriesDataTypeEnum
	{
		public const string CONTINUOUS = "CONTINUOUS";
		public const string DISCRETE = "DISCRETE";
		public const string DISCRETEBINARY = "DISCRETEBINARY";
		public const string PIECEWISEBINARY = "PIECEWISEBINARY";
		public const string PIECEWISECONSTANT = "PIECEWISECONSTANT";
		public const string PIECEWISECONTINUOUS = "PIECEWISECONTINUOUS";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTimeSeriesDataTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTimeSeriesDataTypeEnum(string x) { return new IfcTimeSeriesDataTypeEnum(x); }
		public static implicit operator string(IfcTimeSeriesDataTypeEnum x) { return x.Value; }
	}

	public class IfcTransformerTypeEnum
	{
		public const string CURRENT = "CURRENT";
		public const string FREQUENCY = "FREQUENCY";
		public const string INVERTER = "INVERTER";
		public const string RECTIFIER = "RECTIFIER";
		public const string VOLTAGE = "VOLTAGE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTransformerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTransformerTypeEnum(string x) { return new IfcTransformerTypeEnum(x); }
		public static implicit operator string(IfcTransformerTypeEnum x) { return x.Value; }
	}

	public class IfcTransitionCode
	{
		public const string DISCONTINUOUS = "DISCONTINUOUS";
		public const string CONTINUOUS = "CONTINUOUS";
		public const string CONTSAMEGRADIENT = "CONTSAMEGRADIENT";
		public const string CONTSAMEGRADIENTSAMECURVATURE = "CONTSAMEGRADIENTSAMECURVATURE";
		private string Value;
		public IfcTransitionCode(string value) { Value = value; }
		public static implicit operator IfcTransitionCode(string x) { return new IfcTransitionCode(x); }
		public static implicit operator string(IfcTransitionCode x) { return x.Value; }
	}

	public class IfcTransportElementTypeEnum
	{
		public const string ELEVATOR = "ELEVATOR";
		public const string ESCALATOR = "ESCALATOR";
		public const string MOVINGWALKWAY = "MOVINGWALKWAY";
		public const string CRANEWAY = "CRANEWAY";
		public const string LIFTINGGEAR = "LIFTINGGEAR";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTransportElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTransportElementTypeEnum(string x) { return new IfcTransportElementTypeEnum(x); }
		public static implicit operator string(IfcTransportElementTypeEnum x) { return x.Value; }
	}

	public class IfcTrimmingPreference
	{
		public const string CARTESIAN = "CARTESIAN";
		public const string PARAMETER = "PARAMETER";
		public const string UNSPECIFIED = "UNSPECIFIED";
		private string Value;
		public IfcTrimmingPreference(string value) { Value = value; }
		public static implicit operator IfcTrimmingPreference(string x) { return new IfcTrimmingPreference(x); }
		public static implicit operator string(IfcTrimmingPreference x) { return x.Value; }
	}

	public class IfcTubeBundleTypeEnum
	{
		public const string FINNED = "FINNED";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcTubeBundleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTubeBundleTypeEnum(string x) { return new IfcTubeBundleTypeEnum(x); }
		public static implicit operator string(IfcTubeBundleTypeEnum x) { return x.Value; }
	}

	public class IfcUnitEnum
	{
		public const string ABSORBEDDOSEUNIT = "ABSORBEDDOSEUNIT";
		public const string AMOUNTOFSUBSTANCEUNIT = "AMOUNTOFSUBSTANCEUNIT";
		public const string AREAUNIT = "AREAUNIT";
		public const string DOSEEQUIVALENTUNIT = "DOSEEQUIVALENTUNIT";
		public const string ELECTRICCAPACITANCEUNIT = "ELECTRICCAPACITANCEUNIT";
		public const string ELECTRICCHARGEUNIT = "ELECTRICCHARGEUNIT";
		public const string ELECTRICCONDUCTANCEUNIT = "ELECTRICCONDUCTANCEUNIT";
		public const string ELECTRICCURRENTUNIT = "ELECTRICCURRENTUNIT";
		public const string ELECTRICRESISTANCEUNIT = "ELECTRICRESISTANCEUNIT";
		public const string ELECTRICVOLTAGEUNIT = "ELECTRICVOLTAGEUNIT";
		public const string ENERGYUNIT = "ENERGYUNIT";
		public const string FORCEUNIT = "FORCEUNIT";
		public const string FREQUENCYUNIT = "FREQUENCYUNIT";
		public const string ILLUMINANCEUNIT = "ILLUMINANCEUNIT";
		public const string INDUCTANCEUNIT = "INDUCTANCEUNIT";
		public const string LENGTHUNIT = "LENGTHUNIT";
		public const string LUMINOUSFLUXUNIT = "LUMINOUSFLUXUNIT";
		public const string LUMINOUSINTENSITYUNIT = "LUMINOUSINTENSITYUNIT";
		public const string MAGNETICFLUXDENSITYUNIT = "MAGNETICFLUXDENSITYUNIT";
		public const string MAGNETICFLUXUNIT = "MAGNETICFLUXUNIT";
		public const string MASSUNIT = "MASSUNIT";
		public const string PLANEANGLEUNIT = "PLANEANGLEUNIT";
		public const string POWERUNIT = "POWERUNIT";
		public const string PRESSUREUNIT = "PRESSUREUNIT";
		public const string RADIOACTIVITYUNIT = "RADIOACTIVITYUNIT";
		public const string SOLIDANGLEUNIT = "SOLIDANGLEUNIT";
		public const string THERMODYNAMICTEMPERATUREUNIT = "THERMODYNAMICTEMPERATUREUNIT";
		public const string TIMEUNIT = "TIMEUNIT";
		public const string VOLUMEUNIT = "VOLUMEUNIT";
		public const string USERDEFINED = "USERDEFINED";
		private string Value;
		public IfcUnitEnum(string value) { Value = value; }
		public static implicit operator IfcUnitEnum(string x) { return new IfcUnitEnum(x); }
		public static implicit operator string(IfcUnitEnum x) { return x.Value; }
	}

	public class IfcUnitaryControlElementTypeEnum
	{
		public const string ALARMPANEL = "ALARMPANEL";
		public const string CONTROLPANEL = "CONTROLPANEL";
		public const string GASDETECTIONPANEL = "GASDETECTIONPANEL";
		public const string INDICATORPANEL = "INDICATORPANEL";
		public const string MIMICPANEL = "MIMICPANEL";
		public const string HUMIDISTAT = "HUMIDISTAT";
		public const string THERMOSTAT = "THERMOSTAT";
		public const string WEATHERSTATION = "WEATHERSTATION";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcUnitaryControlElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcUnitaryControlElementTypeEnum(string x) { return new IfcUnitaryControlElementTypeEnum(x); }
		public static implicit operator string(IfcUnitaryControlElementTypeEnum x) { return x.Value; }
	}

	public class IfcUnitaryEquipmentTypeEnum
	{
		public const string AIRHANDLER = "AIRHANDLER";
		public const string AIRCONDITIONINGUNIT = "AIRCONDITIONINGUNIT";
		public const string DEHUMIDIFIER = "DEHUMIDIFIER";
		public const string SPLITSYSTEM = "SPLITSYSTEM";
		public const string ROOFTOPUNIT = "ROOFTOPUNIT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcUnitaryEquipmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcUnitaryEquipmentTypeEnum(string x) { return new IfcUnitaryEquipmentTypeEnum(x); }
		public static implicit operator string(IfcUnitaryEquipmentTypeEnum x) { return x.Value; }
	}

	public class IfcValveTypeEnum
	{
		public const string AIRRELEASE = "AIRRELEASE";
		public const string ANTIVACUUM = "ANTIVACUUM";
		public const string CHANGEOVER = "CHANGEOVER";
		public const string CHECK = "CHECK";
		public const string COMMISSIONING = "COMMISSIONING";
		public const string DIVERTING = "DIVERTING";
		public const string DRAWOFFCOCK = "DRAWOFFCOCK";
		public const string DOUBLECHECK = "DOUBLECHECK";
		public const string DOUBLEREGULATING = "DOUBLEREGULATING";
		public const string FAUCET = "FAUCET";
		public const string FLUSHING = "FLUSHING";
		public const string GASCOCK = "GASCOCK";
		public const string GASTAP = "GASTAP";
		public const string ISOLATING = "ISOLATING";
		public const string MIXING = "MIXING";
		public const string PRESSUREREDUCING = "PRESSUREREDUCING";
		public const string PRESSURERELIEF = "PRESSURERELIEF";
		public const string REGULATING = "REGULATING";
		public const string SAFETYCUTOFF = "SAFETYCUTOFF";
		public const string STEAMTRAP = "STEAMTRAP";
		public const string STOPCOCK = "STOPCOCK";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcValveTypeEnum(string value) { Value = value; }
		public static implicit operator IfcValveTypeEnum(string x) { return new IfcValveTypeEnum(x); }
		public static implicit operator string(IfcValveTypeEnum x) { return x.Value; }
	}

	public class IfcVibrationIsolatorTypeEnum
	{
		public const string COMPRESSION = "COMPRESSION";
		public const string SPRING = "SPRING";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcVibrationIsolatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcVibrationIsolatorTypeEnum(string x) { return new IfcVibrationIsolatorTypeEnum(x); }
		public static implicit operator string(IfcVibrationIsolatorTypeEnum x) { return x.Value; }
	}

	public class IfcVoidingFeatureTypeEnum
	{
		public const string CUTOUT = "CUTOUT";
		public const string NOTCH = "NOTCH";
		public const string HOLE = "HOLE";
		public const string MITER = "MITER";
		public const string CHAMFER = "CHAMFER";
		public const string EDGE = "EDGE";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcVoidingFeatureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcVoidingFeatureTypeEnum(string x) { return new IfcVoidingFeatureTypeEnum(x); }
		public static implicit operator string(IfcVoidingFeatureTypeEnum x) { return x.Value; }
	}

	public class IfcWallTypeEnum
	{
		public const string MOVABLE = "MOVABLE";
		public const string PARAPET = "PARAPET";
		public const string PARTITIONING = "PARTITIONING";
		public const string PLUMBINGWALL = "PLUMBINGWALL";
		public const string SHEAR = "SHEAR";
		public const string SOLIDWALL = "SOLIDWALL";
		public const string STANDARD = "STANDARD";
		public const string POLYGONAL = "POLYGONAL";
		public const string ELEMENTEDWALL = "ELEMENTEDWALL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWallTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWallTypeEnum(string x) { return new IfcWallTypeEnum(x); }
		public static implicit operator string(IfcWallTypeEnum x) { return x.Value; }
	}

	public class IfcWasteTerminalTypeEnum
	{
		public const string FLOORTRAP = "FLOORTRAP";
		public const string FLOORWASTE = "FLOORWASTE";
		public const string GULLYSUMP = "GULLYSUMP";
		public const string GULLYTRAP = "GULLYTRAP";
		public const string ROOFDRAIN = "ROOFDRAIN";
		public const string WASTEDISPOSALUNIT = "WASTEDISPOSALUNIT";
		public const string WASTETRAP = "WASTETRAP";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWasteTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWasteTerminalTypeEnum(string x) { return new IfcWasteTerminalTypeEnum(x); }
		public static implicit operator string(IfcWasteTerminalTypeEnum x) { return x.Value; }
	}

	public class IfcWindowPanelOperationEnum
	{
		public const string SIDEHUNGRIGHTHAND = "SIDEHUNGRIGHTHAND";
		public const string SIDEHUNGLEFTHAND = "SIDEHUNGLEFTHAND";
		public const string TILTANDTURNRIGHTHAND = "TILTANDTURNRIGHTHAND";
		public const string TILTANDTURNLEFTHAND = "TILTANDTURNLEFTHAND";
		public const string TOPHUNG = "TOPHUNG";
		public const string BOTTOMHUNG = "BOTTOMHUNG";
		public const string PIVOTHORIZONTAL = "PIVOTHORIZONTAL";
		public const string PIVOTVERTICAL = "PIVOTVERTICAL";
		public const string SLIDINGHORIZONTAL = "SLIDINGHORIZONTAL";
		public const string SLIDINGVERTICAL = "SLIDINGVERTICAL";
		public const string REMOVABLECASEMENT = "REMOVABLECASEMENT";
		public const string FIXEDCASEMENT = "FIXEDCASEMENT";
		public const string OTHEROPERATION = "OTHEROPERATION";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWindowPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IfcWindowPanelOperationEnum(string x) { return new IfcWindowPanelOperationEnum(x); }
		public static implicit operator string(IfcWindowPanelOperationEnum x) { return x.Value; }
	}

	public class IfcWindowPanelPositionEnum
	{
		public const string LEFT = "LEFT";
		public const string MIDDLE = "MIDDLE";
		public const string RIGHT = "RIGHT";
		public const string BOTTOM = "BOTTOM";
		public const string TOP = "TOP";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWindowPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IfcWindowPanelPositionEnum(string x) { return new IfcWindowPanelPositionEnum(x); }
		public static implicit operator string(IfcWindowPanelPositionEnum x) { return x.Value; }
	}

	public class IfcWindowStyleConstructionEnum
	{
		public const string ALUMINIUM = "ALUMINIUM";
		public const string HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
		public const string STEEL = "STEEL";
		public const string WOOD = "WOOD";
		public const string ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
		public const string PLASTIC = "PLASTIC";
		public const string OTHER_CONSTRUCTION = "OTHER_CONSTRUCTION";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWindowStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcWindowStyleConstructionEnum(string x) { return new IfcWindowStyleConstructionEnum(x); }
		public static implicit operator string(IfcWindowStyleConstructionEnum x) { return x.Value; }
	}

	public class IfcWindowStyleOperationEnum
	{
		public const string SINGLE_PANEL = "SINGLE_PANEL";
		public const string DOUBLE_PANEL_VERTICAL = "DOUBLE_PANEL_VERTICAL";
		public const string DOUBLE_PANEL_HORIZONTAL = "DOUBLE_PANEL_HORIZONTAL";
		public const string TRIPLE_PANEL_VERTICAL = "TRIPLE_PANEL_VERTICAL";
		public const string TRIPLE_PANEL_BOTTOM = "TRIPLE_PANEL_BOTTOM";
		public const string TRIPLE_PANEL_TOP = "TRIPLE_PANEL_TOP";
		public const string TRIPLE_PANEL_LEFT = "TRIPLE_PANEL_LEFT";
		public const string TRIPLE_PANEL_RIGHT = "TRIPLE_PANEL_RIGHT";
		public const string TRIPLE_PANEL_HORIZONTAL = "TRIPLE_PANEL_HORIZONTAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWindowStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IfcWindowStyleOperationEnum(string x) { return new IfcWindowStyleOperationEnum(x); }
		public static implicit operator string(IfcWindowStyleOperationEnum x) { return x.Value; }
	}

	public class IfcWindowTypeEnum
	{
		public const string WINDOW = "WINDOW";
		public const string SKYLIGHT = "SKYLIGHT";
		public const string LIGHTDOME = "LIGHTDOME";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWindowTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWindowTypeEnum(string x) { return new IfcWindowTypeEnum(x); }
		public static implicit operator string(IfcWindowTypeEnum x) { return x.Value; }
	}

	public class IfcWindowTypePartitioningEnum
	{
		public const string SINGLE_PANEL = "SINGLE_PANEL";
		public const string DOUBLE_PANEL_VERTICAL = "DOUBLE_PANEL_VERTICAL";
		public const string DOUBLE_PANEL_HORIZONTAL = "DOUBLE_PANEL_HORIZONTAL";
		public const string TRIPLE_PANEL_VERTICAL = "TRIPLE_PANEL_VERTICAL";
		public const string TRIPLE_PANEL_BOTTOM = "TRIPLE_PANEL_BOTTOM";
		public const string TRIPLE_PANEL_TOP = "TRIPLE_PANEL_TOP";
		public const string TRIPLE_PANEL_LEFT = "TRIPLE_PANEL_LEFT";
		public const string TRIPLE_PANEL_RIGHT = "TRIPLE_PANEL_RIGHT";
		public const string TRIPLE_PANEL_HORIZONTAL = "TRIPLE_PANEL_HORIZONTAL";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWindowTypePartitioningEnum(string value) { Value = value; }
		public static implicit operator IfcWindowTypePartitioningEnum(string x) { return new IfcWindowTypePartitioningEnum(x); }
		public static implicit operator string(IfcWindowTypePartitioningEnum x) { return x.Value; }
	}

	public class IfcWorkCalendarTypeEnum
	{
		public const string FIRSTSHIFT = "FIRSTSHIFT";
		public const string SECONDSHIFT = "SECONDSHIFT";
		public const string THIRDSHIFT = "THIRDSHIFT";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWorkCalendarTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWorkCalendarTypeEnum(string x) { return new IfcWorkCalendarTypeEnum(x); }
		public static implicit operator string(IfcWorkCalendarTypeEnum x) { return x.Value; }
	}

	public class IfcWorkPlanTypeEnum
	{
		public const string ACTUAL = "ACTUAL";
		public const string BASELINE = "BASELINE";
		public const string PLANNED = "PLANNED";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWorkPlanTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWorkPlanTypeEnum(string x) { return new IfcWorkPlanTypeEnum(x); }
		public static implicit operator string(IfcWorkPlanTypeEnum x) { return x.Value; }
	}

	public class IfcWorkScheduleTypeEnum
	{
		public const string ACTUAL = "ACTUAL";
		public const string BASELINE = "BASELINE";
		public const string PLANNED = "PLANNED";
		public const string USERDEFINED = "USERDEFINED";
		public const string NOTDEFINED = "NOTDEFINED";
		private string Value;
		public IfcWorkScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWorkScheduleTypeEnum(string x) { return new IfcWorkScheduleTypeEnum(x); }
		public static implicit operator string(IfcWorkScheduleTypeEnum x) { return x.Value; }
	}

	public interface IfcActorSelect
	{
		List<IfcActorRole> GetRoles();
	}

	public interface IfcAppliedValueSelect
	{
	}

	public interface IfcAxis2Placement
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
		IfcCartesianPoint GetLocation();
		IfcDimensionCount GetDim();
		IfcDirection GetRefDirection();
		List<IfcDirection> GetP();
	}

	public interface IfcBendingParameterSelect
	{
	}

	public interface IfcBooleanOperand
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
		IfcDimensionCount GetDim();
	}

	public interface IfcClassificationReferenceSelect
	{
		IfcLabel GetName();
		IfcText GetDescription();
		IfcURIReference GetLocation();
		List<IfcClassificationReference> GetHasReferences();
	}

	public interface IfcClassificationSelect
	{
		IfcLabel GetName();
		IfcText GetDescription();
		IfcURIReference GetLocation();
		List<IfcClassificationReference> GetHasReferences();
	}

	public interface IfcColour : IfcFillStyleSelect
	{
		IfcLabel GetName();
	}

	public interface IfcColourOrFactor
	{
	}

	public interface IfcCoordinateReferenceSystemSelect
	{
		List<IfcCoordinateOperation> GetHasCoordinateOperation();
	}

	public interface IfcCsgSelect
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
		IfcDimensionCount GetDim();
	}

	public interface IfcCurveFontOrScaledCurveFontSelect
	{
	}

	public interface IfcCurveOnSurface
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
		IfcDimensionCount GetDim();
	}

	public interface IfcCurveOrEdgeCurve
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
	}

	public interface IfcCurveStyleFontSelect : IfcCurveFontOrScaledCurveFontSelect
	{
		IfcLabel GetName();
	}

	public interface IfcDefinitionSelect
	{
		IfcGloballyUniqueId GetGlobalId();
		IfcOwnerHistory GetOwnerHistory();
		IfcLabel GetName();
		IfcText GetDescription();
		List<IfcRelDeclares> GetHasContext();
		List<IfcRelAssociates> GetHasAssociations();
	}

	public interface IfcDerivedMeasureValue : IfcValue
	{
	}

	public interface IfcDocumentSelect
	{
		IfcIdentifier GetIdentification();
		IfcLabel GetName();
		IfcText GetDescription();
		IfcURIReference GetLocation();
	}

	public interface IfcFillStyleSelect
	{
	}

	public interface IfcGeometricSetSelect
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
		IfcDimensionCount GetDim();
	}

	public interface IfcGridPlacementDirectionSelect
	{
	}

	public interface IfcHatchLineDistanceSelect
	{
	}

	public interface IfcLayeredItem
	{
	}

	public interface IfcLibrarySelect
	{
		IfcLabel GetName();
		IfcURIReference GetLocation();
		IfcText GetDescription();
	}

	public interface IfcLightDistributionDataSourceSelect
	{
	}

	public interface IfcMaterialSelect
	{
	}

	public interface IfcMeasureValue : IfcValue
	{
	}

	public interface IfcMetricValueSelect
	{
	}

	public interface IfcModulusOfRotationalSubgradeReactionSelect
	{
	}

	public interface IfcModulusOfSubgradeReactionSelect
	{
	}

	public interface IfcModulusOfTranslationalSubgradeReactionSelect
	{
	}

	public interface IfcObjectReferenceSelect
	{
	}

	public interface IfcPointOrVertexPoint
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
	}

	public interface IfcPresentationStyleSelect
	{
	}

	public interface IfcProcessSelect
	{
		IfcGloballyUniqueId GetGlobalId();
		IfcOwnerHistory GetOwnerHistory();
		IfcLabel GetName();
		IfcText GetDescription();
		List<IfcRelAssigns> GetHasAssignments();
		List<IfcRelNests> GetNests();
		List<IfcRelNests> GetIsNestedBy();
		List<IfcRelDeclares> GetHasContext();
		List<IfcRelAggregates> GetIsDecomposedBy();
		List<IfcRelAggregates> GetDecomposes();
		List<IfcRelAssociates> GetHasAssociations();
		IfcIdentifier GetIdentification();
		IfcText GetLongDescription();
		List<IfcRelAssignsToProcess> GetOperatesOn();
	}

	public interface IfcProductRepresentationSelect
	{
		List<IfcShapeAspect> GetHasShapeAspects();
	}

	public interface IfcProductSelect
	{
		IfcGloballyUniqueId GetGlobalId();
		IfcOwnerHistory GetOwnerHistory();
		IfcLabel GetName();
		IfcText GetDescription();
		List<IfcRelAssigns> GetHasAssignments();
		List<IfcRelNests> GetNests();
		List<IfcRelNests> GetIsNestedBy();
		List<IfcRelDeclares> GetHasContext();
		List<IfcRelAggregates> GetIsDecomposedBy();
		List<IfcRelAggregates> GetDecomposes();
		List<IfcRelAssociates> GetHasAssociations();
		List<IfcRelAssignsToProduct> GetReferencedBy();
	}

	public interface IfcPropertySetDefinitionSelect
	{
	}

	public interface IfcResourceObjectSelect
	{
	}

	public interface IfcResourceSelect
	{
		IfcGloballyUniqueId GetGlobalId();
		IfcOwnerHistory GetOwnerHistory();
		IfcLabel GetName();
		IfcText GetDescription();
		List<IfcRelAssigns> GetHasAssignments();
		List<IfcRelNests> GetNests();
		List<IfcRelNests> GetIsNestedBy();
		List<IfcRelDeclares> GetHasContext();
		List<IfcRelAggregates> GetIsDecomposedBy();
		List<IfcRelAggregates> GetDecomposes();
		List<IfcRelAssociates> GetHasAssociations();
		IfcIdentifier GetIdentification();
		IfcText GetLongDescription();
		List<IfcRelAssignsToResource> GetResourceOf();
		List<IfcAppliedValue> GetBaseCosts();
		IfcPhysicalQuantity GetBaseQuantity();
	}

	public interface IfcRotationalStiffnessSelect
	{
	}

	public interface IfcSegmentIndexSelect
	{
		List<IfcPositiveInteger> GetValue();
	}

	public interface IfcShell
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
		List<IfcFace> GetCfsFaces();
	}

	public interface IfcSimpleValue : IfcValue
	{
	}

	public interface IfcSizeSelect
	{
	}

	public interface IfcSolidOrShell
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
	}

	public interface IfcSpaceBoundarySelect
	{
		IfcGloballyUniqueId GetGlobalId();
		IfcOwnerHistory GetOwnerHistory();
		IfcLabel GetName();
		IfcText GetDescription();
		List<IfcRelAssigns> GetHasAssignments();
		List<IfcRelNests> GetNests();
		List<IfcRelNests> GetIsNestedBy();
		List<IfcRelDeclares> GetHasContext();
		List<IfcRelAggregates> GetIsDecomposedBy();
		List<IfcRelAggregates> GetDecomposes();
		List<IfcRelAssociates> GetHasAssociations();
		IfcLabel GetObjectType();
		List<IfcRelDefinesByObject> GetIsDeclaredBy();
		List<IfcRelDefinesByObject> GetDeclares();
		List<IfcRelDefinesByType> GetIsTypedBy();
		List<IfcRelDefinesByProperties> GetIsDefinedBy();
		IfcObjectPlacement GetObjectPlacement();
		IfcProductRepresentation GetRepresentation();
		List<IfcRelAssignsToProduct> GetReferencedBy();
		IfcLabel GetLongName();
		List<IfcRelContainedInSpatialStructure> GetContainsElements();
		List<IfcRelServicesBuildings> GetServicedBySystems();
		List<IfcRelReferencedInSpatialStructure> GetReferencesElements();
		List<IfcRelSpaceBoundary> GetBoundedBy();
	}

	public interface IfcSpecularHighlightSelect
	{
	}

	public interface IfcStructuralActivityAssignmentSelect
	{
		IfcGloballyUniqueId GetGlobalId();
		IfcOwnerHistory GetOwnerHistory();
		IfcLabel GetName();
		IfcText GetDescription();
		List<IfcRelAssigns> GetHasAssignments();
		List<IfcRelNests> GetNests();
		List<IfcRelNests> GetIsNestedBy();
		List<IfcRelDeclares> GetHasContext();
		List<IfcRelAggregates> GetIsDecomposedBy();
		List<IfcRelAggregates> GetDecomposes();
		List<IfcRelAssociates> GetHasAssociations();
		IfcLabel GetObjectType();
		List<IfcRelDefinesByObject> GetIsDeclaredBy();
		List<IfcRelDefinesByObject> GetDeclares();
		List<IfcRelDefinesByType> GetIsTypedBy();
		List<IfcRelDefinesByProperties> GetIsDefinedBy();
		IfcObjectPlacement GetObjectPlacement();
		IfcProductRepresentation GetRepresentation();
		List<IfcRelAssignsToProduct> GetReferencedBy();
	}

	public interface IfcStyleAssignmentSelect
	{
	}

	public interface IfcSurfaceOrFaceSurface
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
	}

	public interface IfcSurfaceStyleElementSelect
	{
	}

	public interface IfcTextFontSelect
	{
		IfcLabel GetName();
	}

	public interface IfcTimeOrRatioSelect
	{
	}

	public interface IfcTranslationalStiffnessSelect
	{
	}

	public interface IfcTrimmingSelect
	{
	}

	public interface IfcUnit
	{
	}

	public interface IfcValue : IfcAppliedValueSelect, IfcMetricValueSelect
	{
	}

	public interface IfcVectorOrDirection
	{
		List<IfcPresentationLayerAssignment> GetLayerAssignment();
		List<IfcStyledItem> GetStyledByItem();
		IfcDimensionCount GetDim();
	}

	public interface IfcWarpingStiffnessSelect
	{
	}

	public class IfcActionRequest : IfcControl, IfcDefinitionSelect
	{
		public IfcActionRequestTypeEnum PredefinedType { get; set; }
		public IfcLabel Status { get; set; }
		public IfcText LongDescription { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcActionRequest() { }

		public IfcActionRequest(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcActionRequestTypeEnum PredefinedType, IfcLabel Status, IfcText LongDescription)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
	}

	public class IfcActor : IfcObject, IfcDefinitionSelect
	{
		public IfcActorSelect TheActor { get; set; }
		public List<IfcRelAssignsToActor> IsActingUpon => Model.GetInstances<IfcRelAssignsToActor>().Where(e => e.RelatingActor == this).ToList();
		// INVERSE : IsActingUpon : SET [0:?] OF IfcRelAssignsToActor FOR RelatingActor;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcActor() { }

		public IfcActor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcActorSelect TheActor)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.TheActor = TheActor;
		}
	}

	public class IfcActorRole : IfcBase, IfcResourceObjectSelect
	{
		public IfcRoleEnum Role { get; set; }
		public IfcLabel UserDefinedRole { get; set; }
		public IfcText Description { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReference => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public IfcActorRole() { }

		public IfcActorRole(IfcRoleEnum Role, IfcLabel UserDefinedRole, IfcText Description)
		{
			this.Role = Role;
			this.UserDefinedRole = UserDefinedRole;
			this.Description = Description;
		}
	}

	public class IfcActuator : IfcDistributionControlElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcActuatorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcActuator() { }

		public IfcActuator(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcActuatorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcActuatorType : IfcDistributionControlElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcActuatorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcActuatorType() { }

		public IfcActuatorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcActuatorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcAddress : IfcBase, IfcObjectReferenceSelect
	{
		public IfcAddressTypeEnum Purpose { get; set; }
		public IfcText Description { get; set; }
		public IfcLabel UserDefinedPurpose { get; set; }
		public List<IfcPerson> OfPerson => Model.GetInstances<IfcPerson>().Where(e => e.Addresses.Contains(this)).ToList();
		// INVERSE : OfPerson : SET [0:?] OF IfcPerson FOR Addresses;
		public List<IfcOrganization> OfOrganization => Model.GetInstances<IfcOrganization>().Where(e => e.Addresses.Contains(this)).ToList();
		// INVERSE : OfOrganization : SET [0:?] OF IfcOrganization FOR Addresses;
		public IfcAddress() { }

		public IfcAddress(IfcAddressTypeEnum Purpose, IfcText Description, IfcLabel UserDefinedPurpose)
		{
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
		}
	}

	public class IfcAdvancedBrep : IfcManifoldSolidBrep, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcAdvancedBrep() { }

		public IfcAdvancedBrep(IfcClosedShell Outer)
		{
			this.Outer = Outer;
		}
	}

	public class IfcAdvancedBrepWithVoids : IfcAdvancedBrep, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public List<IfcClosedShell> Voids { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcAdvancedBrepWithVoids() { }

		public IfcAdvancedBrepWithVoids(IfcClosedShell Outer, List<IfcClosedShell> Voids)
		{
			this.Outer = Outer;
			this.Voids = Voids;
		}
	}

	public class IfcAdvancedFace : IfcFaceSurface, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public IfcAdvancedFace() { }

		public IfcAdvancedFace(List<IfcFaceBound> Bounds, IfcSurface FaceSurface, IfcBoolean SameSense)
		{
			this.Bounds = Bounds;
			this.FaceSurface = FaceSurface;
			this.SameSense = SameSense;
		}
	}

	public class IfcAirTerminal : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcAirTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcAirTerminal() { }

		public IfcAirTerminal(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcAirTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAirTerminalBox : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcAirTerminalBoxTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcAirTerminalBox() { }

		public IfcAirTerminalBox(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcAirTerminalBoxTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAirTerminalBoxType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcAirTerminalBoxTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcAirTerminalBoxType() { }

		public IfcAirTerminalBoxType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcAirTerminalBoxTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAirTerminalType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcAirTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcAirTerminalType() { }

		public IfcAirTerminalType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcAirTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAirToAirHeatRecovery : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcAirToAirHeatRecoveryTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcAirToAirHeatRecovery() { }

		public IfcAirToAirHeatRecovery(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcAirToAirHeatRecoveryTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAirToAirHeatRecoveryType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcAirToAirHeatRecoveryTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcAirToAirHeatRecoveryType() { }

		public IfcAirToAirHeatRecoveryType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcAirToAirHeatRecoveryTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAlarm : IfcDistributionControlElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcAlarmTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcAlarm() { }

		public IfcAlarm(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcAlarmTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAlarmType : IfcDistributionControlElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcAlarmTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcAlarmType() { }

		public IfcAlarmType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcAlarmTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAnnotation : IfcProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public List<IfcRelContainedInSpatialStructure> ContainedInStructure => Model.GetInstances<IfcRelContainedInSpatialStructure>().Where(e => e.RelatedElements.Contains(this)).ToList();
		// INVERSE : ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcAnnotation() { }

		public IfcAnnotation(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
	}

	public class IfcAnnotationFillArea : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcCurve OuterBoundary { get; set; }
		public List<IfcCurve> InnerBoundaries { get; set; }
		public IfcAnnotationFillArea() { }

		public IfcAnnotationFillArea(IfcCurve OuterBoundary, List<IfcCurve> InnerBoundaries)
		{
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
	}

	public class IfcApplication : IfcBase
	{
		public IfcOrganization ApplicationDeveloper { get; set; }
		public IfcLabel Version { get; set; }
		public IfcLabel ApplicationFullName { get; set; }
		public IfcIdentifier ApplicationIdentifier { get; set; }
		public IfcApplication() { }

		public IfcApplication(IfcOrganization ApplicationDeveloper, IfcLabel Version, IfcLabel ApplicationFullName, IfcIdentifier ApplicationIdentifier)
		{
			this.ApplicationDeveloper = ApplicationDeveloper;
			this.Version = Version;
			this.ApplicationFullName = ApplicationFullName;
			this.ApplicationIdentifier = ApplicationIdentifier;
		}
	}

	public class IfcAppliedValue : IfcBase, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcAppliedValueSelect AppliedValue { get; set; }
		public IfcMeasureWithUnit UnitBasis { get; set; }
		public IfcDate ApplicableDate { get; set; }
		public IfcDate FixedUntilDate { get; set; }
		public IfcLabel Category { get; set; }
		public IfcLabel Condition { get; set; }
		public IfcArithmeticOperatorEnum ArithmeticOperator { get; set; }
		public List<IfcAppliedValue> Components { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReference => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public IfcAppliedValue() { }

		public IfcAppliedValue(IfcLabel Name, IfcText Description, IfcAppliedValueSelect AppliedValue, IfcMeasureWithUnit UnitBasis, IfcDate ApplicableDate, IfcDate FixedUntilDate, IfcLabel Category, IfcLabel Condition, IfcArithmeticOperatorEnum ArithmeticOperator, List<IfcAppliedValue> Components)
		{
			this.Name = Name;
			this.Description = Description;
			this.AppliedValue = AppliedValue;
			this.UnitBasis = UnitBasis;
			this.ApplicableDate = ApplicableDate;
			this.FixedUntilDate = FixedUntilDate;
			this.Category = Category;
			this.Condition = Condition;
			this.ArithmeticOperator = ArithmeticOperator;
			this.Components = Components;
		}
	}

	public class IfcApproval : IfcBase, IfcResourceObjectSelect
	{
		public IfcIdentifier Identifier { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcDateTime TimeOfApproval { get; set; }
		public IfcLabel Status { get; set; }
		public IfcLabel Level { get; set; }
		public IfcText Qualifier { get; set; }
		public IfcActorSelect RequestingApproval { get; set; }
		public IfcActorSelect GivingApproval { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReferences => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public List<IfcRelAssociatesApproval> ApprovedObjects => Model.GetInstances<IfcRelAssociatesApproval>().Where(e => e.RelatingApproval == this).ToList();
		// INVERSE : ApprovedObjects : SET [0:?] OF IfcRelAssociatesApproval FOR RelatingApproval;
		public List<IfcResourceApprovalRelationship> ApprovedResources => Model.GetInstances<IfcResourceApprovalRelationship>().Where(e => e.RelatingApproval == this).ToList();
		// INVERSE : ApprovedResources : SET [0:?] OF IfcResourceApprovalRelationship FOR RelatingApproval;
		public List<IfcApprovalRelationship> IsRelatedWith => Model.GetInstances<IfcApprovalRelationship>().Where(e => e.RelatedApprovals.Contains(this)).ToList();
		// INVERSE : IsRelatedWith : SET [0:?] OF IfcApprovalRelationship FOR RelatedApprovals;
		public List<IfcApprovalRelationship> Relates => Model.GetInstances<IfcApprovalRelationship>().Where(e => e.RelatingApproval == this).ToList();
		// INVERSE : Relates : SET [0:?] OF IfcApprovalRelationship FOR RelatingApproval;
		public IfcApproval() { }

		public IfcApproval(IfcIdentifier Identifier, IfcLabel Name, IfcText Description, IfcDateTime TimeOfApproval, IfcLabel Status, IfcLabel Level, IfcText Qualifier, IfcActorSelect RequestingApproval, IfcActorSelect GivingApproval)
		{
			this.Identifier = Identifier;
			this.Name = Name;
			this.Description = Description;
			this.TimeOfApproval = TimeOfApproval;
			this.Status = Status;
			this.Level = Level;
			this.Qualifier = Qualifier;
			this.RequestingApproval = RequestingApproval;
			this.GivingApproval = GivingApproval;
		}
	}

	public class IfcApprovalRelationship : IfcResourceLevelRelationship
	{
		public IfcApproval RelatingApproval { get; set; }
		public List<IfcApproval> RelatedApprovals { get; set; }
		public IfcApprovalRelationship() { }

		public IfcApprovalRelationship(IfcLabel Name, IfcText Description, IfcApproval RelatingApproval, List<IfcApproval> RelatedApprovals)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingApproval = RelatingApproval;
			this.RelatedApprovals = RelatedApprovals;
		}
	}

	public class IfcArbitraryClosedProfileDef : IfcProfileDef, IfcResourceObjectSelect
	{
		public IfcCurve OuterCurve { get; set; }
		public IfcArbitraryClosedProfileDef() { }

		public IfcArbitraryClosedProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcCurve OuterCurve)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.OuterCurve = OuterCurve;
		}
	}

	public class IfcArbitraryOpenProfileDef : IfcProfileDef, IfcResourceObjectSelect
	{
		public IfcBoundedCurve Curve { get; set; }
		public IfcArbitraryOpenProfileDef() { }

		public IfcArbitraryOpenProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcBoundedCurve Curve)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Curve = Curve;
		}
	}

	public class IfcArbitraryProfileDefWithVoids : IfcArbitraryClosedProfileDef, IfcResourceObjectSelect
	{
		public List<IfcCurve> InnerCurves { get; set; }
		public IfcArbitraryProfileDefWithVoids() { }

		public IfcArbitraryProfileDefWithVoids(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcCurve OuterCurve, List<IfcCurve> InnerCurves)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.OuterCurve = OuterCurve;
			this.InnerCurves = InnerCurves;
		}
	}

	public class IfcAsset : IfcGroup, IfcDefinitionSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcCostValue OriginalValue { get; set; }
		public IfcCostValue CurrentValue { get; set; }
		public IfcCostValue TotalReplacementCost { get; set; }
		public IfcActorSelect Owner { get; set; }
		public IfcActorSelect User { get; set; }
		public IfcPerson ResponsiblePerson { get; set; }
		public IfcDate IncorporationDate { get; set; }
		public IfcCostValue DepreciatedValue { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcAsset() { }

		public IfcAsset(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcCostValue OriginalValue, IfcCostValue CurrentValue, IfcCostValue TotalReplacementCost, IfcActorSelect Owner, IfcActorSelect User, IfcPerson ResponsiblePerson, IfcDate IncorporationDate, IfcCostValue DepreciatedValue)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.OriginalValue = OriginalValue;
			this.CurrentValue = CurrentValue;
			this.TotalReplacementCost = TotalReplacementCost;
			this.Owner = Owner;
			this.User = User;
			this.ResponsiblePerson = ResponsiblePerson;
			this.IncorporationDate = IncorporationDate;
			this.DepreciatedValue = DepreciatedValue;
		}
	}

	public class IfcAsymmetricIShapeProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure BottomFlangeWidth { get; set; }
		public IfcPositiveLengthMeasure OverallDepth { get; set; }
		public IfcPositiveLengthMeasure WebThickness { get; set; }
		public IfcPositiveLengthMeasure BottomFlangeThickness { get; set; }
		public IfcNonNegativeLengthMeasure BottomFlangeFilletRadius { get; set; }
		public IfcPositiveLengthMeasure TopFlangeWidth { get; set; }
		public IfcPositiveLengthMeasure TopFlangeThickness { get; set; }
		public IfcNonNegativeLengthMeasure TopFlangeFilletRadius { get; set; }
		public IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius { get; set; }
		public IfcPlaneAngleMeasure BottomFlangeSlope { get; set; }
		public IfcNonNegativeLengthMeasure TopFlangeEdgeRadius { get; set; }
		public IfcPlaneAngleMeasure TopFlangeSlope { get; set; }
		public IfcAsymmetricIShapeProfileDef() { }

		public IfcAsymmetricIShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure BottomFlangeWidth, IfcPositiveLengthMeasure OverallDepth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure BottomFlangeThickness, IfcNonNegativeLengthMeasure BottomFlangeFilletRadius, IfcPositiveLengthMeasure TopFlangeWidth, IfcPositiveLengthMeasure TopFlangeThickness, IfcNonNegativeLengthMeasure TopFlangeFilletRadius, IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius, IfcPlaneAngleMeasure BottomFlangeSlope, IfcNonNegativeLengthMeasure TopFlangeEdgeRadius, IfcPlaneAngleMeasure TopFlangeSlope)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.BottomFlangeWidth = BottomFlangeWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.BottomFlangeThickness = BottomFlangeThickness;
			this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
			this.TopFlangeWidth = TopFlangeWidth;
			this.TopFlangeThickness = TopFlangeThickness;
			this.TopFlangeFilletRadius = TopFlangeFilletRadius;
			this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
			this.BottomFlangeSlope = BottomFlangeSlope;
			this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
			this.TopFlangeSlope = TopFlangeSlope;
		}
	}

	public class IfcAudioVisualAppliance : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcAudioVisualApplianceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcAudioVisualAppliance() { }

		public IfcAudioVisualAppliance(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcAudioVisualApplianceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAudioVisualApplianceType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcAudioVisualApplianceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcAudioVisualApplianceType() { }

		public IfcAudioVisualApplianceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcAudioVisualApplianceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcAxis1Placement : IfcPlacement, IfcLayeredItem
	{
		public IfcDirection Axis { get; set; }
		public IfcDirection Z => GetDirection(0, 0, 1);
		// DERIVE : Z : IfcDirection := NVL (IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
		public IfcAxis1Placement() { }

		public IfcAxis1Placement(IfcCartesianPoint Location, IfcDirection Axis)
		{
			this.Location = Location;
			this.Axis = Axis;
		}
	}

	public class IfcAxis2Placement2D : IfcPlacement, IfcAxis2Placement, IfcLayeredItem
	{
		public IfcDirection RefDirection { get; set; }
		public List<IfcDirection> P => IfcBuild2Axes(RefDirection);
		// DERIVE : P : LIST [2:2] OF IfcDirection := IfcBuild2Axes(RefDirection);
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual IfcCartesianPoint GetLocation() { return Location; }
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public virtual IfcDirection GetRefDirection() { return RefDirection; }
		public virtual List<IfcDirection> GetP() { return P; }
		public IfcAxis2Placement2D() { }

		public IfcAxis2Placement2D(IfcCartesianPoint Location, IfcDirection RefDirection)
		{
			this.Location = Location;
			this.RefDirection = RefDirection;
		}
	}

	public class IfcAxis2Placement3D : IfcPlacement, IfcAxis2Placement, IfcLayeredItem
	{
		public IfcDirection Axis { get; set; }
		public IfcDirection RefDirection { get; set; }
		public List<IfcDirection> P => Axis != null ? IfcBuildAxes(Axis, RefDirection) : new List<IfcDirection>() { GetDirection(1, 0, 0), GetDirection(0, 1, 0), GetDirection(0, 0, 1) };
		// DERIVE : P : LIST [3:3] OF IfcDirection := IfcBuildAxes(Axis, RefDirection);
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual IfcCartesianPoint GetLocation() { return Location; }
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public virtual IfcDirection GetRefDirection() { return RefDirection; }
		public virtual List<IfcDirection> GetP() { return P; }
		public IfcAxis2Placement3D() { }

		public IfcAxis2Placement3D(IfcCartesianPoint Location, IfcDirection Axis, IfcDirection RefDirection)
		{
			this.Location = Location;
			this.Axis = Axis;
			this.RefDirection = RefDirection;
		}
	}

	public abstract class IfcBSplineCurve : IfcBoundedCurve, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcInteger Degree { get; set; }
		public List<IfcCartesianPoint> ControlPointsList { get; set; }
		public IfcBSplineCurveForm CurveForm { get; set; }
		public IfcLogical ClosedCurve { get; set; }
		public IfcLogical SelfIntersect { get; set; }
		public IfcInteger UpperIndexOnControlPoints => ControlPointsList.Count;
		// DERIVE : UpperIndexOnControlPoints : IfcInteger := (SIZEOF(ControlPointsList) - 1);
		public List<IfcCartesianPoint> ControlPoints => IfcListToArray(ControlPointsList, 0, UpperIndexOnControlPoints);
		// DERIVE : ControlPoints : ARRAY [0:UpperIndexOnControlPoints] OF IfcCartesianPoint := IfcListToArray(ControlPointsList,0,UpperIndexOnControlPoints);
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcBSplineCurve() { }

		public IfcBSplineCurve(IfcInteger Degree, List<IfcCartesianPoint> ControlPointsList, IfcBSplineCurveForm CurveForm, IfcLogical ClosedCurve, IfcLogical SelfIntersect)
		{
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcBSplineCurveWithKnots : IfcBSplineCurve, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public List<IfcInteger> KnotMultiplicities { get; set; }
		public List<IfcParameterValue> Knots { get; set; }
		public IfcKnotType KnotSpec { get; set; }
		public IfcInteger UpperIndexOnKnots => Knots.Count;
		// DERIVE : UpperIndexOnKnots : IfcInteger := SIZEOF(Knots);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcBSplineCurveWithKnots() { }

		public IfcBSplineCurveWithKnots(IfcInteger Degree, List<IfcCartesianPoint> ControlPointsList, IfcBSplineCurveForm CurveForm, IfcLogical ClosedCurve, IfcLogical SelfIntersect, List<IfcInteger> KnotMultiplicities, List<IfcParameterValue> Knots, IfcKnotType KnotSpec)
		{
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
			this.KnotMultiplicities = KnotMultiplicities;
			this.Knots = Knots;
			this.KnotSpec = KnotSpec;
		}
	}

	public abstract class IfcBSplineSurface : IfcBoundedSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcInteger UDegree { get; set; }
		public IfcInteger VDegree { get; set; }
		public List<List<IfcCartesianPoint>> ControlPointsList { get; set; }
		public IfcBSplineSurfaceForm SurfaceForm { get; set; }
		public IfcLogical UClosed { get; set; }
		public IfcLogical VClosed { get; set; }
		public IfcLogical SelfIntersect { get; set; }
		public IfcInteger UUpper => ControlPointsList.Count;
		// DERIVE : UUpper : IfcInteger := SIZEOF(ControlPointsList) - 1;
		public IfcInteger VUpper => ControlPointsList[0].Count;
		// DERIVE : VUpper : IfcInteger := SIZEOF(ControlPointsList[1]) - 1;
		public List<List<IfcCartesianPoint>> ControlPoints => IfcMakeArrayOfArray(ControlPointsList, 0, UUpper, 0, VUpper);
		// DERIVE : ControlPoints : ARRAY [0:UUpper] OF ARRAY [0:VUpper] OF IfcCartesianPoint := IfcMakeArrayOfArray(ControlPointsList,
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcBSplineSurface() { }

		public IfcBSplineSurface(IfcInteger UDegree, IfcInteger VDegree, List<List<IfcCartesianPoint>> ControlPointsList, IfcBSplineSurfaceForm SurfaceForm, IfcLogical UClosed, IfcLogical VClosed, IfcLogical SelfIntersect)
		{
			this.UDegree = UDegree;
			this.VDegree = VDegree;
			this.ControlPointsList = ControlPointsList;
			this.SurfaceForm = SurfaceForm;
			this.UClosed = UClosed;
			this.VClosed = VClosed;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcBSplineSurfaceWithKnots : IfcBSplineSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public List<IfcInteger> UMultiplicities { get; set; }
		public List<IfcInteger> VMultiplicities { get; set; }
		public List<IfcParameterValue> UKnots { get; set; }
		public List<IfcParameterValue> VKnots { get; set; }
		public IfcKnotType KnotSpec { get; set; }
		public IfcInteger KnotVUpper => VKnots.Count;
		// DERIVE : KnotVUpper : IfcInteger := SIZEOF(VKnots);
		public IfcInteger KnotUUpper => UKnots.Count;
		// DERIVE : KnotUUpper : IfcInteger := SIZEOF(UKnots);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcBSplineSurfaceWithKnots() { }

		public IfcBSplineSurfaceWithKnots(IfcInteger UDegree, IfcInteger VDegree, List<List<IfcCartesianPoint>> ControlPointsList, IfcBSplineSurfaceForm SurfaceForm, IfcLogical UClosed, IfcLogical VClosed, IfcLogical SelfIntersect, List<IfcInteger> UMultiplicities, List<IfcInteger> VMultiplicities, List<IfcParameterValue> UKnots, List<IfcParameterValue> VKnots, IfcKnotType KnotSpec)
		{
			this.UDegree = UDegree;
			this.VDegree = VDegree;
			this.ControlPointsList = ControlPointsList;
			this.SurfaceForm = SurfaceForm;
			this.UClosed = UClosed;
			this.VClosed = VClosed;
			this.SelfIntersect = SelfIntersect;
			this.UMultiplicities = UMultiplicities;
			this.VMultiplicities = VMultiplicities;
			this.UKnots = UKnots;
			this.VKnots = VKnots;
			this.KnotSpec = KnotSpec;
		}
	}

	public class IfcBeam : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcBeamTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcBeam() { }

		public IfcBeam(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcBeamTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBeamStandardCase : IfcBeam, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcBeamStandardCase() { }

		public IfcBeamStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcBeamTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBeamType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcBeamTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcBeamType() { }

		public IfcBeamType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcBeamTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBlobTexture : IfcSurfaceTexture
	{
		public IfcIdentifier RasterFormat { get; set; }
		public IfcBinary RasterCode { get; set; }
		public IfcBlobTexture() { }

		public IfcBlobTexture(IfcBoolean RepeatS, IfcBoolean RepeatT, IfcIdentifier Mode, IfcCartesianTransformationOperator2D TextureTransform, List<IfcIdentifier> Parameter, IfcIdentifier RasterFormat, IfcBinary RasterCode)
		{
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.Mode = Mode;
			this.TextureTransform = TextureTransform;
			this.Parameter = Parameter;
			this.RasterFormat = RasterFormat;
			this.RasterCode = RasterCode;
		}
	}

	public class IfcBlock : IfcCsgPrimitive3D, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public IfcPositiveLengthMeasure XLength { get; set; }
		public IfcPositiveLengthMeasure YLength { get; set; }
		public IfcPositiveLengthMeasure ZLength { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcBlock() { }

		public IfcBlock(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure XLength, IfcPositiveLengthMeasure YLength, IfcPositiveLengthMeasure ZLength)
		{
			this.Position = Position;
			this.XLength = XLength;
			this.YLength = YLength;
			this.ZLength = ZLength;
		}
	}

	public class IfcBoiler : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcBoilerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcBoiler() { }

		public IfcBoiler(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcBoilerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBoilerType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcBoilerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcBoilerType() { }

		public IfcBoilerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcBoilerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBooleanClippingResult : IfcBooleanResult, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcBooleanClippingResult() { }

		public IfcBooleanClippingResult(IfcBooleanOperator Operator, IfcBooleanOperand FirstOperand, IfcBooleanOperand SecondOperand)
		{
			this.Operator = Operator;
			this.FirstOperand = FirstOperand;
			this.SecondOperand = SecondOperand;
		}
	}

	public class IfcBooleanResult : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public IfcBooleanOperator Operator { get; set; }
		public IfcBooleanOperand FirstOperand { get; set; }
		public IfcBooleanOperand SecondOperand { get; set; }
		public IfcDimensionCount Dim => FirstOperand.GetDim();
		// DERIVE : Dim : IfcDimensionCount := FirstOperand.Dim;
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcBooleanResult() { }

		public IfcBooleanResult(IfcBooleanOperator Operator, IfcBooleanOperand FirstOperand, IfcBooleanOperand SecondOperand)
		{
			this.Operator = Operator;
			this.FirstOperand = FirstOperand;
			this.SecondOperand = SecondOperand;
		}
	}

	public abstract class IfcBoundaryCondition : IfcBase
	{
		public IfcLabel Name { get; set; }
		public IfcBoundaryCondition() { }

		public IfcBoundaryCondition(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcBoundaryCurve : IfcCompositeCurveOnSurface, IfcCurveOnSurface, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcBoundaryCurve() { }

		public IfcBoundaryCurve(List<IfcCompositeCurveSegment> Segments, IfcLogical SelfIntersect)
		{
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcBoundaryEdgeCondition : IfcBoundaryCondition
	{
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthX { get; set; }
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthY { get; set; }
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthZ { get; set; }
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthX { get; set; }
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthY { get; set; }
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthZ { get; set; }
		public IfcBoundaryEdgeCondition() { }

		public IfcBoundaryEdgeCondition(IfcLabel Name, IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthX, IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthY, IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthZ, IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthX, IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthY, IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthZ)
		{
			this.Name = Name;
			this.TranslationalStiffnessByLengthX = TranslationalStiffnessByLengthX;
			this.TranslationalStiffnessByLengthY = TranslationalStiffnessByLengthY;
			this.TranslationalStiffnessByLengthZ = TranslationalStiffnessByLengthZ;
			this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
			this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
			this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
		}
	}

	public class IfcBoundaryFaceCondition : IfcBoundaryCondition
	{
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX { get; set; }
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY { get; set; }
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ { get; set; }
		public IfcBoundaryFaceCondition() { }

		public IfcBoundaryFaceCondition(IfcLabel Name, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ)
		{
			this.Name = Name;
			this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
			this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
			this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
		}
	}

	public class IfcBoundaryNodeCondition : IfcBoundaryCondition
	{
		public IfcTranslationalStiffnessSelect TranslationalStiffnessX { get; set; }
		public IfcTranslationalStiffnessSelect TranslationalStiffnessY { get; set; }
		public IfcTranslationalStiffnessSelect TranslationalStiffnessZ { get; set; }
		public IfcRotationalStiffnessSelect RotationalStiffnessX { get; set; }
		public IfcRotationalStiffnessSelect RotationalStiffnessY { get; set; }
		public IfcRotationalStiffnessSelect RotationalStiffnessZ { get; set; }
		public IfcBoundaryNodeCondition() { }

		public IfcBoundaryNodeCondition(IfcLabel Name, IfcTranslationalStiffnessSelect TranslationalStiffnessX, IfcTranslationalStiffnessSelect TranslationalStiffnessY, IfcTranslationalStiffnessSelect TranslationalStiffnessZ, IfcRotationalStiffnessSelect RotationalStiffnessX, IfcRotationalStiffnessSelect RotationalStiffnessY, IfcRotationalStiffnessSelect RotationalStiffnessZ)
		{
			this.Name = Name;
			this.TranslationalStiffnessX = TranslationalStiffnessX;
			this.TranslationalStiffnessY = TranslationalStiffnessY;
			this.TranslationalStiffnessZ = TranslationalStiffnessZ;
			this.RotationalStiffnessX = RotationalStiffnessX;
			this.RotationalStiffnessY = RotationalStiffnessY;
			this.RotationalStiffnessZ = RotationalStiffnessZ;
		}
	}

	public class IfcBoundaryNodeConditionWarping : IfcBoundaryNodeCondition
	{
		public IfcWarpingStiffnessSelect WarpingStiffness { get; set; }
		public IfcBoundaryNodeConditionWarping() { }

		public IfcBoundaryNodeConditionWarping(IfcLabel Name, IfcTranslationalStiffnessSelect TranslationalStiffnessX, IfcTranslationalStiffnessSelect TranslationalStiffnessY, IfcTranslationalStiffnessSelect TranslationalStiffnessZ, IfcRotationalStiffnessSelect RotationalStiffnessX, IfcRotationalStiffnessSelect RotationalStiffnessY, IfcRotationalStiffnessSelect RotationalStiffnessZ, IfcWarpingStiffnessSelect WarpingStiffness)
		{
			this.Name = Name;
			this.TranslationalStiffnessX = TranslationalStiffnessX;
			this.TranslationalStiffnessY = TranslationalStiffnessY;
			this.TranslationalStiffnessZ = TranslationalStiffnessZ;
			this.RotationalStiffnessX = RotationalStiffnessX;
			this.RotationalStiffnessY = RotationalStiffnessY;
			this.RotationalStiffnessZ = RotationalStiffnessZ;
			this.WarpingStiffness = WarpingStiffness;
		}
	}

	public abstract class IfcBoundedCurve : IfcCurve, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcBoundedCurve() { }
	}

	public abstract class IfcBoundedSurface : IfcSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcBoundedSurface() { }
	}

	public class IfcBoundingBox : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcCartesianPoint Corner { get; set; }
		public IfcPositiveLengthMeasure XDim { get; set; }
		public IfcPositiveLengthMeasure YDim { get; set; }
		public IfcPositiveLengthMeasure ZDim { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public IfcBoundingBox() { }

		public IfcBoundingBox(IfcCartesianPoint Corner, IfcPositiveLengthMeasure XDim, IfcPositiveLengthMeasure YDim, IfcPositiveLengthMeasure ZDim)
		{
			this.Corner = Corner;
			this.XDim = XDim;
			this.YDim = YDim;
			this.ZDim = ZDim;
		}
	}

	public class IfcBoxedHalfSpace : IfcHalfSpaceSolid, IfcBooleanOperand, IfcLayeredItem
	{
		public IfcBoundingBox Enclosure { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcBoxedHalfSpace() { }

		public IfcBoxedHalfSpace(IfcSurface BaseSurface, IfcBoolean AgreementFlag, IfcBoundingBox Enclosure)
		{
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
			this.Enclosure = Enclosure;
		}
	}

	public class IfcBuilding : IfcSpatialStructureElement, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcLengthMeasure ElevationOfRefHeight { get; set; }
		public IfcLengthMeasure ElevationOfTerrain { get; set; }
		public IfcPostalAddress BuildingAddress { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcBuilding() { }

		public IfcBuilding(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcElementCompositionEnum CompositionType, IfcLengthMeasure ElevationOfRefHeight, IfcLengthMeasure ElevationOfTerrain, IfcPostalAddress BuildingAddress)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
			this.CompositionType = CompositionType;
			this.ElevationOfRefHeight = ElevationOfRefHeight;
			this.ElevationOfTerrain = ElevationOfTerrain;
			this.BuildingAddress = BuildingAddress;
		}
	}

	public abstract class IfcBuildingElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcBuildingElement() { }

		public IfcBuildingElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public class IfcBuildingElementPart : IfcElementComponent, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcBuildingElementPartTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcBuildingElementPart() { }

		public IfcBuildingElementPart(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcBuildingElementPartTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBuildingElementPartType : IfcElementComponentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcBuildingElementPartTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcBuildingElementPartType() { }

		public IfcBuildingElementPartType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcBuildingElementPartTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBuildingElementProxy : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcBuildingElementProxyTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcBuildingElementProxy() { }

		public IfcBuildingElementProxy(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcBuildingElementProxyTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBuildingElementProxyType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcBuildingElementProxyTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcBuildingElementProxyType() { }

		public IfcBuildingElementProxyType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcBuildingElementProxyTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcBuildingElementType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcBuildingElementType() { }

		public IfcBuildingElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcBuildingStorey : IfcSpatialStructureElement, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcLengthMeasure Elevation { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcBuildingStorey() { }

		public IfcBuildingStorey(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcElementCompositionEnum CompositionType, IfcLengthMeasure Elevation)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
			this.CompositionType = CompositionType;
			this.Elevation = Elevation;
		}
	}

	public class IfcBuildingSystem : IfcSystem, IfcDefinitionSelect
	{
		public IfcBuildingSystemTypeEnum PredefinedType { get; set; }
		public IfcLabel LongName { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcBuildingSystem() { }

		public IfcBuildingSystem(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcBuildingSystemTypeEnum PredefinedType, IfcLabel LongName)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
	}

	public class IfcBurner : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcBurnerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcBurner() { }

		public IfcBurner(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcBurnerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcBurnerType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcBurnerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcBurnerType() { }

		public IfcBurnerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcBurnerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCShapeProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure Depth { get; set; }
		public IfcPositiveLengthMeasure Width { get; set; }
		public IfcPositiveLengthMeasure WallThickness { get; set; }
		public IfcPositiveLengthMeasure Girth { get; set; }
		public IfcNonNegativeLengthMeasure InternalFilletRadius { get; set; }
		public IfcCShapeProfileDef() { }

		public IfcCShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure Depth, IfcPositiveLengthMeasure Width, IfcPositiveLengthMeasure WallThickness, IfcPositiveLengthMeasure Girth, IfcNonNegativeLengthMeasure InternalFilletRadius)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.Depth = Depth;
			this.Width = Width;
			this.WallThickness = WallThickness;
			this.Girth = Girth;
			this.InternalFilletRadius = InternalFilletRadius;
		}
	}

	public class IfcCableCarrierFitting : IfcFlowFitting, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCableCarrierFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCableCarrierFitting() { }

		public IfcCableCarrierFitting(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCableCarrierFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCableCarrierFittingType : IfcFlowFittingType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCableCarrierFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCableCarrierFittingType() { }

		public IfcCableCarrierFittingType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCableCarrierFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCableCarrierSegment : IfcFlowSegment, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCableCarrierSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCableCarrierSegment() { }

		public IfcCableCarrierSegment(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCableCarrierSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCableCarrierSegmentType : IfcFlowSegmentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCableCarrierSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCableCarrierSegmentType() { }

		public IfcCableCarrierSegmentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCableCarrierSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCableFitting : IfcFlowFitting, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCableFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCableFitting() { }

		public IfcCableFitting(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCableFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCableFittingType : IfcFlowFittingType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCableFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCableFittingType() { }

		public IfcCableFittingType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCableFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCableSegment : IfcFlowSegment, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCableSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCableSegment() { }

		public IfcCableSegment(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCableSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCableSegmentType : IfcFlowSegmentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCableSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCableSegmentType() { }

		public IfcCableSegmentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCableSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCartesianPoint : IfcPoint, IfcGeometricSetSelect, IfcLayeredItem, IfcPointOrVertexPoint, IfcTrimmingSelect
	{
		public List<IfcLengthMeasure> Coordinates { get; set; }
		public IfcDimensionCount Dim => Coordinates.Count;
		// DERIVE : Dim : IfcDimensionCount := HIINDEX(Coordinates);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCartesianPoint() { }

		public IfcCartesianPoint(List<IfcLengthMeasure> Coordinates)
		{
			this.Coordinates = Coordinates;
		}
	}

	public abstract class IfcCartesianPointList : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcDimensionCount Dim => IfcPointListDim(this);
		// DERIVE : Dim : IfcDimensionCount := IfcPointListDim(SELF);
		public IfcCartesianPointList() { }
	}

	public class IfcCartesianPointList2D : IfcCartesianPointList, IfcLayeredItem
	{
		public List<List<IfcLengthMeasure>> CoordList { get; set; }
		public IfcCartesianPointList2D() { }

		public IfcCartesianPointList2D(List<List<IfcLengthMeasure>> CoordList)
		{
			this.CoordList = CoordList;
		}
	}

	public class IfcCartesianPointList3D : IfcCartesianPointList, IfcLayeredItem
	{
		public List<List<IfcLengthMeasure>> CoordList { get; set; }
		public IfcCartesianPointList3D() { }

		public IfcCartesianPointList3D(List<List<IfcLengthMeasure>> CoordList)
		{
			this.CoordList = CoordList;
		}
	}

	public abstract class IfcCartesianTransformationOperator : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcDirection Axis1 { get; set; }
		public IfcDirection Axis2 { get; set; }
		public IfcCartesianPoint LocalOrigin { get; set; }
		public IfcReal Scale { get; set; }
		public IfcReal Scl => NVL(Scale, 1);
		// DERIVE : Scl : IfcReal := NVL(Scale, 1.0);
		public IfcDimensionCount Dim => LocalOrigin.Dim;
		// DERIVE : Dim : IfcDimensionCount := LocalOrigin.Dim;
		public IfcCartesianTransformationOperator() { }

		public IfcCartesianTransformationOperator(IfcDirection Axis1, IfcDirection Axis2, IfcCartesianPoint LocalOrigin, IfcReal Scale)
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
		}
	}

	public class IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator, IfcLayeredItem
	{
		public List<IfcDirection> U => IfcBaseAxis(2, Axis1, Axis2, null);
		// DERIVE : U : LIST [2:2] OF IfcDirection := IfcBaseAxis(2,SELF\IfcCartesianTransformationOperator.Axis1,
		public IfcCartesianTransformationOperator2D() { }

		public IfcCartesianTransformationOperator2D(IfcDirection Axis1, IfcDirection Axis2, IfcCartesianPoint LocalOrigin, IfcReal Scale)
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
		}
	}

	public class IfcCartesianTransformationOperator2DnonUniform : IfcCartesianTransformationOperator2D, IfcLayeredItem
	{
		public IfcReal Scale2 { get; set; }
		public IfcReal Scl2 => NVL(Scale2, Scl);
		// DERIVE : Scl2 : IfcReal := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
		public IfcCartesianTransformationOperator2DnonUniform() { }

		public IfcCartesianTransformationOperator2DnonUniform(IfcDirection Axis1, IfcDirection Axis2, IfcCartesianPoint LocalOrigin, IfcReal Scale, IfcReal Scale2)
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
			this.Scale2 = Scale2;
		}
	}

	public class IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator, IfcLayeredItem
	{
		public IfcDirection Axis3 { get; set; }
		public List<IfcDirection> U => IfcBaseAxis(3, Axis1, Axis2, Axis3);
		// DERIVE : U : LIST [3:3] OF IfcDirection := IfcBaseAxis(3,SELF\IfcCartesianTransformationOperator.Axis1,
		public IfcCartesianTransformationOperator3D() { }

		public IfcCartesianTransformationOperator3D(IfcDirection Axis1, IfcDirection Axis2, IfcCartesianPoint LocalOrigin, IfcReal Scale, IfcDirection Axis3)
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
			this.Axis3 = Axis3;
		}
	}

	public class IfcCartesianTransformationOperator3DnonUniform : IfcCartesianTransformationOperator3D, IfcLayeredItem
	{
		public IfcReal Scale2 { get; set; }
		public IfcReal Scale3 { get; set; }
		public IfcReal Scl2 => NVL(Scale2, Scl);
		// DERIVE : Scl2 : IfcReal := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
		public IfcReal Scl3 => NVL(Scale3, Scl);
		// DERIVE : Scl3 : IfcReal := NVL(Scale3, SELF\IfcCartesianTransformationOperator.Scl);
		public IfcCartesianTransformationOperator3DnonUniform() { }

		public IfcCartesianTransformationOperator3DnonUniform(IfcDirection Axis1, IfcDirection Axis2, IfcCartesianPoint LocalOrigin, IfcReal Scale, IfcDirection Axis3, IfcReal Scale2, IfcReal Scale3)
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
			this.Axis3 = Axis3;
			this.Scale2 = Scale2;
			this.Scale3 = Scale3;
		}
	}

	public class IfcCenterLineProfileDef : IfcArbitraryOpenProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure Thickness { get; set; }
		public IfcCenterLineProfileDef() { }

		public IfcCenterLineProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcBoundedCurve Curve, IfcPositiveLengthMeasure Thickness)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Curve = Curve;
			this.Thickness = Thickness;
		}
	}

	public class IfcChiller : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcChillerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcChiller() { }

		public IfcChiller(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcChillerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcChillerType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcChillerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcChillerType() { }

		public IfcChillerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcChillerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcChimney : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcChimneyTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcChimney() { }

		public IfcChimney(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcChimneyTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcChimneyType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcChimneyTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcChimneyType() { }

		public IfcChimneyType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcChimneyTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCircle : IfcConic, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcPositiveLengthMeasure Radius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCircle() { }

		public IfcCircle(IfcAxis2Placement Position, IfcPositiveLengthMeasure Radius)
		{
			this.Position = Position;
			this.Radius = Radius;
		}
	}

	public class IfcCircleHollowProfileDef : IfcCircleProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure WallThickness { get; set; }
		public IfcCircleHollowProfileDef() { }

		public IfcCircleHollowProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure Radius, IfcPositiveLengthMeasure WallThickness)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.Radius = Radius;
			this.WallThickness = WallThickness;
		}
	}

	public class IfcCircleProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure Radius { get; set; }
		public IfcCircleProfileDef() { }

		public IfcCircleProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure Radius)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.Radius = Radius;
		}
	}

	public class IfcCivilElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCivilElement() { }

		public IfcCivilElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public class IfcCivilElementType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCivilElementType() { }

		public IfcCivilElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcClassification : IfcExternalInformation, IfcClassificationReferenceSelect, IfcClassificationSelect, IfcResourceObjectSelect
	{
		public IfcLabel Source { get; set; }
		public IfcLabel Edition { get; set; }
		public IfcDate EditionDate { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcURIReference Location { get; set; }
		public List<IfcIdentifier> ReferenceTokens { get; set; }
		public List<IfcRelAssociatesClassification> ClassificationForObjects => Model.GetInstances<IfcRelAssociatesClassification>().Where(e => e.RelatingClassification == this).ToList();
		// INVERSE : ClassificationForObjects : SET [0:?] OF IfcRelAssociatesClassification FOR RelatingClassification;
		public List<IfcClassificationReference> HasReferences => Model.GetInstances<IfcClassificationReference>().Where(e => e.ReferencedSource == this).ToList();
		// INVERSE : HasReferences : SET [0:?] OF IfcClassificationReference FOR ReferencedSource;
		public virtual IfcLabel GetName() { return Name; }
		public virtual IfcText GetDescription() { return Description; }
		public virtual IfcURIReference GetLocation() { return Location; }
		public virtual List<IfcClassificationReference> GetHasReferences() { return HasReferences; }
		public IfcClassification() { }

		public IfcClassification(IfcLabel Source, IfcLabel Edition, IfcDate EditionDate, IfcLabel Name, IfcText Description, IfcURIReference Location, List<IfcIdentifier> ReferenceTokens)
		{
			this.Source = Source;
			this.Edition = Edition;
			this.EditionDate = EditionDate;
			this.Name = Name;
			this.Description = Description;
			this.Location = Location;
			this.ReferenceTokens = ReferenceTokens;
		}
	}

	public class IfcClassificationReference : IfcExternalReference, IfcClassificationReferenceSelect, IfcClassificationSelect, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcClassificationReferenceSelect ReferencedSource { get; set; }
		public IfcText Description { get; set; }
		public IfcIdentifier Sort { get; set; }
		public List<IfcRelAssociatesClassification> ClassificationRefForObjects => Model.GetInstances<IfcRelAssociatesClassification>().Where(e => e.RelatingClassification == this).ToList();
		// INVERSE : ClassificationRefForObjects : SET [0:?] OF IfcRelAssociatesClassification FOR RelatingClassification;
		public List<IfcClassificationReference> HasReferences => Model.GetInstances<IfcClassificationReference>().Where(e => e.ReferencedSource == this).ToList();
		// INVERSE : HasReferences : SET [0:?] OF IfcClassificationReference FOR ReferencedSource;
		public virtual IfcLabel GetName() { return Name; }
		public virtual IfcText GetDescription() { return Description; }
		public virtual IfcURIReference GetLocation() { return Location; }
		public virtual List<IfcClassificationReference> GetHasReferences() { return HasReferences; }
		public IfcClassificationReference() { }

		public IfcClassificationReference(IfcURIReference Location, IfcIdentifier Identification, IfcLabel Name, IfcClassificationReferenceSelect ReferencedSource, IfcText Description, IfcIdentifier Sort)
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
			this.ReferencedSource = ReferencedSource;
			this.Description = Description;
			this.Sort = Sort;
		}
	}

	public class IfcClosedShell : IfcConnectedFaceSet, IfcLayeredItem, IfcShell, IfcSolidOrShell
	{
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual List<IfcFace> GetCfsFaces() { return CfsFaces; }
		public IfcClosedShell() { }

		public IfcClosedShell(List<IfcFace> CfsFaces)
		{
			this.CfsFaces = CfsFaces;
		}
	}

	public class IfcCoil : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCoilTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCoil() { }

		public IfcCoil(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCoilTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCoilType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCoilTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCoilType() { }

		public IfcCoilType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCoilTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcColourRgb : IfcColourSpecification, IfcColour, IfcColourOrFactor
	{
		public IfcNormalisedRatioMeasure Red { get; set; }
		public IfcNormalisedRatioMeasure Green { get; set; }
		public IfcNormalisedRatioMeasure Blue { get; set; }
		public override IfcLabel GetName() { return Name; }
		public IfcColourRgb() { }

		public IfcColourRgb(IfcLabel Name, IfcNormalisedRatioMeasure Red, IfcNormalisedRatioMeasure Green, IfcNormalisedRatioMeasure Blue)
		{
			this.Name = Name;
			this.Red = Red;
			this.Green = Green;
			this.Blue = Blue;
		}
	}

	public class IfcColourRgbList : IfcPresentationItem
	{
		public List<List<IfcNormalisedRatioMeasure>> ColourList { get; set; }
		public IfcColourRgbList() { }

		public IfcColourRgbList(List<List<IfcNormalisedRatioMeasure>> ColourList)
		{
			this.ColourList = ColourList;
		}
	}

	public abstract class IfcColourSpecification : IfcPresentationItem, IfcColour
	{
		public IfcLabel Name { get; set; }
		public virtual IfcLabel GetName() { return Name; }
		public IfcColourSpecification() { }

		public IfcColourSpecification(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcColumn : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcColumnTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcColumn() { }

		public IfcColumn(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcColumnTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcColumnStandardCase : IfcColumn, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcColumnStandardCase() { }

		public IfcColumnStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcColumnTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcColumnType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcColumnTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcColumnType() { }

		public IfcColumnType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcColumnTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCommunicationsAppliance : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCommunicationsApplianceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCommunicationsAppliance() { }

		public IfcCommunicationsAppliance(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCommunicationsApplianceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCommunicationsApplianceType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCommunicationsApplianceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCommunicationsApplianceType() { }

		public IfcCommunicationsApplianceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCommunicationsApplianceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcComplexProperty : IfcProperty, IfcResourceObjectSelect
	{
		public IfcIdentifier UsageName { get; set; }
		public List<IfcProperty> HasProperties { get; set; }
		public IfcComplexProperty() { }

		public IfcComplexProperty(IfcIdentifier Name, IfcText Description, IfcIdentifier UsageName, List<IfcProperty> HasProperties)
		{
			this.Name = Name;
			this.Description = Description;
			this.UsageName = UsageName;
			this.HasProperties = HasProperties;
		}
	}

	public class IfcComplexPropertyTemplate : IfcPropertyTemplate, IfcDefinitionSelect
	{
		public IfcLabel UsageName { get; set; }
		public IfcComplexPropertyTemplateTypeEnum TemplateType { get; set; }
		public List<IfcPropertyTemplate> HasPropertyTemplates { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcComplexPropertyTemplate() { }

		public IfcComplexPropertyTemplate(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel UsageName, IfcComplexPropertyTemplateTypeEnum TemplateType, List<IfcPropertyTemplate> HasPropertyTemplates)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.UsageName = UsageName;
			this.TemplateType = TemplateType;
			this.HasPropertyTemplates = HasPropertyTemplates;
		}
	}

	public class IfcCompositeCurve : IfcBoundedCurve, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public List<IfcCompositeCurveSegment> Segments { get; set; }
		public IfcLogical SelfIntersect { get; set; }
		public IfcInteger NSegments => (IfcInteger)Segments.Count;
		// DERIVE : NSegments : IfcInteger := SIZEOF(Segments);
		public IfcLogical ClosedCurve => (IfcLogical)(Segments[Segments.Count - 1].Transition != IfcTransitionCode.DISCONTINUOUS);
		// DERIVE : ClosedCurve : IfcLogical := Segments[NSegments].Transition <> Discontinuous;
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCompositeCurve() { }

		public IfcCompositeCurve(List<IfcCompositeCurveSegment> Segments, IfcLogical SelfIntersect)
		{
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcCompositeCurveOnSurface : IfcCompositeCurve, IfcCurveOnSurface, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public List<IfcSurface> BasisSurface => IfcGetBasisSurface(this);
		// DERIVE : BasisSurface : SET [0:1] OF IfcSurface := IfcGetBasisSurface(SELF);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCompositeCurveOnSurface() { }

		public IfcCompositeCurveOnSurface(List<IfcCompositeCurveSegment> Segments, IfcLogical SelfIntersect)
		{
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcCompositeCurveSegment : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcTransitionCode Transition { get; set; }
		public IfcBoolean SameSense { get; set; }
		public IfcCurve ParentCurve { get; set; }
		public IfcDimensionCount Dim => ParentCurve.Dim;
		// DERIVE : Dim : IfcDimensionCount := ParentCurve.Dim;
		public List<IfcCompositeCurve> UsingCurves => Model.GetInstances<IfcCompositeCurve>().Where(e => e.Segments.Contains(this)).ToList();
		// INVERSE : UsingCurves : SET [1:?] OF IfcCompositeCurve FOR Segments;
		public IfcCompositeCurveSegment() { }

		public IfcCompositeCurveSegment(IfcTransitionCode Transition, IfcBoolean SameSense, IfcCurve ParentCurve)
		{
			this.Transition = Transition;
			this.SameSense = SameSense;
			this.ParentCurve = ParentCurve;
		}
	}

	public class IfcCompositeProfileDef : IfcProfileDef, IfcResourceObjectSelect
	{
		public List<IfcProfileDef> Profiles { get; set; }
		public IfcLabel Label { get; set; }
		public IfcCompositeProfileDef() { }

		public IfcCompositeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, List<IfcProfileDef> Profiles, IfcLabel Label)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Profiles = Profiles;
			this.Label = Label;
		}
	}

	public class IfcCompressor : IfcFlowMovingDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCompressorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCompressor() { }

		public IfcCompressor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCompressorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCompressorType : IfcFlowMovingDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCompressorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCompressorType() { }

		public IfcCompressorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCompressorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCondenser : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCondenserTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCondenser() { }

		public IfcCondenser(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCondenserTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCondenserType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCondenserTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCondenserType() { }

		public IfcCondenserType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCondenserTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcConic : IfcCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcAxis2Placement Position { get; set; }
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcConic() { }

		public IfcConic(IfcAxis2Placement Position)
		{
			this.Position = Position;
		}
	}

	public class IfcConnectedFaceSet : IfcTopologicalRepresentationItem, IfcLayeredItem
	{
		public List<IfcFace> CfsFaces { get; set; }
		public IfcConnectedFaceSet() { }

		public IfcConnectedFaceSet(List<IfcFace> CfsFaces)
		{
			this.CfsFaces = CfsFaces;
		}
	}

	public class IfcConnectionCurveGeometry : IfcConnectionGeometry
	{
		public IfcCurveOrEdgeCurve CurveOnRelatingElement { get; set; }
		public IfcCurveOrEdgeCurve CurveOnRelatedElement { get; set; }
		public IfcConnectionCurveGeometry() { }

		public IfcConnectionCurveGeometry(IfcCurveOrEdgeCurve CurveOnRelatingElement, IfcCurveOrEdgeCurve CurveOnRelatedElement)
		{
			this.CurveOnRelatingElement = CurveOnRelatingElement;
			this.CurveOnRelatedElement = CurveOnRelatedElement;
		}
	}

	public abstract class IfcConnectionGeometry : IfcBase
	{
		public IfcConnectionGeometry() { }
	}

	public class IfcConnectionPointEccentricity : IfcConnectionPointGeometry
	{
		public IfcLengthMeasure EccentricityInX { get; set; }
		public IfcLengthMeasure EccentricityInY { get; set; }
		public IfcLengthMeasure EccentricityInZ { get; set; }
		public IfcConnectionPointEccentricity() { }

		public IfcConnectionPointEccentricity(IfcPointOrVertexPoint PointOnRelatingElement, IfcPointOrVertexPoint PointOnRelatedElement, IfcLengthMeasure EccentricityInX, IfcLengthMeasure EccentricityInY, IfcLengthMeasure EccentricityInZ)
		{
			this.PointOnRelatingElement = PointOnRelatingElement;
			this.PointOnRelatedElement = PointOnRelatedElement;
			this.EccentricityInX = EccentricityInX;
			this.EccentricityInY = EccentricityInY;
			this.EccentricityInZ = EccentricityInZ;
		}
	}

	public class IfcConnectionPointGeometry : IfcConnectionGeometry
	{
		public IfcPointOrVertexPoint PointOnRelatingElement { get; set; }
		public IfcPointOrVertexPoint PointOnRelatedElement { get; set; }
		public IfcConnectionPointGeometry() { }

		public IfcConnectionPointGeometry(IfcPointOrVertexPoint PointOnRelatingElement, IfcPointOrVertexPoint PointOnRelatedElement)
		{
			this.PointOnRelatingElement = PointOnRelatingElement;
			this.PointOnRelatedElement = PointOnRelatedElement;
		}
	}

	public class IfcConnectionSurfaceGeometry : IfcConnectionGeometry
	{
		public IfcSurfaceOrFaceSurface SurfaceOnRelatingElement { get; set; }
		public IfcSurfaceOrFaceSurface SurfaceOnRelatedElement { get; set; }
		public IfcConnectionSurfaceGeometry() { }

		public IfcConnectionSurfaceGeometry(IfcSurfaceOrFaceSurface SurfaceOnRelatingElement, IfcSurfaceOrFaceSurface SurfaceOnRelatedElement)
		{
			this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
			this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
		}
	}

	public class IfcConnectionVolumeGeometry : IfcConnectionGeometry
	{
		public IfcSolidOrShell VolumeOnRelatingElement { get; set; }
		public IfcSolidOrShell VolumeOnRelatedElement { get; set; }
		public IfcConnectionVolumeGeometry() { }

		public IfcConnectionVolumeGeometry(IfcSolidOrShell VolumeOnRelatingElement, IfcSolidOrShell VolumeOnRelatedElement)
		{
			this.VolumeOnRelatingElement = VolumeOnRelatingElement;
			this.VolumeOnRelatedElement = VolumeOnRelatedElement;
		}
	}

	public abstract class IfcConstraint : IfcBase, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcConstraintEnum ConstraintGrade { get; set; }
		public IfcLabel ConstraintSource { get; set; }
		public IfcActorSelect CreatingActor { get; set; }
		public IfcDateTime CreationTime { get; set; }
		public IfcLabel UserDefinedGrade { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReferences => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public List<IfcResourceConstraintRelationship> PropertiesForConstraint => Model.GetInstances<IfcResourceConstraintRelationship>().Where(e => e.RelatingConstraint == this).ToList();
		// INVERSE : PropertiesForConstraint : SET [0:?] OF IfcResourceConstraintRelationship FOR RelatingConstraint;
		public IfcConstraint() { }

		public IfcConstraint(IfcLabel Name, IfcText Description, IfcConstraintEnum ConstraintGrade, IfcLabel ConstraintSource, IfcActorSelect CreatingActor, IfcDateTime CreationTime, IfcLabel UserDefinedGrade)
		{
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
		}
	}

	public class IfcConstructionEquipmentResource : IfcConstructionResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcConstructionEquipmentResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionEquipmentResource() { }

		public IfcConstructionEquipmentResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcResourceTime Usage, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcConstructionEquipmentResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcConstructionEquipmentResourceType : IfcConstructionResourceType, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcConstructionEquipmentResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionEquipmentResourceType() { }

		public IfcConstructionEquipmentResourceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcConstructionEquipmentResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcConstructionMaterialResource : IfcConstructionResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcConstructionMaterialResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionMaterialResource() { }

		public IfcConstructionMaterialResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcResourceTime Usage, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcConstructionMaterialResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcConstructionMaterialResourceType : IfcConstructionResourceType, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcConstructionMaterialResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionMaterialResourceType() { }

		public IfcConstructionMaterialResourceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcConstructionMaterialResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcConstructionProductResource : IfcConstructionResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcConstructionProductResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionProductResource() { }

		public IfcConstructionProductResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcResourceTime Usage, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcConstructionProductResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcConstructionProductResourceType : IfcConstructionResourceType, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcConstructionProductResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionProductResourceType() { }

		public IfcConstructionProductResourceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcConstructionProductResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcConstructionResource : IfcResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcResourceTime Usage { get; set; }
		public List<IfcAppliedValue> BaseCosts { get; set; }
		public IfcPhysicalQuantity BaseQuantity { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override IfcIdentifier GetIdentification();
		public abstract override IfcText GetLongDescription();
		public abstract override List<IfcRelAssignsToResource> GetResourceOf();
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionResource() { }

		public IfcConstructionResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcResourceTime Usage, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
		}
	}

	public abstract class IfcConstructionResourceType : IfcTypeResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public List<IfcAppliedValue> BaseCosts { get; set; }
		public IfcPhysicalQuantity BaseQuantity { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override IfcIdentifier GetIdentification();
		public abstract override IfcText GetLongDescription();
		public abstract override List<IfcRelAssignsToResource> GetResourceOf();
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcConstructionResourceType() { }

		public IfcConstructionResourceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
		}
	}

	public abstract class IfcContext : IfcObjectDefinition, IfcDefinitionSelect
	{
		public IfcLabel ObjectType { get; set; }
		public IfcLabel LongName { get; set; }
		public IfcLabel Phase { get; set; }
		public List<IfcRepresentationContext> RepresentationContexts { get; set; }
		public IfcUnitAssignment UnitsInContext { get; set; }
		public List<IfcRelDefinesByProperties> IsDefinedBy => Model.GetInstances<IfcRelDefinesByProperties>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : IsDefinedBy : SET [0:?] OF IfcRelDefinesByProperties FOR RelatedObjects;
		public List<IfcRelDeclares> Declares => Model.GetInstances<IfcRelDeclares>().Where(e => e.RelatingContext == this).ToList();
		// INVERSE : Declares : SET [0:?] OF IfcRelDeclares FOR RelatingContext;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcContext() { }

		public IfcContext(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLabel LongName, IfcLabel Phase, List<IfcRepresentationContext> RepresentationContexts, IfcUnitAssignment UnitsInContext)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
	}

	public class IfcContextDependentUnit : IfcNamedUnit, IfcResourceObjectSelect, IfcUnit
	{
		public IfcLabel Name { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReference => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public IfcContextDependentUnit() { }

		public IfcContextDependentUnit(IfcDimensionalExponents Dimensions, IfcUnitEnum UnitType, IfcLabel Name)
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
			this.Name = Name;
		}
	}

	public abstract class IfcControl : IfcObject, IfcDefinitionSelect
	{
		public IfcIdentifier Identification { get; set; }
		public List<IfcRelAssignsToControl> Controls => Model.GetInstances<IfcRelAssignsToControl>().Where(e => e.RelatingControl == this).ToList();
		// INVERSE : Controls : SET [0:?] OF IfcRelAssignsToControl FOR RelatingControl;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcControl() { }

		public IfcControl(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
		}
	}

	public class IfcController : IfcDistributionControlElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcControllerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcController() { }

		public IfcController(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcControllerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcControllerType : IfcDistributionControlElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcControllerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcControllerType() { }

		public IfcControllerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcControllerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcConversionBasedUnit : IfcNamedUnit, IfcResourceObjectSelect, IfcUnit
	{
		public IfcLabel Name { get; set; }
		public IfcMeasureWithUnit ConversionFactor { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReference => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public IfcConversionBasedUnit() { }

		public IfcConversionBasedUnit(IfcDimensionalExponents Dimensions, IfcUnitEnum UnitType, IfcLabel Name, IfcMeasureWithUnit ConversionFactor)
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
			this.Name = Name;
			this.ConversionFactor = ConversionFactor;
		}
	}

	public class IfcConversionBasedUnitWithOffset : IfcConversionBasedUnit, IfcResourceObjectSelect, IfcUnit
	{
		public IfcReal ConversionOffset { get; set; }
		public IfcConversionBasedUnitWithOffset() { }

		public IfcConversionBasedUnitWithOffset(IfcDimensionalExponents Dimensions, IfcUnitEnum UnitType, IfcLabel Name, IfcMeasureWithUnit ConversionFactor, IfcReal ConversionOffset)
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
			this.Name = Name;
			this.ConversionFactor = ConversionFactor;
			this.ConversionOffset = ConversionOffset;
		}
	}

	public class IfcCooledBeam : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCooledBeamTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCooledBeam() { }

		public IfcCooledBeam(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCooledBeamTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCooledBeamType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCooledBeamTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCooledBeamType() { }

		public IfcCooledBeamType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCooledBeamTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCoolingTower : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCoolingTowerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCoolingTower() { }

		public IfcCoolingTower(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCoolingTowerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCoolingTowerType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCoolingTowerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCoolingTowerType() { }

		public IfcCoolingTowerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCoolingTowerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcCoordinateOperation : IfcBase
	{
		public IfcCoordinateReferenceSystemSelect SourceCRS { get; set; }
		public IfcCoordinateReferenceSystem TargetCRS { get; set; }
		public IfcCoordinateOperation() { }

		public IfcCoordinateOperation(IfcCoordinateReferenceSystemSelect SourceCRS, IfcCoordinateReferenceSystem TargetCRS)
		{
			this.SourceCRS = SourceCRS;
			this.TargetCRS = TargetCRS;
		}
	}

	public abstract class IfcCoordinateReferenceSystem : IfcBase, IfcCoordinateReferenceSystemSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcIdentifier GeodeticDatum { get; set; }
		public IfcIdentifier VerticalDatum { get; set; }
		public List<IfcCoordinateOperation> HasCoordinateOperation => Model.GetInstances<IfcCoordinateOperation>().Where(e => e.SourceCRS == this).ToList();
		// INVERSE : HasCoordinateOperation : SET [0:1] OF IfcCoordinateOperation FOR SourceCRS;
		public virtual List<IfcCoordinateOperation> GetHasCoordinateOperation() { return HasCoordinateOperation; }
		public IfcCoordinateReferenceSystem() { }

		public IfcCoordinateReferenceSystem(IfcLabel Name, IfcText Description, IfcIdentifier GeodeticDatum, IfcIdentifier VerticalDatum)
		{
			this.Name = Name;
			this.Description = Description;
			this.GeodeticDatum = GeodeticDatum;
			this.VerticalDatum = VerticalDatum;
		}
	}

	public class IfcCostItem : IfcControl, IfcDefinitionSelect
	{
		public IfcCostItemTypeEnum PredefinedType { get; set; }
		public List<IfcCostValue> CostValues { get; set; }
		public List<IfcPhysicalQuantity> CostQuantities { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcCostItem() { }

		public IfcCostItem(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcCostItemTypeEnum PredefinedType, List<IfcCostValue> CostValues, List<IfcPhysicalQuantity> CostQuantities)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.PredefinedType = PredefinedType;
			this.CostValues = CostValues;
			this.CostQuantities = CostQuantities;
		}
	}

	public class IfcCostSchedule : IfcControl, IfcDefinitionSelect
	{
		public IfcCostScheduleTypeEnum PredefinedType { get; set; }
		public IfcLabel Status { get; set; }
		public IfcDateTime SubmittedOn { get; set; }
		public IfcDateTime UpdateDate { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcCostSchedule() { }

		public IfcCostSchedule(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcCostScheduleTypeEnum PredefinedType, IfcLabel Status, IfcDateTime SubmittedOn, IfcDateTime UpdateDate)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.SubmittedOn = SubmittedOn;
			this.UpdateDate = UpdateDate;
		}
	}

	public class IfcCostValue : IfcAppliedValue, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcCostValue() { }

		public IfcCostValue(IfcLabel Name, IfcText Description, IfcAppliedValueSelect AppliedValue, IfcMeasureWithUnit UnitBasis, IfcDate ApplicableDate, IfcDate FixedUntilDate, IfcLabel Category, IfcLabel Condition, IfcArithmeticOperatorEnum ArithmeticOperator, List<IfcAppliedValue> Components)
		{
			this.Name = Name;
			this.Description = Description;
			this.AppliedValue = AppliedValue;
			this.UnitBasis = UnitBasis;
			this.ApplicableDate = ApplicableDate;
			this.FixedUntilDate = FixedUntilDate;
			this.Category = Category;
			this.Condition = Condition;
			this.ArithmeticOperator = ArithmeticOperator;
			this.Components = Components;
		}
	}

	public class IfcCovering : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCoveringTypeEnum PredefinedType { get; set; }
		public List<IfcRelCoversSpaces> CoversSpaces => Model.GetInstances<IfcRelCoversSpaces>().Where(e => e.RelatedCoverings.Contains(this)).ToList();
		// INVERSE : CoversSpaces : SET [0:1] OF IfcRelCoversSpaces FOR RelatedCoverings;
		public List<IfcRelCoversBldgElements> CoversElements => Model.GetInstances<IfcRelCoversBldgElements>().Where(e => e.RelatedCoverings.Contains(this)).ToList();
		// INVERSE : CoversElements : SET [0:1] OF IfcRelCoversBldgElements FOR RelatedCoverings;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCovering() { }

		public IfcCovering(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCoveringTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCoveringType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCoveringTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCoveringType() { }

		public IfcCoveringType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCoveringTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCrewResource : IfcConstructionResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcCrewResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcCrewResource() { }

		public IfcCrewResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcResourceTime Usage, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcCrewResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCrewResourceType : IfcConstructionResourceType, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcCrewResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcCrewResourceType() { }

		public IfcCrewResourceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcCrewResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcCsgPrimitive3D : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public IfcAxis2Placement3D Position { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public abstract List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract List<IfcStyledItem> GetStyledByItem();
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcCsgPrimitive3D() { }

		public IfcCsgPrimitive3D(IfcAxis2Placement3D Position)
		{
			this.Position = Position;
		}
	}

	public class IfcCsgSolid : IfcSolidModel, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcCsgSelect TreeRootExpression { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCsgSolid() { }

		public IfcCsgSolid(IfcCsgSelect TreeRootExpression)
		{
			this.TreeRootExpression = TreeRootExpression;
		}
	}

	public class IfcCurrencyRelationship : IfcResourceLevelRelationship
	{
		public IfcMonetaryUnit RelatingMonetaryUnit { get; set; }
		public IfcMonetaryUnit RelatedMonetaryUnit { get; set; }
		public IfcPositiveRatioMeasure ExchangeRate { get; set; }
		public IfcDateTime RateDateTime { get; set; }
		public IfcLibraryInformation RateSource { get; set; }
		public IfcCurrencyRelationship() { }

		public IfcCurrencyRelationship(IfcLabel Name, IfcText Description, IfcMonetaryUnit RelatingMonetaryUnit, IfcMonetaryUnit RelatedMonetaryUnit, IfcPositiveRatioMeasure ExchangeRate, IfcDateTime RateDateTime, IfcLibraryInformation RateSource)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingMonetaryUnit = RelatingMonetaryUnit;
			this.RelatedMonetaryUnit = RelatedMonetaryUnit;
			this.ExchangeRate = ExchangeRate;
			this.RateDateTime = RateDateTime;
			this.RateSource = RateSource;
		}
	}

	public class IfcCurtainWall : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcCurtainWallTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcCurtainWall() { }

		public IfcCurtainWall(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcCurtainWallTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcCurtainWallType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCurtainWallTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcCurtainWallType() { }

		public IfcCurtainWallType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcCurtainWallTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcCurve : IfcGeometricRepresentationItem, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcDimensionCount Dim => IfcCurveDim(this);
		// DERIVE : Dim : IfcDimensionCount := IfcCurveDim(SELF);
		public abstract List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract List<IfcStyledItem> GetStyledByItem();
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcCurve() { }
	}

	public class IfcCurveBoundedPlane : IfcBoundedSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcPlane BasisSurface { get; set; }
		public IfcCurve OuterBoundary { get; set; }
		public List<IfcCurve> InnerBoundaries { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCurveBoundedPlane() { }

		public IfcCurveBoundedPlane(IfcPlane BasisSurface, IfcCurve OuterBoundary, List<IfcCurve> InnerBoundaries)
		{
			this.BasisSurface = BasisSurface;
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
	}

	public class IfcCurveBoundedSurface : IfcBoundedSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcSurface BasisSurface { get; set; }
		public List<IfcBoundaryCurve> Boundaries { get; set; }
		public IfcBoolean ImplicitOuter { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCurveBoundedSurface() { }

		public IfcCurveBoundedSurface(IfcSurface BasisSurface, List<IfcBoundaryCurve> Boundaries, IfcBoolean ImplicitOuter)
		{
			this.BasisSurface = BasisSurface;
			this.Boundaries = Boundaries;
			this.ImplicitOuter = ImplicitOuter;
		}
	}

	public class IfcCurveStyle : IfcPresentationStyle, IfcPresentationStyleSelect, IfcStyleAssignmentSelect
	{
		public IfcCurveFontOrScaledCurveFontSelect CurveFont { get; set; }
		public IfcSizeSelect CurveWidth { get; set; }
		public IfcColour CurveColour { get; set; }
		public IfcBoolean ModelOrDraughting { get; set; }
		public IfcCurveStyle() { }

		public IfcCurveStyle(IfcLabel Name, IfcCurveFontOrScaledCurveFontSelect CurveFont, IfcSizeSelect CurveWidth, IfcColour CurveColour, IfcBoolean ModelOrDraughting)
		{
			this.Name = Name;
			this.CurveFont = CurveFont;
			this.CurveWidth = CurveWidth;
			this.CurveColour = CurveColour;
			this.ModelOrDraughting = ModelOrDraughting;
		}
	}

	public class IfcCurveStyleFont : IfcPresentationItem, IfcCurveStyleFontSelect
	{
		public IfcLabel Name { get; set; }
		public List<IfcCurveStyleFontPattern> PatternList { get; set; }
		public virtual IfcLabel GetName() { return Name; }
		public IfcCurveStyleFont() { }

		public IfcCurveStyleFont(IfcLabel Name, List<IfcCurveStyleFontPattern> PatternList)
		{
			this.Name = Name;
			this.PatternList = PatternList;
		}
	}

	public class IfcCurveStyleFontAndScaling : IfcPresentationItem, IfcCurveFontOrScaledCurveFontSelect
	{
		public IfcLabel Name { get; set; }
		public IfcCurveStyleFontSelect CurveFont { get; set; }
		public IfcPositiveRatioMeasure CurveFontScaling { get; set; }
		public IfcCurveStyleFontAndScaling() { }

		public IfcCurveStyleFontAndScaling(IfcLabel Name, IfcCurveStyleFontSelect CurveFont, IfcPositiveRatioMeasure CurveFontScaling)
		{
			this.Name = Name;
			this.CurveFont = CurveFont;
			this.CurveFontScaling = CurveFontScaling;
		}
	}

	public class IfcCurveStyleFontPattern : IfcPresentationItem
	{
		public IfcLengthMeasure VisibleSegmentLength { get; set; }
		public IfcPositiveLengthMeasure InvisibleSegmentLength { get; set; }
		public IfcCurveStyleFontPattern() { }

		public IfcCurveStyleFontPattern(IfcLengthMeasure VisibleSegmentLength, IfcPositiveLengthMeasure InvisibleSegmentLength)
		{
			this.VisibleSegmentLength = VisibleSegmentLength;
			this.InvisibleSegmentLength = InvisibleSegmentLength;
		}
	}

	public class IfcCylindricalSurface : IfcElementarySurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcPositiveLengthMeasure Radius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcCylindricalSurface() { }

		public IfcCylindricalSurface(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure Radius)
		{
			this.Position = Position;
			this.Radius = Radius;
		}
	}

	public class IfcDamper : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcDamperTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDamper() { }

		public IfcDamper(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcDamperTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDamperType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDamperTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDamperType() { }

		public IfcDamperType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcDamperTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDerivedProfileDef : IfcProfileDef, IfcResourceObjectSelect
	{
		public IfcProfileDef ParentProfile { get; set; }
		public IfcCartesianTransformationOperator2D Operator { get; set; }
		public IfcLabel Label { get; set; }
		public IfcDerivedProfileDef() { }

		public IfcDerivedProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcProfileDef ParentProfile, IfcCartesianTransformationOperator2D Operator, IfcLabel Label)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.ParentProfile = ParentProfile;
			this.Operator = Operator;
			this.Label = Label;
		}
	}

	public class IfcDerivedUnit : IfcBase, IfcUnit
	{
		public List<IfcDerivedUnitElement> Elements { get; set; }
		public IfcDerivedUnitEnum UnitType { get; set; }
		public IfcLabel UserDefinedType { get; set; }
		public IfcDimensionalExponents Dimensions => IfcDeriveDimensionalExponents(Elements);
		// DERIVE : Dimensions : IfcDimensionalExponents := IfcDeriveDimensionalExponents(Elements);
		public IfcDerivedUnit() { }

		public IfcDerivedUnit(List<IfcDerivedUnitElement> Elements, IfcDerivedUnitEnum UnitType, IfcLabel UserDefinedType)
		{
			this.Elements = Elements;
			this.UnitType = UnitType;
			this.UserDefinedType = UserDefinedType;
		}
	}

	public class IfcDerivedUnitElement : IfcBase
	{
		public IfcNamedUnit Unit { get; set; }
		public INTEGER Exponent { get; set; }
		public IfcDerivedUnitElement() { }

		public IfcDerivedUnitElement(IfcNamedUnit Unit, INTEGER Exponent)
		{
			this.Unit = Unit;
			this.Exponent = Exponent;
		}
	}

	public class IfcDimensionalExponents : IfcBase
	{
		public INTEGER LengthExponent { get; set; }
		public INTEGER MassExponent { get; set; }
		public INTEGER TimeExponent { get; set; }
		public INTEGER ElectricCurrentExponent { get; set; }
		public INTEGER ThermodynamicTemperatureExponent { get; set; }
		public INTEGER AmountOfSubstanceExponent { get; set; }
		public INTEGER LuminousIntensityExponent { get; set; }
		public IfcDimensionalExponents() { }

		public IfcDimensionalExponents(INTEGER LengthExponent, INTEGER MassExponent, INTEGER TimeExponent, INTEGER ElectricCurrentExponent, INTEGER ThermodynamicTemperatureExponent, INTEGER AmountOfSubstanceExponent, INTEGER LuminousIntensityExponent)
		{
			this.LengthExponent = LengthExponent;
			this.MassExponent = MassExponent;
			this.TimeExponent = TimeExponent;
			this.ElectricCurrentExponent = ElectricCurrentExponent;
			this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
			this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
			this.LuminousIntensityExponent = LuminousIntensityExponent;
		}
	}

	public class IfcDirection : IfcGeometricRepresentationItem, IfcGridPlacementDirectionSelect, IfcLayeredItem, IfcVectorOrDirection
	{
		public List<IfcReal> DirectionRatios { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)DirectionRatios.Count;
		// DERIVE : Dim : IfcDimensionCount := HIINDEX(DirectionRatios);
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcDirection() { }

		public IfcDirection(List<IfcReal> DirectionRatios)
		{
			this.DirectionRatios = DirectionRatios;
		}
	}

	public class IfcDiscreteAccessory : IfcElementComponent, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcDiscreteAccessoryTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDiscreteAccessory() { }

		public IfcDiscreteAccessory(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcDiscreteAccessoryTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDiscreteAccessoryType : IfcElementComponentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDiscreteAccessoryTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDiscreteAccessoryType() { }

		public IfcDiscreteAccessoryType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcDiscreteAccessoryTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDistributionChamberElement : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcDistributionChamberElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDistributionChamberElement() { }

		public IfcDistributionChamberElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcDistributionChamberElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDistributionChamberElementType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDistributionChamberElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDistributionChamberElementType() { }

		public IfcDistributionChamberElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcDistributionChamberElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDistributionCircuit : IfcDistributionSystem, IfcDefinitionSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcDistributionCircuit() { }

		public IfcDistributionCircuit(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLabel LongName, IfcDistributionSystemEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.LongName = LongName;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDistributionControlElement : IfcDistributionElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public List<IfcRelFlowControlElements> AssignedToFlowElement => Model.GetInstances<IfcRelFlowControlElements>().Where(e => e.RelatedControlElements.Contains(this)).ToList();
		// INVERSE : AssignedToFlowElement : SET [0:1] OF IfcRelFlowControlElements FOR RelatedControlElements;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDistributionControlElement() { }

		public IfcDistributionControlElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcDistributionControlElementType : IfcDistributionElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcDistributionControlElementType() { }

		public IfcDistributionControlElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcDistributionElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public List<IfcRelConnectsPortToElement> HasPorts => Model.GetInstances<IfcRelConnectsPortToElement>().Where(e => e.RelatedElement == this).ToList();
		// INVERSE : HasPorts : SET [0:?] OF IfcRelConnectsPortToElement FOR RelatedElement;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDistributionElement() { }

		public IfcDistributionElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public class IfcDistributionElementType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDistributionElementType() { }

		public IfcDistributionElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcDistributionFlowElement : IfcDistributionElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public List<IfcRelFlowControlElements> HasControlElements => Model.GetInstances<IfcRelFlowControlElements>().Where(e => e.RelatingFlowElement == this).ToList();
		// INVERSE : HasControlElements : SET [0:1] OF IfcRelFlowControlElements FOR RelatingFlowElement;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDistributionFlowElement() { }

		public IfcDistributionFlowElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcDistributionFlowElementType : IfcDistributionElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcDistributionFlowElementType() { }

		public IfcDistributionFlowElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcDistributionPort : IfcPort, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFlowDirectionEnum FlowDirection { get; set; }
		public IfcDistributionPortTypeEnum PredefinedType { get; set; }
		public IfcDistributionSystemEnum SystemType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDistributionPort() { }

		public IfcDistributionPort(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcFlowDirectionEnum FlowDirection, IfcDistributionPortTypeEnum PredefinedType, IfcDistributionSystemEnum SystemType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.FlowDirection = FlowDirection;
			this.PredefinedType = PredefinedType;
			this.SystemType = SystemType;
		}
	}

	public class IfcDistributionSystem : IfcSystem, IfcDefinitionSelect
	{
		public IfcLabel LongName { get; set; }
		public IfcDistributionSystemEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcDistributionSystem() { }

		public IfcDistributionSystem(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLabel LongName, IfcDistributionSystemEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.LongName = LongName;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDocumentInformation : IfcExternalInformation, IfcDocumentSelect, IfcResourceObjectSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcURIReference Location { get; set; }
		public IfcText Purpose { get; set; }
		public IfcText IntendedUse { get; set; }
		public IfcText Scope { get; set; }
		public IfcLabel Revision { get; set; }
		public IfcActorSelect DocumentOwner { get; set; }
		public List<IfcActorSelect> Editors { get; set; }
		public IfcDateTime CreationTime { get; set; }
		public IfcDateTime LastRevisionTime { get; set; }
		public IfcIdentifier ElectronicFormat { get; set; }
		public IfcDate ValidFrom { get; set; }
		public IfcDate ValidUntil { get; set; }
		public IfcDocumentConfidentialityEnum Confidentiality { get; set; }
		public IfcDocumentStatusEnum Status { get; set; }
		public List<IfcRelAssociatesDocument> DocumentInfoForObjects => Model.GetInstances<IfcRelAssociatesDocument>().Where(e => e.RelatingDocument == this).ToList();
		// INVERSE : DocumentInfoForObjects : SET [0:?] OF IfcRelAssociatesDocument FOR RelatingDocument;
		public List<IfcDocumentReference> HasDocumentReferences => Model.GetInstances<IfcDocumentReference>().Where(e => e.ReferencedDocument == this).ToList();
		// INVERSE : HasDocumentReferences : SET [0:?] OF IfcDocumentReference FOR ReferencedDocument;
		public List<IfcDocumentInformationRelationship> IsPointedTo => Model.GetInstances<IfcDocumentInformationRelationship>().Where(e => e.RelatedDocuments.Contains(this)).ToList();
		// INVERSE : IsPointedTo : SET [0:?] OF IfcDocumentInformationRelationship FOR RelatedDocuments;
		public List<IfcDocumentInformationRelationship> IsPointer => Model.GetInstances<IfcDocumentInformationRelationship>().Where(e => e.RelatingDocument == this).ToList();
		// INVERSE : IsPointer : SET [0:1] OF IfcDocumentInformationRelationship FOR RelatingDocument;
		public virtual IfcIdentifier GetIdentification() { return Identification; }
		public virtual IfcLabel GetName() { return Name; }
		public virtual IfcText GetDescription() { return Description; }
		public virtual IfcURIReference GetLocation() { return Location; }
		public IfcDocumentInformation() { }

		public IfcDocumentInformation(IfcIdentifier Identification, IfcLabel Name, IfcText Description, IfcURIReference Location, IfcText Purpose, IfcText IntendedUse, IfcText Scope, IfcLabel Revision, IfcActorSelect DocumentOwner, List<IfcActorSelect> Editors, IfcDateTime CreationTime, IfcDateTime LastRevisionTime, IfcIdentifier ElectronicFormat, IfcDate ValidFrom, IfcDate ValidUntil, IfcDocumentConfidentialityEnum Confidentiality, IfcDocumentStatusEnum Status)
		{
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.Location = Location;
			this.Purpose = Purpose;
			this.IntendedUse = IntendedUse;
			this.Scope = Scope;
			this.Revision = Revision;
			this.DocumentOwner = DocumentOwner;
			this.Editors = Editors;
			this.CreationTime = CreationTime;
			this.LastRevisionTime = LastRevisionTime;
			this.ElectronicFormat = ElectronicFormat;
			this.ValidFrom = ValidFrom;
			this.ValidUntil = ValidUntil;
			this.Confidentiality = Confidentiality;
			this.Status = Status;
		}
	}

	public class IfcDocumentInformationRelationship : IfcResourceLevelRelationship
	{
		public IfcDocumentInformation RelatingDocument { get; set; }
		public List<IfcDocumentInformation> RelatedDocuments { get; set; }
		public IfcLabel RelationshipType { get; set; }
		public IfcDocumentInformationRelationship() { }

		public IfcDocumentInformationRelationship(IfcLabel Name, IfcText Description, IfcDocumentInformation RelatingDocument, List<IfcDocumentInformation> RelatedDocuments, IfcLabel RelationshipType)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingDocument = RelatingDocument;
			this.RelatedDocuments = RelatedDocuments;
			this.RelationshipType = RelationshipType;
		}
	}

	public class IfcDocumentReference : IfcExternalReference, IfcDocumentSelect, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcText Description { get; set; }
		public IfcDocumentInformation ReferencedDocument { get; set; }
		public List<IfcRelAssociatesDocument> DocumentRefForObjects => Model.GetInstances<IfcRelAssociatesDocument>().Where(e => e.RelatingDocument == this).ToList();
		// INVERSE : DocumentRefForObjects : SET [0:?] OF IfcRelAssociatesDocument FOR RelatingDocument;
		public virtual IfcIdentifier GetIdentification() { return Identification; }
		public virtual IfcLabel GetName() { return Name; }
		public virtual IfcText GetDescription() { return Description; }
		public virtual IfcURIReference GetLocation() { return Location; }
		public IfcDocumentReference() { }

		public IfcDocumentReference(IfcURIReference Location, IfcIdentifier Identification, IfcLabel Name, IfcText Description, IfcDocumentInformation ReferencedDocument)
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.ReferencedDocument = ReferencedDocument;
		}
	}

	public class IfcDoor : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPositiveLengthMeasure OverallHeight { get; set; }
		public IfcPositiveLengthMeasure OverallWidth { get; set; }
		public IfcDoorTypeEnum PredefinedType { get; set; }
		public IfcDoorTypeOperationEnum OperationType { get; set; }
		public IfcLabel UserDefinedOperationType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDoor() { }

		public IfcDoor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPositiveLengthMeasure OverallHeight, IfcPositiveLengthMeasure OverallWidth, IfcDoorTypeEnum PredefinedType, IfcDoorTypeOperationEnum OperationType, IfcLabel UserDefinedOperationType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.OperationType = OperationType;
			this.UserDefinedOperationType = UserDefinedOperationType;
		}
	}

	public class IfcDoorLiningProperties : IfcPreDefinedPropertySet, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public IfcPositiveLengthMeasure LiningDepth { get; set; }
		public IfcNonNegativeLengthMeasure LiningThickness { get; set; }
		public IfcPositiveLengthMeasure ThresholdDepth { get; set; }
		public IfcNonNegativeLengthMeasure ThresholdThickness { get; set; }
		public IfcNonNegativeLengthMeasure TransomThickness { get; set; }
		public IfcLengthMeasure TransomOffset { get; set; }
		public IfcLengthMeasure LiningOffset { get; set; }
		public IfcLengthMeasure ThresholdOffset { get; set; }
		public IfcPositiveLengthMeasure CasingThickness { get; set; }
		public IfcPositiveLengthMeasure CasingDepth { get; set; }
		public IfcShapeAspect ShapeAspectStyle { get; set; }
		public IfcLengthMeasure LiningToPanelOffsetX { get; set; }
		public IfcLengthMeasure LiningToPanelOffsetY { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcDoorLiningProperties() { }

		public IfcDoorLiningProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPositiveLengthMeasure LiningDepth, IfcNonNegativeLengthMeasure LiningThickness, IfcPositiveLengthMeasure ThresholdDepth, IfcNonNegativeLengthMeasure ThresholdThickness, IfcNonNegativeLengthMeasure TransomThickness, IfcLengthMeasure TransomOffset, IfcLengthMeasure LiningOffset, IfcLengthMeasure ThresholdOffset, IfcPositiveLengthMeasure CasingThickness, IfcPositiveLengthMeasure CasingDepth, IfcShapeAspect ShapeAspectStyle, IfcLengthMeasure LiningToPanelOffsetX, IfcLengthMeasure LiningToPanelOffsetY)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.ThresholdDepth = ThresholdDepth;
			this.ThresholdThickness = ThresholdThickness;
			this.TransomThickness = TransomThickness;
			this.TransomOffset = TransomOffset;
			this.LiningOffset = LiningOffset;
			this.ThresholdOffset = ThresholdOffset;
			this.CasingThickness = CasingThickness;
			this.CasingDepth = CasingDepth;
			this.ShapeAspectStyle = ShapeAspectStyle;
			this.LiningToPanelOffsetX = LiningToPanelOffsetX;
			this.LiningToPanelOffsetY = LiningToPanelOffsetY;
		}
	}

	public class IfcDoorPanelProperties : IfcPreDefinedPropertySet, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public IfcPositiveLengthMeasure PanelDepth { get; set; }
		public IfcDoorPanelOperationEnum PanelOperation { get; set; }
		public IfcNormalisedRatioMeasure PanelWidth { get; set; }
		public IfcDoorPanelPositionEnum PanelPosition { get; set; }
		public IfcShapeAspect ShapeAspectStyle { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcDoorPanelProperties() { }

		public IfcDoorPanelProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPositiveLengthMeasure PanelDepth, IfcDoorPanelOperationEnum PanelOperation, IfcNormalisedRatioMeasure PanelWidth, IfcDoorPanelPositionEnum PanelPosition, IfcShapeAspect ShapeAspectStyle)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.PanelDepth = PanelDepth;
			this.PanelOperation = PanelOperation;
			this.PanelWidth = PanelWidth;
			this.PanelPosition = PanelPosition;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
	}

	public class IfcDoorStandardCase : IfcDoor, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDoorStandardCase() { }

		public IfcDoorStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPositiveLengthMeasure OverallHeight, IfcPositiveLengthMeasure OverallWidth, IfcDoorTypeEnum PredefinedType, IfcDoorTypeOperationEnum OperationType, IfcLabel UserDefinedOperationType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.OperationType = OperationType;
			this.UserDefinedOperationType = UserDefinedOperationType;
		}
	}

	public class IfcDoorStyle : IfcTypeProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDoorStyleOperationEnum OperationType { get; set; }
		public IfcDoorStyleConstructionEnum ConstructionType { get; set; }
		public IfcBoolean ParameterTakesPrecedence { get; set; }
		public IfcBoolean Sizeable { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDoorStyle() { }

		public IfcDoorStyle(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcDoorStyleOperationEnum OperationType, IfcDoorStyleConstructionEnum ConstructionType, IfcBoolean ParameterTakesPrecedence, IfcBoolean Sizeable)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.OperationType = OperationType;
			this.ConstructionType = ConstructionType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
	}

	public class IfcDoorType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDoorTypeEnum PredefinedType { get; set; }
		public IfcDoorTypeOperationEnum OperationType { get; set; }
		public IfcBoolean ParameterTakesPrecedence { get; set; }
		public IfcLabel UserDefinedOperationType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDoorType() { }

		public IfcDoorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcDoorTypeEnum PredefinedType, IfcDoorTypeOperationEnum OperationType, IfcBoolean ParameterTakesPrecedence, IfcLabel UserDefinedOperationType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.UserDefinedOperationType = UserDefinedOperationType;
		}
	}

	public class IfcDraughtingPreDefinedColour : IfcPreDefinedColour, IfcColour
	{
		public override IfcLabel GetName() { return Name; }
		public IfcDraughtingPreDefinedColour() { }

		public IfcDraughtingPreDefinedColour(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcDraughtingPreDefinedCurveFont : IfcPreDefinedCurveFont, IfcCurveStyleFontSelect
	{
		public override IfcLabel GetName() { return Name; }
		public IfcDraughtingPreDefinedCurveFont() { }

		public IfcDraughtingPreDefinedCurveFont(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcDuctFitting : IfcFlowFitting, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcDuctFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDuctFitting() { }

		public IfcDuctFitting(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcDuctFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDuctFittingType : IfcFlowFittingType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDuctFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDuctFittingType() { }

		public IfcDuctFittingType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcDuctFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDuctSegment : IfcFlowSegment, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcDuctSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDuctSegment() { }

		public IfcDuctSegment(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcDuctSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDuctSegmentType : IfcFlowSegmentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDuctSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDuctSegmentType() { }

		public IfcDuctSegmentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcDuctSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDuctSilencer : IfcFlowTreatmentDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcDuctSilencerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcDuctSilencer() { }

		public IfcDuctSilencer(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcDuctSilencerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcDuctSilencerType : IfcFlowTreatmentDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcDuctSilencerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcDuctSilencerType() { }

		public IfcDuctSilencerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcDuctSilencerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcEdge : IfcTopologicalRepresentationItem, IfcLayeredItem
	{
		public IfcVertex EdgeStart { get; set; }
		public IfcVertex EdgeEnd { get; set; }
		public IfcEdge() { }

		public IfcEdge(IfcVertex EdgeStart, IfcVertex EdgeEnd)
		{
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
		}
	}

	public class IfcEdgeCurve : IfcEdge, IfcCurveOrEdgeCurve, IfcLayeredItem
	{
		public IfcCurve EdgeGeometry { get; set; }
		public IfcBoolean SameSense { get; set; }
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public IfcEdgeCurve() { }

		public IfcEdgeCurve(IfcVertex EdgeStart, IfcVertex EdgeEnd, IfcCurve EdgeGeometry, IfcBoolean SameSense)
		{
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
			this.EdgeGeometry = EdgeGeometry;
			this.SameSense = SameSense;
		}
	}

	public class IfcEdgeLoop : IfcLoop, IfcLayeredItem
	{
		public List<IfcOrientedEdge> EdgeList { get; set; }
		public IfcInteger Ne => (IfcInteger)EdgeList.Count;
		// DERIVE : Ne : IfcInteger := SIZEOF(EdgeList);
		public IfcEdgeLoop() { }

		public IfcEdgeLoop(List<IfcOrientedEdge> EdgeList)
		{
			this.EdgeList = EdgeList;
		}
	}

	public class IfcElectricAppliance : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcElectricApplianceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcElectricAppliance() { }

		public IfcElectricAppliance(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcElectricApplianceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricApplianceType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElectricApplianceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcElectricApplianceType() { }

		public IfcElectricApplianceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcElectricApplianceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricDistributionBoard : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcElectricDistributionBoardTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcElectricDistributionBoard() { }

		public IfcElectricDistributionBoard(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcElectricDistributionBoardTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricDistributionBoardType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElectricDistributionBoardTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcElectricDistributionBoardType() { }

		public IfcElectricDistributionBoardType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcElectricDistributionBoardTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricFlowStorageDevice : IfcFlowStorageDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcElectricFlowStorageDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcElectricFlowStorageDevice() { }

		public IfcElectricFlowStorageDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcElectricFlowStorageDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricFlowStorageDeviceType : IfcFlowStorageDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElectricFlowStorageDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcElectricFlowStorageDeviceType() { }

		public IfcElectricFlowStorageDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcElectricFlowStorageDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricGenerator : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcElectricGeneratorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcElectricGenerator() { }

		public IfcElectricGenerator(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcElectricGeneratorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricGeneratorType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElectricGeneratorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcElectricGeneratorType() { }

		public IfcElectricGeneratorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcElectricGeneratorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricMotor : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcElectricMotorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcElectricMotor() { }

		public IfcElectricMotor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcElectricMotorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricMotorType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElectricMotorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcElectricMotorType() { }

		public IfcElectricMotorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcElectricMotorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricTimeControl : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcElectricTimeControlTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcElectricTimeControl() { }

		public IfcElectricTimeControl(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcElectricTimeControlTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElectricTimeControlType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElectricTimeControlTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcElectricTimeControlType() { }

		public IfcElectricTimeControlType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcElectricTimeControlTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcElement : IfcProduct, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcIdentifier Tag { get; set; }
		public List<IfcRelFillsElement> FillsVoids => Model.GetInstances<IfcRelFillsElement>().Where(e => e.RelatedBuildingElement == this).ToList();
		// INVERSE : FillsVoids : SET [0:1] OF IfcRelFillsElement FOR RelatedBuildingElement;
		public List<IfcRelConnectsElements> ConnectedTo => Model.GetInstances<IfcRelConnectsElements>().Where(e => e.RelatingElement == this).ToList();
		// INVERSE : ConnectedTo : SET [0:?] OF IfcRelConnectsElements FOR RelatingElement;
		public List<IfcRelInterferesElements> IsInterferedByElements => Model.GetInstances<IfcRelInterferesElements>().Where(e => e.RelatedElement == this).ToList();
		// INVERSE : IsInterferedByElements : SET [0:?] OF IfcRelInterferesElements FOR RelatedElement;
		public List<IfcRelInterferesElements> InterferesElements => Model.GetInstances<IfcRelInterferesElements>().Where(e => e.RelatingElement == this).ToList();
		// INVERSE : InterferesElements : SET [0:?] OF IfcRelInterferesElements FOR RelatingElement;
		public List<IfcRelProjectsElement> HasProjections => Model.GetInstances<IfcRelProjectsElement>().Where(e => e.RelatingElement == this).ToList();
		// INVERSE : HasProjections : SET [0:?] OF IfcRelProjectsElement FOR RelatingElement;
		public List<IfcRelReferencedInSpatialStructure> ReferencedInStructures => Model.GetInstances<IfcRelReferencedInSpatialStructure>().Where(e => e.RelatedElements.Contains(this)).ToList();
		// INVERSE : ReferencedInStructures : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatedElements;
		public List<IfcRelVoidsElement> HasOpenings => Model.GetInstances<IfcRelVoidsElement>().Where(e => e.RelatingBuildingElement == this).ToList();
		// INVERSE : HasOpenings : SET [0:?] OF IfcRelVoidsElement FOR RelatingBuildingElement;
		public List<IfcRelConnectsWithRealizingElements> IsConnectionRealization => Model.GetInstances<IfcRelConnectsWithRealizingElements>().Where(e => e.RealizingElements.Contains(this)).ToList();
		// INVERSE : IsConnectionRealization : SET [0:?] OF IfcRelConnectsWithRealizingElements FOR RealizingElements;
		public List<IfcRelSpaceBoundary> ProvidesBoundaries => Model.GetInstances<IfcRelSpaceBoundary>().Where(e => e.RelatedBuildingElement == this).ToList();
		// INVERSE : ProvidesBoundaries : SET [0:?] OF IfcRelSpaceBoundary FOR RelatedBuildingElement;
		public List<IfcRelConnectsElements> ConnectedFrom => Model.GetInstances<IfcRelConnectsElements>().Where(e => e.RelatedElement == this).ToList();
		// INVERSE : ConnectedFrom : SET [0:?] OF IfcRelConnectsElements FOR RelatedElement;
		public List<IfcRelContainedInSpatialStructure> ContainedInStructure => Model.GetInstances<IfcRelContainedInSpatialStructure>().Where(e => e.RelatedElements.Contains(this)).ToList();
		// INVERSE : ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
		public List<IfcRelCoversBldgElements> HasCoverings => Model.GetInstances<IfcRelCoversBldgElements>().Where(e => e.RelatingBuildingElement == this).ToList();
		// INVERSE : HasCoverings : SET [0:?] OF IfcRelCoversBldgElements FOR RelatingBuildingElement;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract IfcLabel GetObjectType();
		public abstract List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract List<IfcRelDefinesByObject> GetDeclares();
		public abstract List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract IfcObjectPlacement GetObjectPlacement();
		public abstract IfcProductRepresentation GetRepresentation();
		public IfcElement() { }

		public IfcElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public class IfcElementAssembly : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcAssemblyPlaceEnum AssemblyPlace { get; set; }
		public IfcElementAssemblyTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcElementAssembly() { }

		public IfcElementAssembly(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcAssemblyPlaceEnum AssemblyPlace, IfcElementAssemblyTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcElementAssemblyType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElementAssemblyTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcElementAssemblyType() { }

		public IfcElementAssemblyType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcElementAssemblyTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcElementComponent : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcElementComponent() { }

		public IfcElementComponent(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcElementComponentType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcElementComponentType() { }

		public IfcElementComponentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcElementQuantity : IfcQuantitySet, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public IfcLabel MethodOfMeasurement { get; set; }
		public List<IfcPhysicalQuantity> Quantities { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcElementQuantity() { }

		public IfcElementQuantity(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel MethodOfMeasurement, List<IfcPhysicalQuantity> Quantities)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.MethodOfMeasurement = MethodOfMeasurement;
			this.Quantities = Quantities;
		}
	}

	public abstract class IfcElementType : IfcTypeProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcLabel ElementType { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcElementType() { }

		public IfcElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public abstract class IfcElementarySurface : IfcSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcAxis2Placement3D Position { get; set; }
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcElementarySurface() { }

		public IfcElementarySurface(IfcAxis2Placement3D Position)
		{
			this.Position = Position;
		}
	}

	public class IfcEllipse : IfcConic, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcPositiveLengthMeasure SemiAxis1 { get; set; }
		public IfcPositiveLengthMeasure SemiAxis2 { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcEllipse() { }

		public IfcEllipse(IfcAxis2Placement Position, IfcPositiveLengthMeasure SemiAxis1, IfcPositiveLengthMeasure SemiAxis2)
		{
			this.Position = Position;
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
	}

	public class IfcEllipseProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure SemiAxis1 { get; set; }
		public IfcPositiveLengthMeasure SemiAxis2 { get; set; }
		public IfcEllipseProfileDef() { }

		public IfcEllipseProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure SemiAxis1, IfcPositiveLengthMeasure SemiAxis2)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
	}

	public class IfcEnergyConversionDevice : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcEnergyConversionDevice() { }

		public IfcEnergyConversionDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcEnergyConversionDeviceType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcEnergyConversionDeviceType() { }

		public IfcEnergyConversionDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcEngine : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcEngineTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcEngine() { }

		public IfcEngine(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcEngineTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcEngineType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcEngineTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcEngineType() { }

		public IfcEngineType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcEngineTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcEvaporativeCooler : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcEvaporativeCoolerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcEvaporativeCooler() { }

		public IfcEvaporativeCooler(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcEvaporativeCoolerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcEvaporativeCoolerType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcEvaporativeCoolerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcEvaporativeCoolerType() { }

		public IfcEvaporativeCoolerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcEvaporativeCoolerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcEvaporator : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcEvaporatorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcEvaporator() { }

		public IfcEvaporator(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcEvaporatorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcEvaporatorType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcEvaporatorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcEvaporatorType() { }

		public IfcEvaporatorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcEvaporatorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcEvent : IfcProcess, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcEventTypeEnum PredefinedType { get; set; }
		public IfcEventTriggerTypeEnum EventTriggerType { get; set; }
		public IfcLabel UserDefinedEventTriggerType { get; set; }
		public IfcEventTime EventOccurenceTime { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcEvent() { }

		public IfcEvent(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcEventTypeEnum PredefinedType, IfcEventTriggerTypeEnum EventTriggerType, IfcLabel UserDefinedEventTriggerType, IfcEventTime EventOccurenceTime)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.PredefinedType = PredefinedType;
			this.EventTriggerType = EventTriggerType;
			this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
			this.EventOccurenceTime = EventOccurenceTime;
		}
	}

	public class IfcEventTime : IfcSchedulingTime
	{
		public IfcDateTime ActualDate { get; set; }
		public IfcDateTime EarlyDate { get; set; }
		public IfcDateTime LateDate { get; set; }
		public IfcDateTime ScheduleDate { get; set; }
		public IfcEventTime() { }

		public IfcEventTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcDateTime ActualDate, IfcDateTime EarlyDate, IfcDateTime LateDate, IfcDateTime ScheduleDate)
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.ActualDate = ActualDate;
			this.EarlyDate = EarlyDate;
			this.LateDate = LateDate;
			this.ScheduleDate = ScheduleDate;
		}
	}

	public class IfcEventType : IfcTypeProcess, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcEventTypeEnum PredefinedType { get; set; }
		public IfcEventTriggerTypeEnum EventTriggerType { get; set; }
		public IfcLabel UserDefinedEventTriggerType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcEventType() { }

		public IfcEventType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ProcessType, IfcEventTypeEnum PredefinedType, IfcEventTriggerTypeEnum EventTriggerType, IfcLabel UserDefinedEventTriggerType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ProcessType = ProcessType;
			this.PredefinedType = PredefinedType;
			this.EventTriggerType = EventTriggerType;
			this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
		}
	}

	public abstract class IfcExtendedProperties : IfcPropertyAbstraction, IfcResourceObjectSelect
	{
		public IfcIdentifier Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcProperty> Properties { get; set; }
		public IfcExtendedProperties() { }

		public IfcExtendedProperties(IfcIdentifier Name, IfcText Description, List<IfcProperty> Properties)
		{
			this.Name = Name;
			this.Description = Description;
			this.Properties = Properties;
		}
	}

	public abstract class IfcExternalInformation : IfcBase, IfcResourceObjectSelect
	{
		public IfcExternalInformation() { }
	}

	public abstract class IfcExternalReference : IfcBase, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcURIReference Location { get; set; }
		public IfcIdentifier Identification { get; set; }
		public IfcLabel Name { get; set; }
		public List<IfcExternalReferenceRelationship> ExternalReferenceForResources => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatingReference == this).ToList();
		// INVERSE : ExternalReferenceForResources : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatingReference;
		public IfcExternalReference() { }

		public IfcExternalReference(IfcURIReference Location, IfcIdentifier Identification, IfcLabel Name)
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
		}
	}

	public class IfcExternalReferenceRelationship : IfcResourceLevelRelationship
	{
		public IfcExternalReference RelatingReference { get; set; }
		public List<IfcResourceObjectSelect> RelatedResourceObjects { get; set; }
		public IfcExternalReferenceRelationship() { }

		public IfcExternalReferenceRelationship(IfcLabel Name, IfcText Description, IfcExternalReference RelatingReference, List<IfcResourceObjectSelect> RelatedResourceObjects)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingReference = RelatingReference;
			this.RelatedResourceObjects = RelatedResourceObjects;
		}
	}

	public class IfcExternalSpatialElement : IfcExternalSpatialStructureElement, IfcDefinitionSelect, IfcProductSelect, IfcSpaceBoundarySelect
	{
		public IfcExternalSpatialElementTypeEnum PredefinedType { get; set; }
		public List<IfcRelSpaceBoundary> BoundedBy => Model.GetInstances<IfcRelSpaceBoundary>().Where(e => e.RelatingSpace == this).ToList();
		// INVERSE : BoundedBy : SET [0:?] OF IfcRelSpaceBoundary FOR RelatingSpace;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public virtual IfcLabel GetObjectType() { return ObjectType; }
		public virtual List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public virtual List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public virtual List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public virtual List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public virtual IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public virtual IfcProductRepresentation GetRepresentation() { return Representation; }
		public virtual IfcLabel GetLongName() { return LongName; }
		public virtual List<IfcRelContainedInSpatialStructure> GetContainsElements() { return ContainsElements; }
		public virtual List<IfcRelServicesBuildings> GetServicedBySystems() { return ServicedBySystems; }
		public virtual List<IfcRelReferencedInSpatialStructure> GetReferencesElements() { return ReferencesElements; }
		public virtual List<IfcRelSpaceBoundary> GetBoundedBy() { return BoundedBy; }
		public IfcExternalSpatialElement() { }

		public IfcExternalSpatialElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcExternalSpatialElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcExternalSpatialStructureElement : IfcSpatialElement, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcExternalSpatialStructureElement() { }

		public IfcExternalSpatialStructureElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
		}
	}

	public class IfcExternallyDefinedHatchStyle : IfcExternalReference, IfcFillStyleSelect, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcExternallyDefinedHatchStyle() { }

		public IfcExternallyDefinedHatchStyle(IfcURIReference Location, IfcIdentifier Identification, IfcLabel Name)
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
		}
	}

	public class IfcExternallyDefinedSurfaceStyle : IfcExternalReference, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, IfcSurfaceStyleElementSelect
	{
		public IfcExternallyDefinedSurfaceStyle() { }

		public IfcExternallyDefinedSurfaceStyle(IfcURIReference Location, IfcIdentifier Identification, IfcLabel Name)
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
		}
	}

	public class IfcExternallyDefinedTextFont : IfcExternalReference, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, IfcTextFontSelect
	{
		public virtual IfcLabel GetName() { return Name; }
		public IfcExternallyDefinedTextFont() { }

		public IfcExternallyDefinedTextFont(IfcURIReference Location, IfcIdentifier Identification, IfcLabel Name)
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
		}
	}

	public class IfcExtrudedAreaSolid : IfcSweptAreaSolid, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcDirection ExtrudedDirection { get; set; }
		public IfcPositiveLengthMeasure Depth { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcExtrudedAreaSolid() { }

		public IfcExtrudedAreaSolid(IfcProfileDef SweptArea, IfcAxis2Placement3D Position, IfcDirection ExtrudedDirection, IfcPositiveLengthMeasure Depth)
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
	}

	public class IfcExtrudedAreaSolidTapered : IfcExtrudedAreaSolid, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcProfileDef EndSweptArea { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcExtrudedAreaSolidTapered() { }

		public IfcExtrudedAreaSolidTapered(IfcProfileDef SweptArea, IfcAxis2Placement3D Position, IfcDirection ExtrudedDirection, IfcPositiveLengthMeasure Depth, IfcProfileDef EndSweptArea)
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
			this.EndSweptArea = EndSweptArea;
		}
	}

	public class IfcFace : IfcTopologicalRepresentationItem, IfcLayeredItem
	{
		public List<IfcFaceBound> Bounds { get; set; }
		public List<IfcTextureMap> HasTextureMaps => Model.GetInstances<IfcTextureMap>().Where(e => e.MappedTo == this).ToList();
		// INVERSE : HasTextureMaps : SET [0:?] OF IfcTextureMap FOR MappedTo;
		public IfcFace() { }

		public IfcFace(List<IfcFaceBound> Bounds)
		{
			this.Bounds = Bounds;
		}
	}

	public class IfcFaceBasedSurfaceModel : IfcGeometricRepresentationItem, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public List<IfcConnectedFaceSet> FbsmFaces { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public IfcFaceBasedSurfaceModel() { }

		public IfcFaceBasedSurfaceModel(List<IfcConnectedFaceSet> FbsmFaces)
		{
			this.FbsmFaces = FbsmFaces;
		}
	}

	public class IfcFaceBound : IfcTopologicalRepresentationItem, IfcLayeredItem
	{
		public IfcLoop Bound { get; set; }
		public IfcBoolean Orientation { get; set; }
		public IfcFaceBound() { }

		public IfcFaceBound(IfcLoop Bound, IfcBoolean Orientation)
		{
			this.Bound = Bound;
			this.Orientation = Orientation;
		}
	}

	public class IfcFaceOuterBound : IfcFaceBound, IfcLayeredItem
	{
		public IfcFaceOuterBound() { }

		public IfcFaceOuterBound(IfcLoop Bound, IfcBoolean Orientation)
		{
			this.Bound = Bound;
			this.Orientation = Orientation;
		}
	}

	public class IfcFaceSurface : IfcFace, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcSurface FaceSurface { get; set; }
		public IfcBoolean SameSense { get; set; }
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public IfcFaceSurface() { }

		public IfcFaceSurface(List<IfcFaceBound> Bounds, IfcSurface FaceSurface, IfcBoolean SameSense)
		{
			this.Bounds = Bounds;
			this.FaceSurface = FaceSurface;
			this.SameSense = SameSense;
		}
	}

	public class IfcFacetedBrep : IfcManifoldSolidBrep, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcFacetedBrep() { }

		public IfcFacetedBrep(IfcClosedShell Outer)
		{
			this.Outer = Outer;
		}
	}

	public class IfcFacetedBrepWithVoids : IfcFacetedBrep, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public List<IfcClosedShell> Voids { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcFacetedBrepWithVoids() { }

		public IfcFacetedBrepWithVoids(IfcClosedShell Outer, List<IfcClosedShell> Voids)
		{
			this.Outer = Outer;
			this.Voids = Voids;
		}
	}

	public class IfcFailureConnectionCondition : IfcStructuralConnectionCondition
	{
		public IfcForceMeasure TensionFailureX { get; set; }
		public IfcForceMeasure TensionFailureY { get; set; }
		public IfcForceMeasure TensionFailureZ { get; set; }
		public IfcForceMeasure CompressionFailureX { get; set; }
		public IfcForceMeasure CompressionFailureY { get; set; }
		public IfcForceMeasure CompressionFailureZ { get; set; }
		public IfcFailureConnectionCondition() { }

		public IfcFailureConnectionCondition(IfcLabel Name, IfcForceMeasure TensionFailureX, IfcForceMeasure TensionFailureY, IfcForceMeasure TensionFailureZ, IfcForceMeasure CompressionFailureX, IfcForceMeasure CompressionFailureY, IfcForceMeasure CompressionFailureZ)
		{
			this.Name = Name;
			this.TensionFailureX = TensionFailureX;
			this.TensionFailureY = TensionFailureY;
			this.TensionFailureZ = TensionFailureZ;
			this.CompressionFailureX = CompressionFailureX;
			this.CompressionFailureY = CompressionFailureY;
			this.CompressionFailureZ = CompressionFailureZ;
		}
	}

	public class IfcFan : IfcFlowMovingDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFanTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFan() { }

		public IfcFan(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFanTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFanType : IfcFlowMovingDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFanTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFanType() { }

		public IfcFanType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcFanTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFastener : IfcElementComponent, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFastenerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFastener() { }

		public IfcFastener(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFastenerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFastenerType : IfcElementComponentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFastenerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFastenerType() { }

		public IfcFastenerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcFastenerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcFeatureElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcFeatureElement() { }

		public IfcFeatureElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFeatureElementAddition : IfcFeatureElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcRelProjectsElement ProjectsElements => Model.GetInstances<IfcRelProjectsElement>().Where(e => e.RelatedFeatureElement == this).ToList()[0];
		// INVERSE : ProjectsElements : IfcRelProjectsElement FOR RelatedFeatureElement;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcFeatureElementAddition() { }

		public IfcFeatureElementAddition(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFeatureElementSubtraction : IfcFeatureElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcRelVoidsElement VoidsElements => Model.GetInstances<IfcRelVoidsElement>().Where(e => e.RelatedOpeningElement == this).ToList()[0];
		// INVERSE : VoidsElements : IfcRelVoidsElement FOR RelatedOpeningElement;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcFeatureElementSubtraction() { }

		public IfcFeatureElementSubtraction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public class IfcFillAreaStyle : IfcPresentationStyle, IfcPresentationStyleSelect, IfcStyleAssignmentSelect
	{
		public List<IfcFillStyleSelect> FillStyles { get; set; }
		public IfcBoolean ModelorDraughting { get; set; }
		public IfcFillAreaStyle() { }

		public IfcFillAreaStyle(IfcLabel Name, List<IfcFillStyleSelect> FillStyles, IfcBoolean ModelorDraughting)
		{
			this.Name = Name;
			this.FillStyles = FillStyles;
			this.ModelorDraughting = ModelorDraughting;
		}
	}

	public class IfcFillAreaStyleHatching : IfcGeometricRepresentationItem, IfcFillStyleSelect, IfcLayeredItem
	{
		public IfcCurveStyle HatchLineAppearance { get; set; }
		public IfcHatchLineDistanceSelect StartOfNextHatchLine { get; set; }
		public IfcCartesianPoint PointOfReferenceHatchLine { get; set; }
		public IfcCartesianPoint PatternStart { get; set; }
		public IfcPlaneAngleMeasure HatchLineAngle { get; set; }
		public IfcFillAreaStyleHatching() { }

		public IfcFillAreaStyleHatching(IfcCurveStyle HatchLineAppearance, IfcHatchLineDistanceSelect StartOfNextHatchLine, IfcCartesianPoint PointOfReferenceHatchLine, IfcCartesianPoint PatternStart, IfcPlaneAngleMeasure HatchLineAngle)
		{
			this.HatchLineAppearance = HatchLineAppearance;
			this.StartOfNextHatchLine = StartOfNextHatchLine;
			this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
			this.PatternStart = PatternStart;
			this.HatchLineAngle = HatchLineAngle;
		}
	}

	public class IfcFillAreaStyleTiles : IfcGeometricRepresentationItem, IfcFillStyleSelect, IfcLayeredItem
	{
		public List<IfcVector> TilingPattern { get; set; }
		public List<IfcStyledItem> Tiles { get; set; }
		public IfcPositiveRatioMeasure TilingScale { get; set; }
		public IfcFillAreaStyleTiles() { }

		public IfcFillAreaStyleTiles(List<IfcVector> TilingPattern, List<IfcStyledItem> Tiles, IfcPositiveRatioMeasure TilingScale)
		{
			this.TilingPattern = TilingPattern;
			this.Tiles = Tiles;
			this.TilingScale = TilingScale;
		}
	}

	public class IfcFilter : IfcFlowTreatmentDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFilterTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFilter() { }

		public IfcFilter(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFilterTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFilterType : IfcFlowTreatmentDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFilterTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFilterType() { }

		public IfcFilterType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcFilterTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFireSuppressionTerminal : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFireSuppressionTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFireSuppressionTerminal() { }

		public IfcFireSuppressionTerminal(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFireSuppressionTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFireSuppressionTerminalType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFireSuppressionTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFireSuppressionTerminalType() { }

		public IfcFireSuppressionTerminalType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcFireSuppressionTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFixedReferenceSweptAreaSolid : IfcSweptAreaSolid, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcCurve Directrix { get; set; }
		public IfcParameterValue StartParam { get; set; }
		public IfcParameterValue EndParam { get; set; }
		public IfcDirection FixedReference { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcFixedReferenceSweptAreaSolid() { }

		public IfcFixedReferenceSweptAreaSolid(IfcProfileDef SweptArea, IfcAxis2Placement3D Position, IfcCurve Directrix, IfcParameterValue StartParam, IfcParameterValue EndParam, IfcDirection FixedReference)
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.FixedReference = FixedReference;
		}
	}

	public class IfcFlowController : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowController() { }

		public IfcFlowController(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFlowControllerType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcFlowControllerType() { }

		public IfcFlowControllerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFlowFitting : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowFitting() { }

		public IfcFlowFitting(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFlowFittingType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcFlowFittingType() { }

		public IfcFlowFittingType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFlowInstrument : IfcDistributionControlElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFlowInstrumentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowInstrument() { }

		public IfcFlowInstrument(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFlowInstrumentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFlowInstrumentType : IfcDistributionControlElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFlowInstrumentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFlowInstrumentType() { }

		public IfcFlowInstrumentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcFlowInstrumentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFlowMeter : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFlowMeterTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowMeter() { }

		public IfcFlowMeter(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFlowMeterTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFlowMeterType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFlowMeterTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFlowMeterType() { }

		public IfcFlowMeterType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcFlowMeterTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFlowMovingDevice : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowMovingDevice() { }

		public IfcFlowMovingDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFlowMovingDeviceType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcFlowMovingDeviceType() { }

		public IfcFlowMovingDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFlowSegment : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowSegment() { }

		public IfcFlowSegment(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFlowSegmentType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcFlowSegmentType() { }

		public IfcFlowSegmentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFlowStorageDevice : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowStorageDevice() { }

		public IfcFlowStorageDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFlowStorageDeviceType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcFlowStorageDeviceType() { }

		public IfcFlowStorageDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFlowTerminal : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowTerminal() { }

		public IfcFlowTerminal(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFlowTerminalType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcFlowTerminalType() { }

		public IfcFlowTerminalType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFlowTreatmentDevice : IfcDistributionFlowElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFlowTreatmentDevice() { }

		public IfcFlowTreatmentDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public abstract class IfcFlowTreatmentDeviceType : IfcDistributionFlowElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcFlowTreatmentDeviceType() { }

		public IfcFlowTreatmentDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFooting : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFootingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFooting() { }

		public IfcFooting(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFootingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFootingType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcFootingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFootingType() { }

		public IfcFootingType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcFootingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFurnishingElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFurnishingElement() { }

		public IfcFurnishingElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public class IfcFurnishingElementType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFurnishingElementType() { }

		public IfcFurnishingElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcFurniture : IfcFurnishingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcFurnitureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcFurniture() { }

		public IfcFurniture(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcFurnitureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcFurnitureType : IfcFurnishingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcAssemblyPlaceEnum AssemblyPlace { get; set; }
		public IfcFurnitureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcFurnitureType() { }

		public IfcFurnitureType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcAssemblyPlaceEnum AssemblyPlace, IfcFurnitureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcGeographicElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcGeographicElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcGeographicElement() { }

		public IfcGeographicElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcGeographicElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcGeographicElementType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcGeographicElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcGeographicElementType() { }

		public IfcGeographicElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcGeographicElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcGeometricCurveSet : IfcGeometricSet, IfcLayeredItem
	{
		public IfcGeometricCurveSet() { }

		public IfcGeometricCurveSet(List<IfcGeometricSetSelect> Elements)
		{
			this.Elements = Elements;
		}
	}

	public class IfcGeometricRepresentationContext : IfcRepresentationContext, IfcCoordinateReferenceSystemSelect
	{
		public IfcDimensionCount CoordinateSpaceDimension { get; set; }
		public IfcReal Precision { get; set; }
		public IfcAxis2Placement WorldCoordinateSystem { get; set; }
		public IfcDirection TrueNorth { get; set; }
		public List<IfcGeometricRepresentationSubContext> HasSubContexts => Model.GetInstances<IfcGeometricRepresentationSubContext>().Where(e => e.ParentContext == this).ToList();
		// INVERSE : HasSubContexts : SET [0:?] OF IfcGeometricRepresentationSubContext FOR ParentContext;
		public List<IfcCoordinateOperation> HasCoordinateOperation => Model.GetInstances<IfcCoordinateOperation>().Where(e => e.SourceCRS == this).ToList();
		// INVERSE : HasCoordinateOperation : SET [0:1] OF IfcCoordinateOperation FOR SourceCRS;
		public virtual List<IfcCoordinateOperation> GetHasCoordinateOperation() { return HasCoordinateOperation; }
		public IfcGeometricRepresentationContext() { }

		public IfcGeometricRepresentationContext(IfcLabel ContextIdentifier, IfcLabel ContextType, IfcDimensionCount CoordinateSpaceDimension, IfcReal Precision, IfcAxis2Placement WorldCoordinateSystem, IfcDirection TrueNorth)
		{
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
			this.CoordinateSpaceDimension = CoordinateSpaceDimension;
			this.Precision = Precision;
			this.WorldCoordinateSystem = WorldCoordinateSystem;
			this.TrueNorth = TrueNorth;
		}
	}

	public abstract class IfcGeometricRepresentationItem : IfcRepresentationItem, IfcLayeredItem
	{
		public IfcGeometricRepresentationItem() { }
	}

	public class IfcGeometricRepresentationSubContext : IfcGeometricRepresentationContext, IfcCoordinateReferenceSystemSelect
	{
		public IfcGeometricRepresentationContext ParentContext { get; set; }
		public IfcPositiveRatioMeasure TargetScale { get; set; }
		public IfcGeometricProjectionEnum TargetView { get; set; }
		public IfcLabel UserDefinedTargetView { get; set; }
		public override List<IfcCoordinateOperation> GetHasCoordinateOperation() { return HasCoordinateOperation; }
		public IfcGeometricRepresentationSubContext() { }

		public IfcGeometricRepresentationSubContext(IfcLabel ContextIdentifier, IfcLabel ContextType, IfcDimensionCount CoordinateSpaceDimension, IfcReal Precision, IfcAxis2Placement WorldCoordinateSystem, IfcDirection TrueNorth, IfcGeometricRepresentationContext ParentContext, IfcPositiveRatioMeasure TargetScale, IfcGeometricProjectionEnum TargetView, IfcLabel UserDefinedTargetView)
		{
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
			this.CoordinateSpaceDimension = CoordinateSpaceDimension;
			this.Precision = Precision;
			this.WorldCoordinateSystem = WorldCoordinateSystem;
			this.TrueNorth = TrueNorth;
			this.ParentContext = ParentContext;
			this.TargetScale = TargetScale;
			this.TargetView = TargetView;
			this.UserDefinedTargetView = UserDefinedTargetView;
		}
	}

	public class IfcGeometricSet : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public List<IfcGeometricSetSelect> Elements { get; set; }
		public IfcDimensionCount Dim => Elements[0].GetDim();
		// DERIVE : Dim : IfcDimensionCount := Elements[1].Dim;
		public IfcGeometricSet() { }

		public IfcGeometricSet(List<IfcGeometricSetSelect> Elements)
		{
			this.Elements = Elements;
		}
	}

	public class IfcGrid : IfcProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public List<IfcGridAxis> UAxes { get; set; }
		public List<IfcGridAxis> VAxes { get; set; }
		public List<IfcGridAxis> WAxes { get; set; }
		public IfcGridTypeEnum PredefinedType { get; set; }
		public List<IfcRelContainedInSpatialStructure> ContainedInStructure => Model.GetInstances<IfcRelContainedInSpatialStructure>().Where(e => e.RelatedElements.Contains(this)).ToList();
		// INVERSE : ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcGrid() { }

		public IfcGrid(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, List<IfcGridAxis> UAxes, List<IfcGridAxis> VAxes, List<IfcGridAxis> WAxes, IfcGridTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.UAxes = UAxes;
			this.VAxes = VAxes;
			this.WAxes = WAxes;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcGridAxis : IfcBase
	{
		public IfcLabel AxisTag { get; set; }
		public IfcCurve AxisCurve { get; set; }
		public IfcBoolean SameSense { get; set; }
		public List<IfcGrid> PartOfW => Model.GetInstances<IfcGrid>().Where(e => e.WAxes.Contains(this)).ToList();
		// INVERSE : PartOfW : SET [0:1] OF IfcGrid FOR WAxes;
		public List<IfcGrid> PartOfV => Model.GetInstances<IfcGrid>().Where(e => e.VAxes.Contains(this)).ToList();
		// INVERSE : PartOfV : SET [0:1] OF IfcGrid FOR VAxes;
		public List<IfcGrid> PartOfU => Model.GetInstances<IfcGrid>().Where(e => e.UAxes.Contains(this)).ToList();
		// INVERSE : PartOfU : SET [0:1] OF IfcGrid FOR UAxes;
		public List<IfcVirtualGridIntersection> HasIntersections => Model.GetInstances<IfcVirtualGridIntersection>().Where(e => e.IntersectingAxes.Contains(this)).ToList();
		// INVERSE : HasIntersections : SET [0:?] OF IfcVirtualGridIntersection FOR IntersectingAxes;
		public IfcGridAxis() { }

		public IfcGridAxis(IfcLabel AxisTag, IfcCurve AxisCurve, IfcBoolean SameSense)
		{
			this.AxisTag = AxisTag;
			this.AxisCurve = AxisCurve;
			this.SameSense = SameSense;
		}
	}

	public class IfcGridPlacement : IfcObjectPlacement
	{
		public IfcVirtualGridIntersection PlacementLocation { get; set; }
		public IfcGridPlacementDirectionSelect PlacementRefDirection { get; set; }
		public IfcGridPlacement() { }

		public IfcGridPlacement(IfcVirtualGridIntersection PlacementLocation, IfcGridPlacementDirectionSelect PlacementRefDirection)
		{
			this.PlacementLocation = PlacementLocation;
			this.PlacementRefDirection = PlacementRefDirection;
		}
	}

	public class IfcGroup : IfcObject, IfcDefinitionSelect
	{
		public List<IfcRelAssignsToGroup> IsGroupedBy => Model.GetInstances<IfcRelAssignsToGroup>().Where(e => e.RelatingGroup == this).ToList();
		// INVERSE : IsGroupedBy : SET [0:?] OF IfcRelAssignsToGroup FOR RelatingGroup;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcGroup() { }

		public IfcGroup(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
		}
	}

	public class IfcHalfSpaceSolid : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcLayeredItem
	{
		public IfcSurface BaseSurface { get; set; }
		public IfcBoolean AgreementFlag { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcHalfSpaceSolid() { }

		public IfcHalfSpaceSolid(IfcSurface BaseSurface, IfcBoolean AgreementFlag)
		{
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
		}
	}

	public class IfcHeatExchanger : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcHeatExchangerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcHeatExchanger() { }

		public IfcHeatExchanger(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcHeatExchangerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcHeatExchangerType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcHeatExchangerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcHeatExchangerType() { }

		public IfcHeatExchangerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcHeatExchangerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcHumidifier : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcHumidifierTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcHumidifier() { }

		public IfcHumidifier(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcHumidifierTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcHumidifierType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcHumidifierTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcHumidifierType() { }

		public IfcHumidifierType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcHumidifierTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcIShapeProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure OverallWidth { get; set; }
		public IfcPositiveLengthMeasure OverallDepth { get; set; }
		public IfcPositiveLengthMeasure WebThickness { get; set; }
		public IfcPositiveLengthMeasure FlangeThickness { get; set; }
		public IfcNonNegativeLengthMeasure FilletRadius { get; set; }
		public IfcNonNegativeLengthMeasure FlangeEdgeRadius { get; set; }
		public IfcPlaneAngleMeasure FlangeSlope { get; set; }
		public IfcIShapeProfileDef() { }

		public IfcIShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure OverallWidth, IfcPositiveLengthMeasure OverallDepth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure FlangeThickness, IfcNonNegativeLengthMeasure FilletRadius, IfcNonNegativeLengthMeasure FlangeEdgeRadius, IfcPlaneAngleMeasure FlangeSlope)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.OverallWidth = OverallWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.FlangeSlope = FlangeSlope;
		}
	}

	public class IfcImageTexture : IfcSurfaceTexture
	{
		public IfcURIReference URLReference { get; set; }
		public IfcImageTexture() { }

		public IfcImageTexture(IfcBoolean RepeatS, IfcBoolean RepeatT, IfcIdentifier Mode, IfcCartesianTransformationOperator2D TextureTransform, List<IfcIdentifier> Parameter, IfcURIReference URLReference)
		{
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.Mode = Mode;
			this.TextureTransform = TextureTransform;
			this.Parameter = Parameter;
			this.URLReference = URLReference;
		}
	}

	public class IfcIndexedColourMap : IfcPresentationItem
	{
		public IfcTessellatedFaceSet MappedTo { get; set; }
		public IfcNormalisedRatioMeasure Opacity { get; set; }
		public IfcColourRgbList Colours { get; set; }
		public List<IfcPositiveInteger> ColourIndex { get; set; }
		public IfcIndexedColourMap() { }

		public IfcIndexedColourMap(IfcTessellatedFaceSet MappedTo, IfcNormalisedRatioMeasure Opacity, IfcColourRgbList Colours, List<IfcPositiveInteger> ColourIndex)
		{
			this.MappedTo = MappedTo;
			this.Opacity = Opacity;
			this.Colours = Colours;
			this.ColourIndex = ColourIndex;
		}
	}

	public class IfcIndexedPolyCurve : IfcBoundedCurve, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcCartesianPointList Points { get; set; }
		public List<IfcSegmentIndexSelect> Segments { get; set; }
		public IfcBoolean SelfIntersect { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcIndexedPolyCurve() { }

		public IfcIndexedPolyCurve(IfcCartesianPointList Points, List<IfcSegmentIndexSelect> Segments, IfcBoolean SelfIntersect)
		{
			this.Points = Points;
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcIndexedPolygonalFace : IfcTessellatedItem, IfcLayeredItem
	{
		public List<IfcPositiveInteger> CoordIndex { get; set; }
		public List<IfcPolygonalFaceSet> ToFaceSet => Model.GetInstances<IfcPolygonalFaceSet>().Where(e => e.Faces.Contains(this)).ToList();
		// INVERSE : ToFaceSet : SET [1:?] OF IfcPolygonalFaceSet FOR Faces;
		public IfcIndexedPolygonalFace() { }

		public IfcIndexedPolygonalFace(List<IfcPositiveInteger> CoordIndex)
		{
			this.CoordIndex = CoordIndex;
		}
	}

	public class IfcIndexedPolygonalFaceWithVoids : IfcIndexedPolygonalFace, IfcLayeredItem
	{
		public List<List<IfcPositiveInteger>> InnerCoordIndices { get; set; }
		public IfcIndexedPolygonalFaceWithVoids() { }

		public IfcIndexedPolygonalFaceWithVoids(List<IfcPositiveInteger> CoordIndex, List<List<IfcPositiveInteger>> InnerCoordIndices)
		{
			this.CoordIndex = CoordIndex;
			this.InnerCoordIndices = InnerCoordIndices;
		}
	}

	public abstract class IfcIndexedTextureMap : IfcTextureCoordinate
	{
		public IfcTessellatedFaceSet MappedTo { get; set; }
		public IfcTextureVertexList TexCoords { get; set; }
		public IfcIndexedTextureMap() { }

		public IfcIndexedTextureMap(List<IfcSurfaceTexture> Maps, IfcTessellatedFaceSet MappedTo, IfcTextureVertexList TexCoords)
		{
			this.Maps = Maps;
			this.MappedTo = MappedTo;
			this.TexCoords = TexCoords;
		}
	}

	public class IfcIndexedTriangleTextureMap : IfcIndexedTextureMap
	{
		public List<List<IfcPositiveInteger>> TexCoordIndex { get; set; }
		public IfcIndexedTriangleTextureMap() { }

		public IfcIndexedTriangleTextureMap(List<IfcSurfaceTexture> Maps, IfcTessellatedFaceSet MappedTo, IfcTextureVertexList TexCoords, List<List<IfcPositiveInteger>> TexCoordIndex)
		{
			this.Maps = Maps;
			this.MappedTo = MappedTo;
			this.TexCoords = TexCoords;
			this.TexCoordIndex = TexCoordIndex;
		}
	}

	public class IfcInterceptor : IfcFlowTreatmentDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcInterceptorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcInterceptor() { }

		public IfcInterceptor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcInterceptorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcInterceptorType : IfcFlowTreatmentDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcInterceptorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcInterceptorType() { }

		public IfcInterceptorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcInterceptorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcIntersectionCurve : IfcSurfaceCurve, IfcCurveOnSurface, IfcGeometricSetSelect, IfcLayeredItem
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcIntersectionCurve() { }

		public IfcIntersectionCurve(IfcCurve Curve3D, List<IfcPcurve> AssociatedGeometry, IfcPreferredSurfaceCurveRepresentation MasterRepresentation)
		{
			this.Curve3D = Curve3D;
			this.AssociatedGeometry = AssociatedGeometry;
			this.MasterRepresentation = MasterRepresentation;
		}
	}

	public class IfcInventory : IfcGroup, IfcDefinitionSelect
	{
		public IfcInventoryTypeEnum PredefinedType { get; set; }
		public IfcActorSelect Jurisdiction { get; set; }
		public List<IfcPerson> ResponsiblePersons { get; set; }
		public IfcDate LastUpdateDate { get; set; }
		public IfcCostValue CurrentValue { get; set; }
		public IfcCostValue OriginalValue { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcInventory() { }

		public IfcInventory(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcInventoryTypeEnum PredefinedType, IfcActorSelect Jurisdiction, List<IfcPerson> ResponsiblePersons, IfcDate LastUpdateDate, IfcCostValue CurrentValue, IfcCostValue OriginalValue)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.PredefinedType = PredefinedType;
			this.Jurisdiction = Jurisdiction;
			this.ResponsiblePersons = ResponsiblePersons;
			this.LastUpdateDate = LastUpdateDate;
			this.CurrentValue = CurrentValue;
			this.OriginalValue = OriginalValue;
		}
	}

	public class IfcIrregularTimeSeries : IfcTimeSeries, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public List<IfcIrregularTimeSeriesValue> Values { get; set; }
		public IfcIrregularTimeSeries() { }

		public IfcIrregularTimeSeries(IfcLabel Name, IfcText Description, IfcDateTime StartTime, IfcDateTime EndTime, IfcTimeSeriesDataTypeEnum TimeSeriesDataType, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcUnit Unit, List<IfcIrregularTimeSeriesValue> Values)
		{
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
			this.Values = Values;
		}
	}

	public class IfcIrregularTimeSeriesValue : IfcBase
	{
		public IfcDateTime TimeStamp { get; set; }
		public List<IfcValue> ListValues { get; set; }
		public IfcIrregularTimeSeriesValue() { }

		public IfcIrregularTimeSeriesValue(IfcDateTime TimeStamp, List<IfcValue> ListValues)
		{
			this.TimeStamp = TimeStamp;
			this.ListValues = ListValues;
		}
	}

	public class IfcJunctionBox : IfcFlowFitting, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcJunctionBoxTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcJunctionBox() { }

		public IfcJunctionBox(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcJunctionBoxTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcJunctionBoxType : IfcFlowFittingType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcJunctionBoxTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcJunctionBoxType() { }

		public IfcJunctionBoxType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcJunctionBoxTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcLShapeProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure Depth { get; set; }
		public IfcPositiveLengthMeasure Width { get; set; }
		public IfcPositiveLengthMeasure Thickness { get; set; }
		public IfcNonNegativeLengthMeasure FilletRadius { get; set; }
		public IfcNonNegativeLengthMeasure EdgeRadius { get; set; }
		public IfcPlaneAngleMeasure LegSlope { get; set; }
		public IfcLShapeProfileDef() { }

		public IfcLShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure Depth, IfcPositiveLengthMeasure Width, IfcPositiveLengthMeasure Thickness, IfcNonNegativeLengthMeasure FilletRadius, IfcNonNegativeLengthMeasure EdgeRadius, IfcPlaneAngleMeasure LegSlope)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.Depth = Depth;
			this.Width = Width;
			this.Thickness = Thickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.LegSlope = LegSlope;
		}
	}

	public class IfcLaborResource : IfcConstructionResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcLaborResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcLaborResource() { }

		public IfcLaborResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcResourceTime Usage, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcLaborResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcLaborResourceType : IfcConstructionResourceType, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcLaborResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcLaborResourceType() { }

		public IfcLaborResourceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcLaborResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcLagTime : IfcSchedulingTime
	{
		public IfcTimeOrRatioSelect LagValue { get; set; }
		public IfcTaskDurationEnum DurationType { get; set; }
		public IfcLagTime() { }

		public IfcLagTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTimeOrRatioSelect LagValue, IfcTaskDurationEnum DurationType)
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.LagValue = LagValue;
			this.DurationType = DurationType;
		}
	}

	public class IfcLamp : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcLampTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcLamp() { }

		public IfcLamp(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLampTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcLampType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcLampTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcLampType() { }

		public IfcLampType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcLampTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcLibraryInformation : IfcExternalInformation, IfcLibrarySelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcLabel Version { get; set; }
		public IfcActorSelect Publisher { get; set; }
		public IfcDateTime VersionDate { get; set; }
		public IfcURIReference Location { get; set; }
		public IfcText Description { get; set; }
		public List<IfcRelAssociatesLibrary> LibraryInfoForObjects => Model.GetInstances<IfcRelAssociatesLibrary>().Where(e => e.RelatingLibrary == this).ToList();
		// INVERSE : LibraryInfoForObjects : SET [0:?] OF IfcRelAssociatesLibrary FOR RelatingLibrary;
		public List<IfcLibraryReference> HasLibraryReferences => Model.GetInstances<IfcLibraryReference>().Where(e => e.ReferencedLibrary == this).ToList();
		// INVERSE : HasLibraryReferences : SET [0:?] OF IfcLibraryReference FOR ReferencedLibrary;
		public virtual IfcLabel GetName() { return Name; }
		public virtual IfcURIReference GetLocation() { return Location; }
		public virtual IfcText GetDescription() { return Description; }
		public IfcLibraryInformation() { }

		public IfcLibraryInformation(IfcLabel Name, IfcLabel Version, IfcActorSelect Publisher, IfcDateTime VersionDate, IfcURIReference Location, IfcText Description)
		{
			this.Name = Name;
			this.Version = Version;
			this.Publisher = Publisher;
			this.VersionDate = VersionDate;
			this.Location = Location;
			this.Description = Description;
		}
	}

	public class IfcLibraryReference : IfcExternalReference, IfcLibrarySelect, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcText Description { get; set; }
		public IfcLanguageId Language { get; set; }
		public IfcLibraryInformation ReferencedLibrary { get; set; }
		public List<IfcRelAssociatesLibrary> LibraryRefForObjects => Model.GetInstances<IfcRelAssociatesLibrary>().Where(e => e.RelatingLibrary == this).ToList();
		// INVERSE : LibraryRefForObjects : SET [0:?] OF IfcRelAssociatesLibrary FOR RelatingLibrary;
		public virtual IfcLabel GetName() { return Name; }
		public virtual IfcURIReference GetLocation() { return Location; }
		public virtual IfcText GetDescription() { return Description; }
		public IfcLibraryReference() { }

		public IfcLibraryReference(IfcURIReference Location, IfcIdentifier Identification, IfcLabel Name, IfcText Description, IfcLanguageId Language, IfcLibraryInformation ReferencedLibrary)
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.Language = Language;
			this.ReferencedLibrary = ReferencedLibrary;
		}
	}

	public class IfcLightDistributionData : IfcBase
	{
		public IfcPlaneAngleMeasure MainPlaneAngle { get; set; }
		public List<IfcPlaneAngleMeasure> SecondaryPlaneAngle { get; set; }
		public List<IfcLuminousIntensityDistributionMeasure> LuminousIntensity { get; set; }
		public IfcLightDistributionData() { }

		public IfcLightDistributionData(IfcPlaneAngleMeasure MainPlaneAngle, List<IfcPlaneAngleMeasure> SecondaryPlaneAngle, List<IfcLuminousIntensityDistributionMeasure> LuminousIntensity)
		{
			this.MainPlaneAngle = MainPlaneAngle;
			this.SecondaryPlaneAngle = SecondaryPlaneAngle;
			this.LuminousIntensity = LuminousIntensity;
		}
	}

	public class IfcLightFixture : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcLightFixtureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcLightFixture() { }

		public IfcLightFixture(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLightFixtureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcLightFixtureType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcLightFixtureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcLightFixtureType() { }

		public IfcLightFixtureType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcLightFixtureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcLightIntensityDistribution : IfcBase, IfcLightDistributionDataSourceSelect
	{
		public IfcLightDistributionCurveEnum LightDistributionCurve { get; set; }
		public List<IfcLightDistributionData> DistributionData { get; set; }
		public IfcLightIntensityDistribution() { }

		public IfcLightIntensityDistribution(IfcLightDistributionCurveEnum LightDistributionCurve, List<IfcLightDistributionData> DistributionData)
		{
			this.LightDistributionCurve = LightDistributionCurve;
			this.DistributionData = DistributionData;
		}
	}

	public abstract class IfcLightSource : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcLabel Name { get; set; }
		public IfcColourRgb LightColour { get; set; }
		public IfcNormalisedRatioMeasure AmbientIntensity { get; set; }
		public IfcNormalisedRatioMeasure Intensity { get; set; }
		public IfcLightSource() { }

		public IfcLightSource(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity)
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
		}
	}

	public class IfcLightSourceAmbient : IfcLightSource, IfcLayeredItem
	{
		public IfcLightSourceAmbient() { }

		public IfcLightSourceAmbient(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity)
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
		}
	}

	public class IfcLightSourceDirectional : IfcLightSource, IfcLayeredItem
	{
		public IfcDirection Orientation { get; set; }
		public IfcLightSourceDirectional() { }

		public IfcLightSourceDirectional(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcDirection Orientation)
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
			this.Orientation = Orientation;
		}
	}

	public class IfcLightSourceGoniometric : IfcLightSource, IfcLayeredItem
	{
		public IfcAxis2Placement3D Position { get; set; }
		public IfcColourRgb ColourAppearance { get; set; }
		public IfcThermodynamicTemperatureMeasure ColourTemperature { get; set; }
		public IfcLuminousFluxMeasure LuminousFlux { get; set; }
		public IfcLightEmissionSourceEnum LightEmissionSource { get; set; }
		public IfcLightDistributionDataSourceSelect LightDistributionDataSource { get; set; }
		public IfcLightSourceGoniometric() { }

		public IfcLightSourceGoniometric(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcAxis2Placement3D Position, IfcColourRgb ColourAppearance, IfcThermodynamicTemperatureMeasure ColourTemperature, IfcLuminousFluxMeasure LuminousFlux, IfcLightEmissionSourceEnum LightEmissionSource, IfcLightDistributionDataSourceSelect LightDistributionDataSource)
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
			this.Position = Position;
			this.ColourAppearance = ColourAppearance;
			this.ColourTemperature = ColourTemperature;
			this.LuminousFlux = LuminousFlux;
			this.LightEmissionSource = LightEmissionSource;
			this.LightDistributionDataSource = LightDistributionDataSource;
		}
	}

	public class IfcLightSourcePositional : IfcLightSource, IfcLayeredItem
	{
		public IfcCartesianPoint Position { get; set; }
		public IfcPositiveLengthMeasure Radius { get; set; }
		public IfcReal ConstantAttenuation { get; set; }
		public IfcReal DistanceAttenuation { get; set; }
		public IfcReal QuadricAttenuation { get; set; }
		public IfcLightSourcePositional() { }

		public IfcLightSourcePositional(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcCartesianPoint Position, IfcPositiveLengthMeasure Radius, IfcReal ConstantAttenuation, IfcReal DistanceAttenuation, IfcReal QuadricAttenuation)
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
			this.Position = Position;
			this.Radius = Radius;
			this.ConstantAttenuation = ConstantAttenuation;
			this.DistanceAttenuation = DistanceAttenuation;
			this.QuadricAttenuation = QuadricAttenuation;
		}
	}

	public class IfcLightSourceSpot : IfcLightSourcePositional, IfcLayeredItem
	{
		public IfcDirection Orientation { get; set; }
		public IfcReal ConcentrationExponent { get; set; }
		public IfcPositivePlaneAngleMeasure SpreadAngle { get; set; }
		public IfcPositivePlaneAngleMeasure BeamWidthAngle { get; set; }
		public IfcLightSourceSpot() { }

		public IfcLightSourceSpot(IfcLabel Name, IfcColourRgb LightColour, IfcNormalisedRatioMeasure AmbientIntensity, IfcNormalisedRatioMeasure Intensity, IfcCartesianPoint Position, IfcPositiveLengthMeasure Radius, IfcReal ConstantAttenuation, IfcReal DistanceAttenuation, IfcReal QuadricAttenuation, IfcDirection Orientation, IfcReal ConcentrationExponent, IfcPositivePlaneAngleMeasure SpreadAngle, IfcPositivePlaneAngleMeasure BeamWidthAngle)
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
			this.Position = Position;
			this.Radius = Radius;
			this.ConstantAttenuation = ConstantAttenuation;
			this.DistanceAttenuation = DistanceAttenuation;
			this.QuadricAttenuation = QuadricAttenuation;
			this.Orientation = Orientation;
			this.ConcentrationExponent = ConcentrationExponent;
			this.SpreadAngle = SpreadAngle;
			this.BeamWidthAngle = BeamWidthAngle;
		}
	}

	public class IfcLine : IfcCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcCartesianPoint Pnt { get; set; }
		public IfcVector Dir { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcLine() { }

		public IfcLine(IfcCartesianPoint Pnt, IfcVector Dir)
		{
			this.Pnt = Pnt;
			this.Dir = Dir;
		}
	}

	public class IfcLocalPlacement : IfcObjectPlacement
	{
		public IfcObjectPlacement PlacementRelTo { get; set; }
		public IfcAxis2Placement RelativePlacement { get; set; }
		public IfcLocalPlacement() { }

		public IfcLocalPlacement(IfcObjectPlacement PlacementRelTo, IfcAxis2Placement RelativePlacement)
		{
			this.PlacementRelTo = PlacementRelTo;
			this.RelativePlacement = RelativePlacement;
		}
	}

	public class IfcLoop : IfcTopologicalRepresentationItem, IfcLayeredItem
	{
		public IfcLoop() { }
	}

	public abstract class IfcManifoldSolidBrep : IfcSolidModel, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcClosedShell Outer { get; set; }
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcManifoldSolidBrep() { }

		public IfcManifoldSolidBrep(IfcClosedShell Outer)
		{
			this.Outer = Outer;
		}
	}

	public class IfcMapConversion : IfcCoordinateOperation
	{
		public IfcLengthMeasure Eastings { get; set; }
		public IfcLengthMeasure Northings { get; set; }
		public IfcLengthMeasure OrthogonalHeight { get; set; }
		public IfcReal XAxisAbscissa { get; set; }
		public IfcReal XAxisOrdinate { get; set; }
		public IfcReal Scale { get; set; }
		public IfcMapConversion() { }

		public IfcMapConversion(IfcCoordinateReferenceSystemSelect SourceCRS, IfcCoordinateReferenceSystem TargetCRS, IfcLengthMeasure Eastings, IfcLengthMeasure Northings, IfcLengthMeasure OrthogonalHeight, IfcReal XAxisAbscissa, IfcReal XAxisOrdinate, IfcReal Scale)
		{
			this.SourceCRS = SourceCRS;
			this.TargetCRS = TargetCRS;
			this.Eastings = Eastings;
			this.Northings = Northings;
			this.OrthogonalHeight = OrthogonalHeight;
			this.XAxisAbscissa = XAxisAbscissa;
			this.XAxisOrdinate = XAxisOrdinate;
			this.Scale = Scale;
		}
	}

	public class IfcMappedItem : IfcRepresentationItem, IfcLayeredItem
	{
		public IfcRepresentationMap MappingSource { get; set; }
		public IfcCartesianTransformationOperator MappingTarget { get; set; }
		public IfcMappedItem() { }

		public IfcMappedItem(IfcRepresentationMap MappingSource, IfcCartesianTransformationOperator MappingTarget)
		{
			this.MappingSource = MappingSource;
			this.MappingTarget = MappingTarget;
		}
	}

	public class IfcMaterial : IfcMaterialDefinition, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcLabel Category { get; set; }
		public List<IfcMaterialDefinitionRepresentation> HasRepresentation => Model.GetInstances<IfcMaterialDefinitionRepresentation>().Where(e => e.RepresentedMaterial == this).ToList();
		// INVERSE : HasRepresentation : SET [0:1] OF IfcMaterialDefinitionRepresentation FOR RepresentedMaterial;
		public List<IfcMaterialRelationship> IsRelatedWith => Model.GetInstances<IfcMaterialRelationship>().Where(e => e.RelatedMaterials.Contains(this)).ToList();
		// INVERSE : IsRelatedWith : SET [0:?] OF IfcMaterialRelationship FOR RelatedMaterials;
		public List<IfcMaterialRelationship> RelatesTo => Model.GetInstances<IfcMaterialRelationship>().Where(e => e.RelatingMaterial == this).ToList();
		// INVERSE : RelatesTo : SET [0:1] OF IfcMaterialRelationship FOR RelatingMaterial;
		public IfcMaterial() { }

		public IfcMaterial(IfcLabel Name, IfcText Description, IfcLabel Category)
		{
			this.Name = Name;
			this.Description = Description;
			this.Category = Category;
		}
	}

	public class IfcMaterialClassificationRelationship : IfcBase
	{
		public List<IfcClassificationSelect> MaterialClassifications { get; set; }
		public IfcMaterial ClassifiedMaterial { get; set; }
		public IfcMaterialClassificationRelationship() { }

		public IfcMaterialClassificationRelationship(List<IfcClassificationSelect> MaterialClassifications, IfcMaterial ClassifiedMaterial)
		{
			this.MaterialClassifications = MaterialClassifications;
			this.ClassifiedMaterial = ClassifiedMaterial;
		}
	}

	public class IfcMaterialConstituent : IfcMaterialDefinition, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcMaterial Material { get; set; }
		public IfcNormalisedRatioMeasure Fraction { get; set; }
		public IfcLabel Category { get; set; }
		public IfcMaterialConstituentSet ToMaterialConstituentSet => Model.GetInstances<IfcMaterialConstituentSet>().Where(e => e.MaterialConstituents.Contains(this)).ToList()[0];
		// INVERSE : ToMaterialConstituentSet : IfcMaterialConstituentSet FOR MaterialConstituents;
		public IfcMaterialConstituent() { }

		public IfcMaterialConstituent(IfcLabel Name, IfcText Description, IfcMaterial Material, IfcNormalisedRatioMeasure Fraction, IfcLabel Category)
		{
			this.Name = Name;
			this.Description = Description;
			this.Material = Material;
			this.Fraction = Fraction;
			this.Category = Category;
		}
	}

	public class IfcMaterialConstituentSet : IfcMaterialDefinition, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcMaterialConstituent> MaterialConstituents { get; set; }
		public IfcMaterialConstituentSet() { }

		public IfcMaterialConstituentSet(IfcLabel Name, IfcText Description, List<IfcMaterialConstituent> MaterialConstituents)
		{
			this.Name = Name;
			this.Description = Description;
			this.MaterialConstituents = MaterialConstituents;
		}
	}

	public abstract class IfcMaterialDefinition : IfcBase, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public List<IfcRelAssociatesMaterial> AssociatedTo => Model.GetInstances<IfcRelAssociatesMaterial>().Where(e => e.RelatingMaterial == this).ToList();
		// INVERSE : AssociatedTo : SET [0:?] OF IfcRelAssociatesMaterial FOR RelatingMaterial;
		public List<IfcExternalReferenceRelationship> HasExternalReferences => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public List<IfcMaterialProperties> HasProperties => Model.GetInstances<IfcMaterialProperties>().Where(e => e.Material == this).ToList();
		// INVERSE : HasProperties : SET [0:?] OF IfcMaterialProperties FOR Material;
		public IfcMaterialDefinition() { }
	}

	public class IfcMaterialDefinitionRepresentation : IfcProductRepresentation
	{
		public IfcMaterial RepresentedMaterial { get; set; }
		public IfcMaterialDefinitionRepresentation() { }

		public IfcMaterialDefinitionRepresentation(IfcLabel Name, IfcText Description, List<IfcRepresentation> Representations, IfcMaterial RepresentedMaterial)
		{
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
			this.RepresentedMaterial = RepresentedMaterial;
		}
	}

	public class IfcMaterialLayer : IfcMaterialDefinition, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcMaterial Material { get; set; }
		public IfcNonNegativeLengthMeasure LayerThickness { get; set; }
		public IfcLogical IsVentilated { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcLabel Category { get; set; }
		public IfcInteger Priority { get; set; }
		public IfcMaterialLayerSet ToMaterialLayerSet => Model.GetInstances<IfcMaterialLayerSet>().Where(e => e.MaterialLayers.Contains(this)).ToList()[0];
		// INVERSE : ToMaterialLayerSet : IfcMaterialLayerSet FOR MaterialLayers;
		public IfcMaterialLayer() { }

		public IfcMaterialLayer(IfcMaterial Material, IfcNonNegativeLengthMeasure LayerThickness, IfcLogical IsVentilated, IfcLabel Name, IfcText Description, IfcLabel Category, IfcInteger Priority)
		{
			this.Material = Material;
			this.LayerThickness = LayerThickness;
			this.IsVentilated = IsVentilated;
			this.Name = Name;
			this.Description = Description;
			this.Category = Category;
			this.Priority = Priority;
		}
	}

	public class IfcMaterialLayerSet : IfcMaterialDefinition, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public List<IfcMaterialLayer> MaterialLayers { get; set; }
		public IfcLabel LayerSetName { get; set; }
		public IfcText Description { get; set; }
		public IfcLengthMeasure TotalThickness => IfcMlsTotalThickness(this);
		// DERIVE : TotalThickness : IfcLengthMeasure := IfcMlsTotalThickness(SELF);
		public IfcMaterialLayerSet() { }

		public IfcMaterialLayerSet(List<IfcMaterialLayer> MaterialLayers, IfcLabel LayerSetName, IfcText Description)
		{
			this.MaterialLayers = MaterialLayers;
			this.LayerSetName = LayerSetName;
			this.Description = Description;
		}
	}

	public class IfcMaterialLayerSetUsage : IfcMaterialUsageDefinition, IfcMaterialSelect
	{
		public IfcMaterialLayerSet ForLayerSet { get; set; }
		public IfcLayerSetDirectionEnum LayerSetDirection { get; set; }
		public IfcDirectionSenseEnum DirectionSense { get; set; }
		public IfcLengthMeasure OffsetFromReferenceLine { get; set; }
		public IfcPositiveLengthMeasure ReferenceExtent { get; set; }
		public IfcMaterialLayerSetUsage() { }

		public IfcMaterialLayerSetUsage(IfcMaterialLayerSet ForLayerSet, IfcLayerSetDirectionEnum LayerSetDirection, IfcDirectionSenseEnum DirectionSense, IfcLengthMeasure OffsetFromReferenceLine, IfcPositiveLengthMeasure ReferenceExtent)
		{
			this.ForLayerSet = ForLayerSet;
			this.LayerSetDirection = LayerSetDirection;
			this.DirectionSense = DirectionSense;
			this.OffsetFromReferenceLine = OffsetFromReferenceLine;
			this.ReferenceExtent = ReferenceExtent;
		}
	}

	public class IfcMaterialLayerWithOffsets : IfcMaterialLayer, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLayerSetDirectionEnum OffsetDirection { get; set; }
		public List<IfcLengthMeasure> OffsetValues { get; set; }
		public IfcMaterialLayerWithOffsets() { }

		public IfcMaterialLayerWithOffsets(IfcMaterial Material, IfcNonNegativeLengthMeasure LayerThickness, IfcLogical IsVentilated, IfcLabel Name, IfcText Description, IfcLabel Category, IfcInteger Priority, IfcLayerSetDirectionEnum OffsetDirection, List<IfcLengthMeasure> OffsetValues)
		{
			this.Material = Material;
			this.LayerThickness = LayerThickness;
			this.IsVentilated = IsVentilated;
			this.Name = Name;
			this.Description = Description;
			this.Category = Category;
			this.Priority = Priority;
			this.OffsetDirection = OffsetDirection;
			this.OffsetValues = OffsetValues;
		}
	}

	public class IfcMaterialList : IfcBase, IfcMaterialSelect
	{
		public List<IfcMaterial> Materials { get; set; }
		public IfcMaterialList() { }

		public IfcMaterialList(List<IfcMaterial> Materials)
		{
			this.Materials = Materials;
		}
	}

	public class IfcMaterialProfile : IfcMaterialDefinition, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcMaterial Material { get; set; }
		public IfcProfileDef Profile { get; set; }
		public IfcInteger Priority { get; set; }
		public IfcLabel Category { get; set; }
		public IfcMaterialProfileSet ToMaterialProfileSet => Model.GetInstances<IfcMaterialProfileSet>().Where(e => e.MaterialProfiles.Contains(this)).ToList()[0];
		// INVERSE : ToMaterialProfileSet : IfcMaterialProfileSet FOR MaterialProfiles;
		public IfcMaterialProfile() { }

		public IfcMaterialProfile(IfcLabel Name, IfcText Description, IfcMaterial Material, IfcProfileDef Profile, IfcInteger Priority, IfcLabel Category)
		{
			this.Name = Name;
			this.Description = Description;
			this.Material = Material;
			this.Profile = Profile;
			this.Priority = Priority;
			this.Category = Category;
		}
	}

	public class IfcMaterialProfileSet : IfcMaterialDefinition, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcMaterialProfile> MaterialProfiles { get; set; }
		public IfcCompositeProfileDef CompositeProfile { get; set; }
		public IfcMaterialProfileSet() { }

		public IfcMaterialProfileSet(IfcLabel Name, IfcText Description, List<IfcMaterialProfile> MaterialProfiles, IfcCompositeProfileDef CompositeProfile)
		{
			this.Name = Name;
			this.Description = Description;
			this.MaterialProfiles = MaterialProfiles;
			this.CompositeProfile = CompositeProfile;
		}
	}

	public class IfcMaterialProfileSetUsage : IfcMaterialUsageDefinition, IfcMaterialSelect
	{
		public IfcMaterialProfileSet ForProfileSet { get; set; }
		public IfcCardinalPointReference CardinalPoint { get; set; }
		public IfcPositiveLengthMeasure ReferenceExtent { get; set; }
		public IfcMaterialProfileSetUsage() { }

		public IfcMaterialProfileSetUsage(IfcMaterialProfileSet ForProfileSet, IfcCardinalPointReference CardinalPoint, IfcPositiveLengthMeasure ReferenceExtent)
		{
			this.ForProfileSet = ForProfileSet;
			this.CardinalPoint = CardinalPoint;
			this.ReferenceExtent = ReferenceExtent;
		}
	}

	public class IfcMaterialProfileSetUsageTapering : IfcMaterialProfileSetUsage, IfcMaterialSelect
	{
		public IfcMaterialProfileSet ForProfileEndSet { get; set; }
		public IfcCardinalPointReference CardinalEndPoint { get; set; }
		public IfcMaterialProfileSetUsageTapering() { }

		public IfcMaterialProfileSetUsageTapering(IfcMaterialProfileSet ForProfileSet, IfcCardinalPointReference CardinalPoint, IfcPositiveLengthMeasure ReferenceExtent, IfcMaterialProfileSet ForProfileEndSet, IfcCardinalPointReference CardinalEndPoint)
		{
			this.ForProfileSet = ForProfileSet;
			this.CardinalPoint = CardinalPoint;
			this.ReferenceExtent = ReferenceExtent;
			this.ForProfileEndSet = ForProfileEndSet;
			this.CardinalEndPoint = CardinalEndPoint;
		}
	}

	public class IfcMaterialProfileWithOffsets : IfcMaterialProfile, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public List<IfcLengthMeasure> OffsetValues { get; set; }
		public IfcMaterialProfileWithOffsets() { }

		public IfcMaterialProfileWithOffsets(IfcLabel Name, IfcText Description, IfcMaterial Material, IfcProfileDef Profile, IfcInteger Priority, IfcLabel Category, List<IfcLengthMeasure> OffsetValues)
		{
			this.Name = Name;
			this.Description = Description;
			this.Material = Material;
			this.Profile = Profile;
			this.Priority = Priority;
			this.Category = Category;
			this.OffsetValues = OffsetValues;
		}
	}

	public class IfcMaterialProperties : IfcExtendedProperties, IfcResourceObjectSelect
	{
		public IfcMaterialDefinition Material { get; set; }
		public IfcMaterialProperties() { }

		public IfcMaterialProperties(IfcIdentifier Name, IfcText Description, List<IfcProperty> Properties, IfcMaterialDefinition Material)
		{
			this.Name = Name;
			this.Description = Description;
			this.Properties = Properties;
			this.Material = Material;
		}
	}

	public class IfcMaterialRelationship : IfcResourceLevelRelationship
	{
		public IfcMaterial RelatingMaterial { get; set; }
		public List<IfcMaterial> RelatedMaterials { get; set; }
		public IfcLabel Expression { get; set; }
		public IfcMaterialRelationship() { }

		public IfcMaterialRelationship(IfcLabel Name, IfcText Description, IfcMaterial RelatingMaterial, List<IfcMaterial> RelatedMaterials, IfcLabel Expression)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingMaterial = RelatingMaterial;
			this.RelatedMaterials = RelatedMaterials;
			this.Expression = Expression;
		}
	}

	public abstract class IfcMaterialUsageDefinition : IfcBase, IfcMaterialSelect
	{
		public List<IfcRelAssociatesMaterial> AssociatedTo => Model.GetInstances<IfcRelAssociatesMaterial>().Where(e => e.RelatingMaterial == this).ToList();
		// INVERSE : AssociatedTo : SET [1:?] OF IfcRelAssociatesMaterial FOR RelatingMaterial;
		public IfcMaterialUsageDefinition() { }
	}

	public class IfcMeasureWithUnit : IfcBase, IfcAppliedValueSelect, IfcMetricValueSelect
	{
		public IfcValue ValueComponent { get; set; }
		public IfcUnit UnitComponent { get; set; }
		public IfcMeasureWithUnit() { }

		public IfcMeasureWithUnit(IfcValue ValueComponent, IfcUnit UnitComponent)
		{
			this.ValueComponent = ValueComponent;
			this.UnitComponent = UnitComponent;
		}
	}

	public class IfcMechanicalFastener : IfcElementComponent, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPositiveLengthMeasure NominalDiameter { get; set; }
		public IfcPositiveLengthMeasure NominalLength { get; set; }
		public IfcMechanicalFastenerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcMechanicalFastener() { }

		public IfcMechanicalFastener(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPositiveLengthMeasure NominalDiameter, IfcPositiveLengthMeasure NominalLength, IfcMechanicalFastenerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcMechanicalFastenerType : IfcElementComponentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcMechanicalFastenerTypeEnum PredefinedType { get; set; }
		public IfcPositiveLengthMeasure NominalDiameter { get; set; }
		public IfcPositiveLengthMeasure NominalLength { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcMechanicalFastenerType() { }

		public IfcMechanicalFastenerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcMechanicalFastenerTypeEnum PredefinedType, IfcPositiveLengthMeasure NominalDiameter, IfcPositiveLengthMeasure NominalLength)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
		}
	}

	public class IfcMedicalDevice : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcMedicalDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcMedicalDevice() { }

		public IfcMedicalDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcMedicalDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcMedicalDeviceType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcMedicalDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcMedicalDeviceType() { }

		public IfcMedicalDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcMedicalDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcMember : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcMemberTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcMember() { }

		public IfcMember(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcMemberTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcMemberStandardCase : IfcMember, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcMemberStandardCase() { }

		public IfcMemberStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcMemberTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcMemberType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcMemberTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcMemberType() { }

		public IfcMemberType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcMemberTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcMetric : IfcConstraint, IfcResourceObjectSelect
	{
		public IfcBenchmarkEnum Benchmark { get; set; }
		public IfcLabel ValueSource { get; set; }
		public IfcMetricValueSelect DataValue { get; set; }
		public IfcReference ReferencePath { get; set; }
		public IfcMetric() { }

		public IfcMetric(IfcLabel Name, IfcText Description, IfcConstraintEnum ConstraintGrade, IfcLabel ConstraintSource, IfcActorSelect CreatingActor, IfcDateTime CreationTime, IfcLabel UserDefinedGrade, IfcBenchmarkEnum Benchmark, IfcLabel ValueSource, IfcMetricValueSelect DataValue, IfcReference ReferencePath)
		{
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
			this.Benchmark = Benchmark;
			this.ValueSource = ValueSource;
			this.DataValue = DataValue;
			this.ReferencePath = ReferencePath;
		}
	}

	public class IfcMirroredProfileDef : IfcDerivedProfileDef, IfcResourceObjectSelect
	{
		public IfcMirroredProfileDef() { }

		public IfcMirroredProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcProfileDef ParentProfile, IfcCartesianTransformationOperator2D Operator, IfcLabel Label)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.ParentProfile = ParentProfile;
			this.Operator = Operator;
			this.Label = Label;
		}
	}

	public class IfcMonetaryUnit : IfcBase, IfcUnit
	{
		public IfcLabel Currency { get; set; }
		public IfcMonetaryUnit() { }

		public IfcMonetaryUnit(IfcLabel Currency)
		{
			this.Currency = Currency;
		}
	}

	public class IfcMotorConnection : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcMotorConnectionTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcMotorConnection() { }

		public IfcMotorConnection(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcMotorConnectionTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcMotorConnectionType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcMotorConnectionTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcMotorConnectionType() { }

		public IfcMotorConnectionType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcMotorConnectionTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcNamedUnit : IfcBase, IfcUnit
	{
		public IfcDimensionalExponents Dimensions { get; set; }
		public IfcUnitEnum UnitType { get; set; }
		public IfcNamedUnit() { }

		public IfcNamedUnit(IfcDimensionalExponents Dimensions, IfcUnitEnum UnitType)
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
		}
	}

	public abstract class IfcObject : IfcObjectDefinition, IfcDefinitionSelect
	{
		public IfcLabel ObjectType { get; set; }
		public List<IfcRelDefinesByObject> IsDeclaredBy => Model.GetInstances<IfcRelDefinesByObject>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : IsDeclaredBy : SET [0:1] OF IfcRelDefinesByObject FOR RelatedObjects;
		public List<IfcRelDefinesByObject> Declares => Model.GetInstances<IfcRelDefinesByObject>().Where(e => e.RelatingObject == this).ToList();
		// INVERSE : Declares : SET [0:?] OF IfcRelDefinesByObject FOR RelatingObject;
		public List<IfcRelDefinesByType> IsTypedBy => Model.GetInstances<IfcRelDefinesByType>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : IsTypedBy : SET [0:1] OF IfcRelDefinesByType FOR RelatedObjects;
		public List<IfcRelDefinesByProperties> IsDefinedBy => Model.GetInstances<IfcRelDefinesByProperties>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : IsDefinedBy : SET [0:?] OF IfcRelDefinesByProperties FOR RelatedObjects;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcObject() { }

		public IfcObject(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
		}
	}

	public abstract class IfcObjectDefinition : IfcRoot, IfcDefinitionSelect
	{
		public List<IfcRelAssigns> HasAssignments => Model.GetInstances<IfcRelAssigns>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : HasAssignments : SET [0:?] OF IfcRelAssigns FOR RelatedObjects;
		public List<IfcRelNests> Nests => Model.GetInstances<IfcRelNests>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : Nests : SET [0:1] OF IfcRelNests FOR RelatedObjects;
		public List<IfcRelNests> IsNestedBy => Model.GetInstances<IfcRelNests>().Where(e => e.RelatingObject == this).ToList();
		// INVERSE : IsNestedBy : SET [0:?] OF IfcRelNests FOR RelatingObject;
		public List<IfcRelDeclares> HasContext => Model.GetInstances<IfcRelDeclares>().Where(e => e.RelatedDefinitions.Contains(this)).ToList();
		// INVERSE : HasContext : SET [0:1] OF IfcRelDeclares FOR RelatedDefinitions;
		public List<IfcRelAggregates> IsDecomposedBy => Model.GetInstances<IfcRelAggregates>().Where(e => e.RelatingObject == this).ToList();
		// INVERSE : IsDecomposedBy : SET [0:?] OF IfcRelAggregates FOR RelatingObject;
		public List<IfcRelAggregates> Decomposes => Model.GetInstances<IfcRelAggregates>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : Decomposes : SET [0:1] OF IfcRelAggregates FOR RelatedObjects;
		public List<IfcRelAssociates> HasAssociations => Model.GetInstances<IfcRelAssociates>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
		public abstract IfcGloballyUniqueId GetGlobalId();
		public abstract IfcOwnerHistory GetOwnerHistory();
		public abstract IfcLabel GetName();
		public abstract IfcText GetDescription();
		public virtual List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public virtual List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcObjectDefinition() { }

		public IfcObjectDefinition(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public abstract class IfcObjectPlacement : IfcBase
	{
		public List<IfcProduct> PlacesObject => Model.GetInstances<IfcProduct>().Where(e => e.ObjectPlacement == this).ToList();
		// INVERSE : PlacesObject : SET [0:?] OF IfcProduct FOR ObjectPlacement;
		public List<IfcLocalPlacement> ReferencedByPlacements => Model.GetInstances<IfcLocalPlacement>().Where(e => e.PlacementRelTo == this).ToList();
		// INVERSE : ReferencedByPlacements : SET [0:?] OF IfcLocalPlacement FOR PlacementRelTo;
		public IfcObjectPlacement() { }
	}

	public class IfcObjective : IfcConstraint, IfcResourceObjectSelect
	{
		public List<IfcConstraint> BenchmarkValues { get; set; }
		public IfcLogicalOperatorEnum LogicalAggregator { get; set; }
		public IfcObjectiveEnum ObjectiveQualifier { get; set; }
		public IfcLabel UserDefinedQualifier { get; set; }
		public IfcObjective() { }

		public IfcObjective(IfcLabel Name, IfcText Description, IfcConstraintEnum ConstraintGrade, IfcLabel ConstraintSource, IfcActorSelect CreatingActor, IfcDateTime CreationTime, IfcLabel UserDefinedGrade, List<IfcConstraint> BenchmarkValues, IfcLogicalOperatorEnum LogicalAggregator, IfcObjectiveEnum ObjectiveQualifier, IfcLabel UserDefinedQualifier)
		{
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
			this.BenchmarkValues = BenchmarkValues;
			this.LogicalAggregator = LogicalAggregator;
			this.ObjectiveQualifier = ObjectiveQualifier;
			this.UserDefinedQualifier = UserDefinedQualifier;
		}
	}

	public class IfcOccupant : IfcActor, IfcDefinitionSelect
	{
		public IfcOccupantTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcOccupant() { }

		public IfcOccupant(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcActorSelect TheActor, IfcOccupantTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.TheActor = TheActor;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcOffsetCurve2D : IfcCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcCurve BasisCurve { get; set; }
		public IfcLengthMeasure Distance { get; set; }
		public IfcLogical SelfIntersect { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcOffsetCurve2D() { }

		public IfcOffsetCurve2D(IfcCurve BasisCurve, IfcLengthMeasure Distance, IfcLogical SelfIntersect)
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcOffsetCurve3D : IfcCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcCurve BasisCurve { get; set; }
		public IfcLengthMeasure Distance { get; set; }
		public IfcLogical SelfIntersect { get; set; }
		public IfcDirection RefDirection { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcOffsetCurve3D() { }

		public IfcOffsetCurve3D(IfcCurve BasisCurve, IfcLengthMeasure Distance, IfcLogical SelfIntersect, IfcDirection RefDirection)
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
			this.RefDirection = RefDirection;
		}
	}

	public class IfcOpenShell : IfcConnectedFaceSet, IfcLayeredItem, IfcShell
	{
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual List<IfcFace> GetCfsFaces() { return CfsFaces; }
		public IfcOpenShell() { }

		public IfcOpenShell(List<IfcFace> CfsFaces)
		{
			this.CfsFaces = CfsFaces;
		}
	}

	public class IfcOpeningElement : IfcFeatureElementSubtraction, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcOpeningElementTypeEnum PredefinedType { get; set; }
		public List<IfcRelFillsElement> HasFillings => Model.GetInstances<IfcRelFillsElement>().Where(e => e.RelatingOpeningElement == this).ToList();
		// INVERSE : HasFillings : SET [0:?] OF IfcRelFillsElement FOR RelatingOpeningElement;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcOpeningElement() { }

		public IfcOpeningElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcOpeningElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcOpeningStandardCase : IfcOpeningElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcOpeningStandardCase() { }

		public IfcOpeningStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcOpeningElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcOrganization : IfcBase, IfcActorSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcActorRole> Roles { get; set; }
		public List<IfcAddress> Addresses { get; set; }
		public List<IfcOrganizationRelationship> IsRelatedBy => Model.GetInstances<IfcOrganizationRelationship>().Where(e => e.RelatedOrganizations.Contains(this)).ToList();
		// INVERSE : IsRelatedBy : SET [0:?] OF IfcOrganizationRelationship FOR RelatedOrganizations;
		public List<IfcOrganizationRelationship> Relates => Model.GetInstances<IfcOrganizationRelationship>().Where(e => e.RelatingOrganization == this).ToList();
		// INVERSE : Relates : SET [0:?] OF IfcOrganizationRelationship FOR RelatingOrganization;
		public List<IfcPersonAndOrganization> Engages => Model.GetInstances<IfcPersonAndOrganization>().Where(e => e.TheOrganization == this).ToList();
		// INVERSE : Engages : SET [0:?] OF IfcPersonAndOrganization FOR TheOrganization;
		public virtual List<IfcActorRole> GetRoles() { return Roles; }
		public IfcOrganization() { }

		public IfcOrganization(IfcIdentifier Identification, IfcLabel Name, IfcText Description, List<IfcActorRole> Roles, List<IfcAddress> Addresses)
		{
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
	}

	public class IfcOrganizationRelationship : IfcResourceLevelRelationship
	{
		public IfcOrganization RelatingOrganization { get; set; }
		public List<IfcOrganization> RelatedOrganizations { get; set; }
		public IfcOrganizationRelationship() { }

		public IfcOrganizationRelationship(IfcLabel Name, IfcText Description, IfcOrganization RelatingOrganization, List<IfcOrganization> RelatedOrganizations)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingOrganization = RelatingOrganization;
			this.RelatedOrganizations = RelatedOrganizations;
		}
	}

	public class IfcOrientedEdge : IfcEdge, IfcLayeredItem
	{
		public IfcEdge EdgeElement { get; set; }
		public IfcBoolean Orientation { get; set; }
		public IfcOrientedEdge() { }

		public IfcOrientedEdge(IfcVertex EdgeStart, IfcVertex EdgeEnd, IfcEdge EdgeElement, IfcBoolean Orientation)
		{
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
			this.EdgeElement = EdgeElement;
			this.Orientation = Orientation;
		}
	}

	public class IfcOuterBoundaryCurve : IfcBoundaryCurve, IfcCurveOnSurface, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcOuterBoundaryCurve() { }

		public IfcOuterBoundaryCurve(List<IfcCompositeCurveSegment> Segments, IfcLogical SelfIntersect)
		{
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
	}

	public class IfcOutlet : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcOutletTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcOutlet() { }

		public IfcOutlet(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcOutletTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcOutletType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcOutletTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcOutletType() { }

		public IfcOutletType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcOutletTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcOwnerHistory : IfcBase
	{
		public IfcPersonAndOrganization OwningUser { get; set; }
		public IfcApplication OwningApplication { get; set; }
		public IfcStateEnum State { get; set; }
		public IfcChangeActionEnum ChangeAction { get; set; }
		public IfcTimeStamp LastModifiedDate { get; set; }
		public IfcPersonAndOrganization LastModifyingUser { get; set; }
		public IfcApplication LastModifyingApplication { get; set; }
		public IfcTimeStamp CreationDate { get; set; }
		public IfcOwnerHistory() { }

		public IfcOwnerHistory(IfcPersonAndOrganization OwningUser, IfcApplication OwningApplication, IfcStateEnum State, IfcChangeActionEnum ChangeAction, IfcTimeStamp LastModifiedDate, IfcPersonAndOrganization LastModifyingUser, IfcApplication LastModifyingApplication, IfcTimeStamp CreationDate)
		{
			this.OwningUser = OwningUser;
			this.OwningApplication = OwningApplication;
			this.State = State;
			this.ChangeAction = ChangeAction;
			this.LastModifiedDate = LastModifiedDate;
			this.LastModifyingUser = LastModifyingUser;
			this.LastModifyingApplication = LastModifyingApplication;
			this.CreationDate = CreationDate;
		}
	}

	public abstract class IfcParameterizedProfileDef : IfcProfileDef, IfcResourceObjectSelect
	{
		public IfcAxis2Placement2D Position { get; set; }
		public IfcParameterizedProfileDef() { }

		public IfcParameterizedProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
		}
	}

	public class IfcPath : IfcTopologicalRepresentationItem, IfcLayeredItem
	{
		public List<IfcOrientedEdge> EdgeList { get; set; }
		public IfcPath() { }

		public IfcPath(List<IfcOrientedEdge> EdgeList)
		{
			this.EdgeList = EdgeList;
		}
	}

	public class IfcPcurve : IfcCurve, IfcCurveOnSurface, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcSurface BasisSurface { get; set; }
		public IfcCurve ReferenceCurve { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcPcurve() { }

		public IfcPcurve(IfcSurface BasisSurface, IfcCurve ReferenceCurve)
		{
			this.BasisSurface = BasisSurface;
			this.ReferenceCurve = ReferenceCurve;
		}
	}

	public class IfcPerformanceHistory : IfcControl, IfcDefinitionSelect
	{
		public IfcLabel LifeCyclePhase { get; set; }
		public IfcPerformanceHistoryTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcPerformanceHistory() { }

		public IfcPerformanceHistory(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcLabel LifeCyclePhase, IfcPerformanceHistoryTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LifeCyclePhase = LifeCyclePhase;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPermeableCoveringProperties : IfcPreDefinedPropertySet, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public IfcPermeableCoveringOperationEnum OperationType { get; set; }
		public IfcWindowPanelPositionEnum PanelPosition { get; set; }
		public IfcPositiveLengthMeasure FrameDepth { get; set; }
		public IfcPositiveLengthMeasure FrameThickness { get; set; }
		public IfcShapeAspect ShapeAspectStyle { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcPermeableCoveringProperties() { }

		public IfcPermeableCoveringProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPermeableCoveringOperationEnum OperationType, IfcWindowPanelPositionEnum PanelPosition, IfcPositiveLengthMeasure FrameDepth, IfcPositiveLengthMeasure FrameThickness, IfcShapeAspect ShapeAspectStyle)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
	}

	public class IfcPermit : IfcControl, IfcDefinitionSelect
	{
		public IfcPermitTypeEnum PredefinedType { get; set; }
		public IfcLabel Status { get; set; }
		public IfcText LongDescription { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcPermit() { }

		public IfcPermit(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcPermitTypeEnum PredefinedType, IfcLabel Status, IfcText LongDescription)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
	}

	public class IfcPerson : IfcBase, IfcActorSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcLabel FamilyName { get; set; }
		public IfcLabel GivenName { get; set; }
		public List<IfcLabel> MiddleNames { get; set; }
		public List<IfcLabel> PrefixTitles { get; set; }
		public List<IfcLabel> SuffixTitles { get; set; }
		public List<IfcActorRole> Roles { get; set; }
		public List<IfcAddress> Addresses { get; set; }
		public List<IfcPersonAndOrganization> EngagedIn => Model.GetInstances<IfcPersonAndOrganization>().Where(e => e.ThePerson == this).ToList();
		// INVERSE : EngagedIn : SET [0:?] OF IfcPersonAndOrganization FOR ThePerson;
		public virtual List<IfcActorRole> GetRoles() { return Roles; }
		public IfcPerson() { }

		public IfcPerson(IfcIdentifier Identification, IfcLabel FamilyName, IfcLabel GivenName, List<IfcLabel> MiddleNames, List<IfcLabel> PrefixTitles, List<IfcLabel> SuffixTitles, List<IfcActorRole> Roles, List<IfcAddress> Addresses)
		{
			this.Identification = Identification;
			this.FamilyName = FamilyName;
			this.GivenName = GivenName;
			this.MiddleNames = MiddleNames;
			this.PrefixTitles = PrefixTitles;
			this.SuffixTitles = SuffixTitles;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
	}

	public class IfcPersonAndOrganization : IfcBase, IfcActorSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcPerson ThePerson { get; set; }
		public IfcOrganization TheOrganization { get; set; }
		public List<IfcActorRole> Roles { get; set; }
		public virtual List<IfcActorRole> GetRoles() { return Roles; }
		public IfcPersonAndOrganization() { }

		public IfcPersonAndOrganization(IfcPerson ThePerson, IfcOrganization TheOrganization, List<IfcActorRole> Roles)
		{
			this.ThePerson = ThePerson;
			this.TheOrganization = TheOrganization;
			this.Roles = Roles;
		}
	}

	public class IfcPhysicalComplexQuantity : IfcPhysicalQuantity, IfcResourceObjectSelect
	{
		public List<IfcPhysicalQuantity> HasQuantities { get; set; }
		public IfcLabel Discrimination { get; set; }
		public IfcLabel Quality { get; set; }
		public IfcLabel Usage { get; set; }
		public IfcPhysicalComplexQuantity() { }

		public IfcPhysicalComplexQuantity(IfcLabel Name, IfcText Description, List<IfcPhysicalQuantity> HasQuantities, IfcLabel Discrimination, IfcLabel Quality, IfcLabel Usage)
		{
			this.Name = Name;
			this.Description = Description;
			this.HasQuantities = HasQuantities;
			this.Discrimination = Discrimination;
			this.Quality = Quality;
			this.Usage = Usage;
		}
	}

	public abstract class IfcPhysicalQuantity : IfcBase, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReferences => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public List<IfcPhysicalComplexQuantity> PartOfComplex => Model.GetInstances<IfcPhysicalComplexQuantity>().Where(e => e.HasQuantities.Contains(this)).ToList();
		// INVERSE : PartOfComplex : SET [0:1] OF IfcPhysicalComplexQuantity FOR HasQuantities;
		public IfcPhysicalQuantity() { }

		public IfcPhysicalQuantity(IfcLabel Name, IfcText Description)
		{
			this.Name = Name;
			this.Description = Description;
		}
	}

	public abstract class IfcPhysicalSimpleQuantity : IfcPhysicalQuantity, IfcResourceObjectSelect
	{
		public IfcNamedUnit Unit { get; set; }
		public IfcPhysicalSimpleQuantity() { }

		public IfcPhysicalSimpleQuantity(IfcLabel Name, IfcText Description, IfcNamedUnit Unit)
		{
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
		}
	}

	public class IfcPile : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPileTypeEnum PredefinedType { get; set; }
		public IfcPileConstructionEnum ConstructionType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcPile() { }

		public IfcPile(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPileTypeEnum PredefinedType, IfcPileConstructionEnum ConstructionType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
			this.ConstructionType = ConstructionType;
		}
	}

	public class IfcPileType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcPileTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcPileType() { }

		public IfcPileType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcPileTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPipeFitting : IfcFlowFitting, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPipeFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcPipeFitting() { }

		public IfcPipeFitting(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPipeFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPipeFittingType : IfcFlowFittingType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcPipeFittingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcPipeFittingType() { }

		public IfcPipeFittingType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcPipeFittingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPipeSegment : IfcFlowSegment, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPipeSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcPipeSegment() { }

		public IfcPipeSegment(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPipeSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPipeSegmentType : IfcFlowSegmentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcPipeSegmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcPipeSegmentType() { }

		public IfcPipeSegmentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcPipeSegmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPixelTexture : IfcSurfaceTexture
	{
		public IfcInteger Width { get; set; }
		public IfcInteger Height { get; set; }
		public IfcInteger ColourComponents { get; set; }
		public List<IfcBinary> Pixel { get; set; }
		public IfcPixelTexture() { }

		public IfcPixelTexture(IfcBoolean RepeatS, IfcBoolean RepeatT, IfcIdentifier Mode, IfcCartesianTransformationOperator2D TextureTransform, List<IfcIdentifier> Parameter, IfcInteger Width, IfcInteger Height, IfcInteger ColourComponents, List<IfcBinary> Pixel)
		{
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.Mode = Mode;
			this.TextureTransform = TextureTransform;
			this.Parameter = Parameter;
			this.Width = Width;
			this.Height = Height;
			this.ColourComponents = ColourComponents;
			this.Pixel = Pixel;
		}
	}

	public abstract class IfcPlacement : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcCartesianPoint Location { get; set; }
		public IfcDimensionCount Dim => Location.Dim;
		// DERIVE : Dim : IfcDimensionCount := Location.Dim;
		public IfcPlacement() { }

		public IfcPlacement(IfcCartesianPoint Location)
		{
			this.Location = Location;
		}
	}

	public class IfcPlanarBox : IfcPlanarExtent, IfcLayeredItem
	{
		public IfcAxis2Placement Placement { get; set; }
		public IfcPlanarBox() { }

		public IfcPlanarBox(IfcLengthMeasure SizeInX, IfcLengthMeasure SizeInY, IfcAxis2Placement Placement)
		{
			this.SizeInX = SizeInX;
			this.SizeInY = SizeInY;
			this.Placement = Placement;
		}
	}

	public class IfcPlanarExtent : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcLengthMeasure SizeInX { get; set; }
		public IfcLengthMeasure SizeInY { get; set; }
		public IfcPlanarExtent() { }

		public IfcPlanarExtent(IfcLengthMeasure SizeInX, IfcLengthMeasure SizeInY)
		{
			this.SizeInX = SizeInX;
			this.SizeInY = SizeInY;
		}
	}

	public class IfcPlane : IfcElementarySurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcPlane() { }

		public IfcPlane(IfcAxis2Placement3D Position)
		{
			this.Position = Position;
		}
	}

	public class IfcPlate : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPlateTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcPlate() { }

		public IfcPlate(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPlateTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPlateStandardCase : IfcPlate, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcPlateStandardCase() { }

		public IfcPlateStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPlateTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPlateType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcPlateTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcPlateType() { }

		public IfcPlateType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcPlateTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcPoint : IfcGeometricRepresentationItem, IfcGeometricSetSelect, IfcLayeredItem, IfcPointOrVertexPoint
	{
		public abstract List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract List<IfcStyledItem> GetStyledByItem();
		public abstract IfcDimensionCount GetDim();
		public IfcPoint() { }
	}

	public class IfcPointOnCurve : IfcPoint, IfcGeometricSetSelect, IfcLayeredItem, IfcPointOrVertexPoint
	{
		public IfcCurve BasisCurve { get; set; }
		public IfcParameterValue PointParameter { get; set; }
		public IfcDimensionCount Dim => BasisCurve.Dim;
		// DERIVE : Dim : IfcDimensionCount := BasisCurve.Dim;
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcPointOnCurve() { }

		public IfcPointOnCurve(IfcCurve BasisCurve, IfcParameterValue PointParameter)
		{
			this.BasisCurve = BasisCurve;
			this.PointParameter = PointParameter;
		}
	}

	public class IfcPointOnSurface : IfcPoint, IfcGeometricSetSelect, IfcLayeredItem, IfcPointOrVertexPoint
	{
		public IfcSurface BasisSurface { get; set; }
		public IfcParameterValue PointParameterU { get; set; }
		public IfcParameterValue PointParameterV { get; set; }
		public IfcDimensionCount Dim => BasisSurface.Dim;
		// DERIVE : Dim : IfcDimensionCount := BasisSurface.Dim;
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcPointOnSurface() { }

		public IfcPointOnSurface(IfcSurface BasisSurface, IfcParameterValue PointParameterU, IfcParameterValue PointParameterV)
		{
			this.BasisSurface = BasisSurface;
			this.PointParameterU = PointParameterU;
			this.PointParameterV = PointParameterV;
		}
	}

	public class IfcPolyLoop : IfcLoop, IfcLayeredItem
	{
		public List<IfcCartesianPoint> Polygon { get; set; }
		public IfcPolyLoop() { }

		public IfcPolyLoop(List<IfcCartesianPoint> Polygon)
		{
			this.Polygon = Polygon;
		}
	}

	public class IfcPolygonalBoundedHalfSpace : IfcHalfSpaceSolid, IfcBooleanOperand, IfcLayeredItem
	{
		public IfcAxis2Placement3D Position { get; set; }
		public IfcBoundedCurve PolygonalBoundary { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcPolygonalBoundedHalfSpace() { }

		public IfcPolygonalBoundedHalfSpace(IfcSurface BaseSurface, IfcBoolean AgreementFlag, IfcAxis2Placement3D Position, IfcBoundedCurve PolygonalBoundary)
		{
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
			this.Position = Position;
			this.PolygonalBoundary = PolygonalBoundary;
		}
	}

	public class IfcPolygonalFaceSet : IfcTessellatedFaceSet, IfcBooleanOperand, IfcLayeredItem
	{
		public IfcBoolean Closed { get; set; }
		public List<IfcIndexedPolygonalFace> Faces { get; set; }
		public List<IfcPositiveInteger> PnIndex { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcPolygonalFaceSet() { }

		public IfcPolygonalFaceSet(IfcCartesianPointList3D Coordinates, IfcBoolean Closed, List<IfcIndexedPolygonalFace> Faces, List<IfcPositiveInteger> PnIndex)
		{
			this.Coordinates = Coordinates;
			this.Closed = Closed;
			this.Faces = Faces;
			this.PnIndex = PnIndex;
		}
	}

	public class IfcPolyline : IfcBoundedCurve, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public List<IfcCartesianPoint> Points { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcPolyline() { }

		public IfcPolyline(List<IfcCartesianPoint> Points)
		{
			this.Points = Points;
		}
	}

	public abstract class IfcPort : IfcProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public List<IfcRelConnectsPortToElement> ContainedIn => Model.GetInstances<IfcRelConnectsPortToElement>().Where(e => e.RelatingPort == this).ToList();
		// INVERSE : ContainedIn : SET [0:1] OF IfcRelConnectsPortToElement FOR RelatingPort;
		public List<IfcRelConnectsPorts> ConnectedFrom => Model.GetInstances<IfcRelConnectsPorts>().Where(e => e.RelatedPort == this).ToList();
		// INVERSE : ConnectedFrom : SET [0:1] OF IfcRelConnectsPorts FOR RelatedPort;
		public List<IfcRelConnectsPorts> ConnectedTo => Model.GetInstances<IfcRelConnectsPorts>().Where(e => e.RelatingPort == this).ToList();
		// INVERSE : ConnectedTo : SET [0:1] OF IfcRelConnectsPorts FOR RelatingPort;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcPort() { }

		public IfcPort(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
	}

	public class IfcPostalAddress : IfcAddress, IfcObjectReferenceSelect
	{
		public IfcLabel InternalLocation { get; set; }
		public List<IfcLabel> AddressLines { get; set; }
		public IfcLabel PostalBox { get; set; }
		public IfcLabel Town { get; set; }
		public IfcLabel Region { get; set; }
		public IfcLabel PostalCode { get; set; }
		public IfcLabel Country { get; set; }
		public IfcPostalAddress() { }

		public IfcPostalAddress(IfcAddressTypeEnum Purpose, IfcText Description, IfcLabel UserDefinedPurpose, IfcLabel InternalLocation, List<IfcLabel> AddressLines, IfcLabel PostalBox, IfcLabel Town, IfcLabel Region, IfcLabel PostalCode, IfcLabel Country)
		{
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
			this.InternalLocation = InternalLocation;
			this.AddressLines = AddressLines;
			this.PostalBox = PostalBox;
			this.Town = Town;
			this.Region = Region;
			this.PostalCode = PostalCode;
			this.Country = Country;
		}
	}

	public abstract class IfcPreDefinedColour : IfcPreDefinedItem, IfcColour
	{
		public abstract IfcLabel GetName();
		public IfcPreDefinedColour() { }

		public IfcPreDefinedColour(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public abstract class IfcPreDefinedCurveFont : IfcPreDefinedItem, IfcCurveStyleFontSelect
	{
		public abstract IfcLabel GetName();
		public IfcPreDefinedCurveFont() { }

		public IfcPreDefinedCurveFont(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public abstract class IfcPreDefinedItem : IfcPresentationItem
	{
		public IfcLabel Name { get; set; }
		public IfcPreDefinedItem() { }

		public IfcPreDefinedItem(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public abstract class IfcPreDefinedProperties : IfcPropertyAbstraction, IfcResourceObjectSelect
	{
		public IfcPreDefinedProperties() { }
	}

	public abstract class IfcPreDefinedPropertySet : IfcPropertySetDefinition, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcPreDefinedPropertySet() { }

		public IfcPreDefinedPropertySet(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public abstract class IfcPreDefinedTextFont : IfcPreDefinedItem, IfcTextFontSelect
	{
		public abstract IfcLabel GetName();
		public IfcPreDefinedTextFont() { }

		public IfcPreDefinedTextFont(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public abstract class IfcPresentationItem : IfcBase
	{
		public IfcPresentationItem() { }
	}

	public class IfcPresentationLayerAssignment : IfcBase
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcLayeredItem> AssignedItems { get; set; }
		public IfcIdentifier Identifier { get; set; }
		public IfcPresentationLayerAssignment() { }

		public IfcPresentationLayerAssignment(IfcLabel Name, IfcText Description, List<IfcLayeredItem> AssignedItems, IfcIdentifier Identifier)
		{
			this.Name = Name;
			this.Description = Description;
			this.AssignedItems = AssignedItems;
			this.Identifier = Identifier;
		}
	}

	public class IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment
	{
		public IfcLogical LayerOn { get; set; }
		public IfcLogical LayerFrozen { get; set; }
		public IfcLogical LayerBlocked { get; set; }
		public List<IfcPresentationStyle> LayerStyles { get; set; }
		public IfcPresentationLayerWithStyle() { }

		public IfcPresentationLayerWithStyle(IfcLabel Name, IfcText Description, List<IfcLayeredItem> AssignedItems, IfcIdentifier Identifier, IfcLogical LayerOn, IfcLogical LayerFrozen, IfcLogical LayerBlocked, List<IfcPresentationStyle> LayerStyles)
		{
			this.Name = Name;
			this.Description = Description;
			this.AssignedItems = AssignedItems;
			this.Identifier = Identifier;
			this.LayerOn = LayerOn;
			this.LayerFrozen = LayerFrozen;
			this.LayerBlocked = LayerBlocked;
			this.LayerStyles = LayerStyles;
		}
	}

	public abstract class IfcPresentationStyle : IfcBase, IfcStyleAssignmentSelect
	{
		public IfcLabel Name { get; set; }
		public IfcPresentationStyle() { }

		public IfcPresentationStyle(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcPresentationStyleAssignment : IfcBase, IfcStyleAssignmentSelect
	{
		public List<IfcPresentationStyleSelect> Styles { get; set; }
		public IfcPresentationStyleAssignment() { }

		public IfcPresentationStyleAssignment(List<IfcPresentationStyleSelect> Styles)
		{
			this.Styles = Styles;
		}
	}

	public class IfcProcedure : IfcProcess, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcProcedureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcProcedure() { }

		public IfcProcedure(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcProcedureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcProcedureType : IfcTypeProcess, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcProcedureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcProcedureType() { }

		public IfcProcedureType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ProcessType, IfcProcedureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ProcessType = ProcessType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcProcess : IfcObject, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcText LongDescription { get; set; }
		public List<IfcRelSequence> IsPredecessorTo => Model.GetInstances<IfcRelSequence>().Where(e => e.RelatingProcess == this).ToList();
		// INVERSE : IsPredecessorTo : SET [0:?] OF IfcRelSequence FOR RelatingProcess;
		public List<IfcRelSequence> IsSuccessorFrom => Model.GetInstances<IfcRelSequence>().Where(e => e.RelatedProcess == this).ToList();
		// INVERSE : IsSuccessorFrom : SET [0:?] OF IfcRelSequence FOR RelatedProcess;
		public List<IfcRelAssignsToProcess> OperatesOn => Model.GetInstances<IfcRelAssignsToProcess>().Where(e => e.RelatingProcess == this).ToList();
		// INVERSE : OperatesOn : SET [0:?] OF IfcRelAssignsToProcess FOR RelatingProcess;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract List<IfcRelAssigns> GetHasAssignments();
		public abstract List<IfcRelNests> GetNests();
		public abstract List<IfcRelNests> GetIsNestedBy();
		public abstract List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract List<IfcRelAggregates> GetDecomposes();
		public virtual IfcIdentifier GetIdentification() { return Identification; }
		public virtual IfcText GetLongDescription() { return LongDescription; }
		public virtual List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcProcess() { }

		public IfcProcess(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
		}
	}

	public abstract class IfcProduct : IfcObject, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcObjectPlacement ObjectPlacement { get; set; }
		public IfcProductRepresentation Representation { get; set; }
		public List<IfcRelAssignsToProduct> ReferencedBy => Model.GetInstances<IfcRelAssignsToProduct>().Where(e => e.RelatingProduct == this).ToList();
		// INVERSE : ReferencedBy : SET [0:?] OF IfcRelAssignsToProduct FOR RelatingProduct;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract List<IfcRelAssigns> GetHasAssignments();
		public abstract List<IfcRelNests> GetNests();
		public abstract List<IfcRelNests> GetIsNestedBy();
		public abstract List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract List<IfcRelAggregates> GetDecomposes();
		public virtual List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcProduct() { }

		public IfcProduct(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
	}

	public class IfcProductDefinitionShape : IfcProductRepresentation, IfcProductRepresentationSelect
	{
		public List<IfcProduct> ShapeOfProduct => Model.GetInstances<IfcProduct>().Where(e => e.Representation == this).ToList();
		// INVERSE : ShapeOfProduct : SET [1:?] OF IfcProduct FOR Representation;
		public List<IfcShapeAspect> HasShapeAspects => Model.GetInstances<IfcShapeAspect>().Where(e => e.PartOfProductDefinitionShape == this).ToList();
		// INVERSE : HasShapeAspects : SET [0:?] OF IfcShapeAspect FOR PartOfProductDefinitionShape;
		public virtual List<IfcShapeAspect> GetHasShapeAspects() { return HasShapeAspects; }
		public IfcProductDefinitionShape() { }

		public IfcProductDefinitionShape(IfcLabel Name, IfcText Description, List<IfcRepresentation> Representations)
		{
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
		}
	}

	public abstract class IfcProductRepresentation : IfcBase
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcRepresentation> Representations { get; set; }
		public IfcProductRepresentation() { }

		public IfcProductRepresentation(IfcLabel Name, IfcText Description, List<IfcRepresentation> Representations)
		{
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
		}
	}

	public class IfcProfileDef : IfcBase, IfcResourceObjectSelect
	{
		public IfcProfileTypeEnum ProfileType { get; set; }
		public IfcLabel ProfileName { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReference => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public List<IfcProfileProperties> HasProperties => Model.GetInstances<IfcProfileProperties>().Where(e => e.ProfileDefinition == this).ToList();
		// INVERSE : HasProperties : SET [0:?] OF IfcProfileProperties FOR ProfileDefinition;
		public IfcProfileDef() { }

		public IfcProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
		}
	}

	public class IfcProfileProperties : IfcExtendedProperties, IfcResourceObjectSelect
	{
		public IfcProfileDef ProfileDefinition { get; set; }
		public IfcProfileProperties() { }

		public IfcProfileProperties(IfcIdentifier Name, IfcText Description, List<IfcProperty> Properties, IfcProfileDef ProfileDefinition)
		{
			this.Name = Name;
			this.Description = Description;
			this.Properties = Properties;
			this.ProfileDefinition = ProfileDefinition;
		}
	}

	public class IfcProject : IfcContext, IfcDefinitionSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcProject() { }

		public IfcProject(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLabel LongName, IfcLabel Phase, List<IfcRepresentationContext> RepresentationContexts, IfcUnitAssignment UnitsInContext)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
	}

	public class IfcProjectLibrary : IfcContext, IfcDefinitionSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcProjectLibrary() { }

		public IfcProjectLibrary(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLabel LongName, IfcLabel Phase, List<IfcRepresentationContext> RepresentationContexts, IfcUnitAssignment UnitsInContext)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
	}

	public class IfcProjectOrder : IfcControl, IfcDefinitionSelect
	{
		public IfcProjectOrderTypeEnum PredefinedType { get; set; }
		public IfcLabel Status { get; set; }
		public IfcText LongDescription { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcProjectOrder() { }

		public IfcProjectOrder(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcProjectOrderTypeEnum PredefinedType, IfcLabel Status, IfcText LongDescription)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
	}

	public class IfcProjectedCRS : IfcCoordinateReferenceSystem, IfcCoordinateReferenceSystemSelect
	{
		public IfcIdentifier MapProjection { get; set; }
		public IfcIdentifier MapZone { get; set; }
		public IfcNamedUnit MapUnit { get; set; }
		public override List<IfcCoordinateOperation> GetHasCoordinateOperation() { return HasCoordinateOperation; }
		public IfcProjectedCRS() { }

		public IfcProjectedCRS(IfcLabel Name, IfcText Description, IfcIdentifier GeodeticDatum, IfcIdentifier VerticalDatum, IfcIdentifier MapProjection, IfcIdentifier MapZone, IfcNamedUnit MapUnit)
		{
			this.Name = Name;
			this.Description = Description;
			this.GeodeticDatum = GeodeticDatum;
			this.VerticalDatum = VerticalDatum;
			this.MapProjection = MapProjection;
			this.MapZone = MapZone;
			this.MapUnit = MapUnit;
		}
	}

	public class IfcProjectionElement : IfcFeatureElementAddition, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcProjectionElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcProjectionElement() { }

		public IfcProjectionElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcProjectionElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcProperty : IfcPropertyAbstraction, IfcResourceObjectSelect
	{
		public IfcIdentifier Name { get; set; }
		public IfcText Description { get; set; }
		public List<IfcPropertySet> PartOfPset => Model.GetInstances<IfcPropertySet>().Where(e => e.HasProperties.Contains(this)).ToList();
		// INVERSE : PartOfPset : SET [0:?] OF IfcPropertySet FOR HasProperties;
		public List<IfcPropertyDependencyRelationship> PropertyForDependance => Model.GetInstances<IfcPropertyDependencyRelationship>().Where(e => e.DependingProperty == this).ToList();
		// INVERSE : PropertyForDependance : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependingProperty;
		public List<IfcPropertyDependencyRelationship> PropertyDependsOn => Model.GetInstances<IfcPropertyDependencyRelationship>().Where(e => e.DependantProperty == this).ToList();
		// INVERSE : PropertyDependsOn : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependantProperty;
		public List<IfcComplexProperty> PartOfComplex => Model.GetInstances<IfcComplexProperty>().Where(e => e.HasProperties.Contains(this)).ToList();
		// INVERSE : PartOfComplex : SET [0:?] OF IfcComplexProperty FOR HasProperties;
		public List<IfcResourceConstraintRelationship> HasConstraints => Model.GetInstances<IfcResourceConstraintRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasConstraints : SET [0:?] OF IfcResourceConstraintRelationship FOR RelatedResourceObjects;
		public List<IfcResourceApprovalRelationship> HasApprovals => Model.GetInstances<IfcResourceApprovalRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasApprovals : SET [0:?] OF IfcResourceApprovalRelationship FOR RelatedResourceObjects;
		public IfcProperty() { }

		public IfcProperty(IfcIdentifier Name, IfcText Description)
		{
			this.Name = Name;
			this.Description = Description;
		}
	}

	public abstract class IfcPropertyAbstraction : IfcBase, IfcResourceObjectSelect
	{
		public List<IfcExternalReferenceRelationship> HasExternalReferences => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public IfcPropertyAbstraction() { }
	}

	public class IfcPropertyBoundedValue : IfcSimpleProperty, IfcResourceObjectSelect
	{
		public IfcValue UpperBoundValue { get; set; }
		public IfcValue LowerBoundValue { get; set; }
		public IfcUnit Unit { get; set; }
		public IfcValue SetPointValue { get; set; }
		public IfcPropertyBoundedValue() { }

		public IfcPropertyBoundedValue(IfcIdentifier Name, IfcText Description, IfcValue UpperBoundValue, IfcValue LowerBoundValue, IfcUnit Unit, IfcValue SetPointValue)
		{
			this.Name = Name;
			this.Description = Description;
			this.UpperBoundValue = UpperBoundValue;
			this.LowerBoundValue = LowerBoundValue;
			this.Unit = Unit;
			this.SetPointValue = SetPointValue;
		}
	}

	public abstract class IfcPropertyDefinition : IfcRoot, IfcDefinitionSelect
	{
		public List<IfcRelDeclares> HasContext => Model.GetInstances<IfcRelDeclares>().Where(e => e.RelatedDefinitions.Contains(this)).ToList();
		// INVERSE : HasContext : SET [0:1] OF IfcRelDeclares FOR RelatedDefinitions;
		public List<IfcRelAssociates> HasAssociations => Model.GetInstances<IfcRelAssociates>().Where(e => e.RelatedObjects.Contains(this)).ToList();
		// INVERSE : HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
		public abstract IfcGloballyUniqueId GetGlobalId();
		public abstract IfcOwnerHistory GetOwnerHistory();
		public abstract IfcLabel GetName();
		public abstract IfcText GetDescription();
		public virtual List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public virtual List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcPropertyDefinition() { }

		public IfcPropertyDefinition(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcPropertyDependencyRelationship : IfcResourceLevelRelationship
	{
		public IfcProperty DependingProperty { get; set; }
		public IfcProperty DependantProperty { get; set; }
		public IfcText Expression { get; set; }
		public IfcPropertyDependencyRelationship() { }

		public IfcPropertyDependencyRelationship(IfcLabel Name, IfcText Description, IfcProperty DependingProperty, IfcProperty DependantProperty, IfcText Expression)
		{
			this.Name = Name;
			this.Description = Description;
			this.DependingProperty = DependingProperty;
			this.DependantProperty = DependantProperty;
			this.Expression = Expression;
		}
	}

	public class IfcPropertyEnumeratedValue : IfcSimpleProperty, IfcResourceObjectSelect
	{
		public List<IfcValue> EnumerationValues { get; set; }
		public IfcPropertyEnumeration EnumerationReference { get; set; }
		public IfcPropertyEnumeratedValue() { }

		public IfcPropertyEnumeratedValue(IfcIdentifier Name, IfcText Description, List<IfcValue> EnumerationValues, IfcPropertyEnumeration EnumerationReference)
		{
			this.Name = Name;
			this.Description = Description;
			this.EnumerationValues = EnumerationValues;
			this.EnumerationReference = EnumerationReference;
		}
	}

	public class IfcPropertyEnumeration : IfcPropertyAbstraction, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public List<IfcValue> EnumerationValues { get; set; }
		public IfcUnit Unit { get; set; }
		public IfcPropertyEnumeration() { }

		public IfcPropertyEnumeration(IfcLabel Name, List<IfcValue> EnumerationValues, IfcUnit Unit)
		{
			this.Name = Name;
			this.EnumerationValues = EnumerationValues;
			this.Unit = Unit;
		}
	}

	public class IfcPropertyListValue : IfcSimpleProperty, IfcResourceObjectSelect
	{
		public List<IfcValue> ListValues { get; set; }
		public IfcUnit Unit { get; set; }
		public IfcPropertyListValue() { }

		public IfcPropertyListValue(IfcIdentifier Name, IfcText Description, List<IfcValue> ListValues, IfcUnit Unit)
		{
			this.Name = Name;
			this.Description = Description;
			this.ListValues = ListValues;
			this.Unit = Unit;
		}
	}

	public class IfcPropertyReferenceValue : IfcSimpleProperty, IfcResourceObjectSelect
	{
		public IfcText UsageName { get; set; }
		public IfcObjectReferenceSelect PropertyReference { get; set; }
		public IfcPropertyReferenceValue() { }

		public IfcPropertyReferenceValue(IfcIdentifier Name, IfcText Description, IfcText UsageName, IfcObjectReferenceSelect PropertyReference)
		{
			this.Name = Name;
			this.Description = Description;
			this.UsageName = UsageName;
			this.PropertyReference = PropertyReference;
		}
	}

	public class IfcPropertySet : IfcPropertySetDefinition, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public List<IfcProperty> HasProperties { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcPropertySet() { }

		public IfcPropertySet(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcProperty> HasProperties)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.HasProperties = HasProperties;
		}
	}

	public abstract class IfcPropertySetDefinition : IfcPropertyDefinition, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public List<IfcTypeObject> DefinesType => Model.GetInstances<IfcTypeObject>().Where(e => e.HasPropertySets.Contains(this)).ToList();
		// INVERSE : DefinesType : SET [0:?] OF IfcTypeObject FOR HasPropertySets;
		public List<IfcRelDefinesByTemplate> IsDefinedBy => Model.GetInstances<IfcRelDefinesByTemplate>().Where(e => e.RelatedPropertySets.Contains(this)).ToList();
		// INVERSE : IsDefinedBy : SET [0:?] OF IfcRelDefinesByTemplate FOR RelatedPropertySets;
		public List<IfcRelDefinesByProperties> DefinesOccurrence => Model.GetInstances<IfcRelDefinesByProperties>().Where(e => e.RelatingPropertyDefinition == this).ToList();
		// INVERSE : DefinesOccurrence : SET [0:?] OF IfcRelDefinesByProperties FOR RelatingPropertyDefinition;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcPropertySetDefinition() { }

		public IfcPropertySetDefinition(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcPropertySetTemplate : IfcPropertyTemplateDefinition, IfcDefinitionSelect
	{
		public IfcPropertySetTemplateTypeEnum TemplateType { get; set; }
		public IfcIdentifier ApplicableEntity { get; set; }
		public List<IfcPropertyTemplate> HasPropertyTemplates { get; set; }
		public List<IfcRelDefinesByTemplate> Defines => Model.GetInstances<IfcRelDefinesByTemplate>().Where(e => e.RelatingTemplate == this).ToList();
		// INVERSE : Defines : SET [0:?] OF IfcRelDefinesByTemplate FOR RelatingTemplate;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcPropertySetTemplate() { }

		public IfcPropertySetTemplate(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPropertySetTemplateTypeEnum TemplateType, IfcIdentifier ApplicableEntity, List<IfcPropertyTemplate> HasPropertyTemplates)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.TemplateType = TemplateType;
			this.ApplicableEntity = ApplicableEntity;
			this.HasPropertyTemplates = HasPropertyTemplates;
		}
	}

	public class IfcPropertySingleValue : IfcSimpleProperty, IfcResourceObjectSelect
	{
		public IfcValue NominalValue { get; set; }
		public IfcUnit Unit { get; set; }
		public IfcPropertySingleValue() { }

		public IfcPropertySingleValue(IfcIdentifier Name, IfcText Description, IfcValue NominalValue, IfcUnit Unit)
		{
			this.Name = Name;
			this.Description = Description;
			this.NominalValue = NominalValue;
			this.Unit = Unit;
		}
	}

	public class IfcPropertyTableValue : IfcSimpleProperty, IfcResourceObjectSelect
	{
		public List<IfcValue> DefiningValues { get; set; }
		public List<IfcValue> DefinedValues { get; set; }
		public IfcText Expression { get; set; }
		public IfcUnit DefiningUnit { get; set; }
		public IfcUnit DefinedUnit { get; set; }
		public IfcCurveInterpolationEnum CurveInterpolation { get; set; }
		public IfcPropertyTableValue() { }

		public IfcPropertyTableValue(IfcIdentifier Name, IfcText Description, List<IfcValue> DefiningValues, List<IfcValue> DefinedValues, IfcText Expression, IfcUnit DefiningUnit, IfcUnit DefinedUnit, IfcCurveInterpolationEnum CurveInterpolation)
		{
			this.Name = Name;
			this.Description = Description;
			this.DefiningValues = DefiningValues;
			this.DefinedValues = DefinedValues;
			this.Expression = Expression;
			this.DefiningUnit = DefiningUnit;
			this.DefinedUnit = DefinedUnit;
			this.CurveInterpolation = CurveInterpolation;
		}
	}

	public abstract class IfcPropertyTemplate : IfcPropertyTemplateDefinition, IfcDefinitionSelect
	{
		public List<IfcComplexPropertyTemplate> PartOfComplexTemplate => Model.GetInstances<IfcComplexPropertyTemplate>().Where(e => e.HasPropertyTemplates.Contains(this)).ToList();
		// INVERSE : PartOfComplexTemplate : SET [0:?] OF IfcComplexPropertyTemplate FOR HasPropertyTemplates;
		public List<IfcPropertySetTemplate> PartOfPsetTemplate => Model.GetInstances<IfcPropertySetTemplate>().Where(e => e.HasPropertyTemplates.Contains(this)).ToList();
		// INVERSE : PartOfPsetTemplate : SET [0:?] OF IfcPropertySetTemplate FOR HasPropertyTemplates;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcPropertyTemplate() { }

		public IfcPropertyTemplate(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public abstract class IfcPropertyTemplateDefinition : IfcPropertyDefinition, IfcDefinitionSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcPropertyTemplateDefinition() { }

		public IfcPropertyTemplateDefinition(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcProtectiveDevice : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcProtectiveDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcProtectiveDevice() { }

		public IfcProtectiveDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcProtectiveDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcProtectiveDeviceTrippingUnit : IfcDistributionControlElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcProtectiveDeviceTrippingUnit() { }

		public IfcProtectiveDeviceTrippingUnit(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcProtectiveDeviceTrippingUnitType : IfcDistributionControlElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcProtectiveDeviceTrippingUnitType() { }

		public IfcProtectiveDeviceTrippingUnitType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcProtectiveDeviceType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcProtectiveDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcProtectiveDeviceType() { }

		public IfcProtectiveDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcProtectiveDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcProxy : IfcProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcObjectTypeEnum ProxyType { get; set; }
		public IfcLabel Tag { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcProxy() { }

		public IfcProxy(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcObjectTypeEnum ProxyType, IfcLabel Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.ProxyType = ProxyType;
			this.Tag = Tag;
		}
	}

	public class IfcPump : IfcFlowMovingDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPumpTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcPump() { }

		public IfcPump(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPumpTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcPumpType : IfcFlowMovingDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcPumpTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcPumpType() { }

		public IfcPumpType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcPumpTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcQuantityArea : IfcPhysicalSimpleQuantity, IfcResourceObjectSelect
	{
		public IfcAreaMeasure AreaValue { get; set; }
		public IfcLabel Formula { get; set; }
		public IfcQuantityArea() { }

		public IfcQuantityArea(IfcLabel Name, IfcText Description, IfcNamedUnit Unit, IfcAreaMeasure AreaValue, IfcLabel Formula)
		{
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.AreaValue = AreaValue;
			this.Formula = Formula;
		}
	}

	public class IfcQuantityCount : IfcPhysicalSimpleQuantity, IfcResourceObjectSelect
	{
		public IfcCountMeasure CountValue { get; set; }
		public IfcLabel Formula { get; set; }
		public IfcQuantityCount() { }

		public IfcQuantityCount(IfcLabel Name, IfcText Description, IfcNamedUnit Unit, IfcCountMeasure CountValue, IfcLabel Formula)
		{
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.CountValue = CountValue;
			this.Formula = Formula;
		}
	}

	public class IfcQuantityLength : IfcPhysicalSimpleQuantity, IfcResourceObjectSelect
	{
		public IfcLengthMeasure LengthValue { get; set; }
		public IfcLabel Formula { get; set; }
		public IfcQuantityLength() { }

		public IfcQuantityLength(IfcLabel Name, IfcText Description, IfcNamedUnit Unit, IfcLengthMeasure LengthValue, IfcLabel Formula)
		{
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.LengthValue = LengthValue;
			this.Formula = Formula;
		}
	}

	public abstract class IfcQuantitySet : IfcPropertySetDefinition, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcQuantitySet() { }

		public IfcQuantitySet(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcQuantityTime : IfcPhysicalSimpleQuantity, IfcResourceObjectSelect
	{
		public IfcTimeMeasure TimeValue { get; set; }
		public IfcLabel Formula { get; set; }
		public IfcQuantityTime() { }

		public IfcQuantityTime(IfcLabel Name, IfcText Description, IfcNamedUnit Unit, IfcTimeMeasure TimeValue, IfcLabel Formula)
		{
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.TimeValue = TimeValue;
			this.Formula = Formula;
		}
	}

	public class IfcQuantityVolume : IfcPhysicalSimpleQuantity, IfcResourceObjectSelect
	{
		public IfcVolumeMeasure VolumeValue { get; set; }
		public IfcLabel Formula { get; set; }
		public IfcQuantityVolume() { }

		public IfcQuantityVolume(IfcLabel Name, IfcText Description, IfcNamedUnit Unit, IfcVolumeMeasure VolumeValue, IfcLabel Formula)
		{
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.VolumeValue = VolumeValue;
			this.Formula = Formula;
		}
	}

	public class IfcQuantityWeight : IfcPhysicalSimpleQuantity, IfcResourceObjectSelect
	{
		public IfcMassMeasure WeightValue { get; set; }
		public IfcLabel Formula { get; set; }
		public IfcQuantityWeight() { }

		public IfcQuantityWeight(IfcLabel Name, IfcText Description, IfcNamedUnit Unit, IfcMassMeasure WeightValue, IfcLabel Formula)
		{
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.WeightValue = WeightValue;
			this.Formula = Formula;
		}
	}

	public class IfcRailing : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcRailingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcRailing() { }

		public IfcRailing(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcRailingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcRailingType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcRailingTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcRailingType() { }

		public IfcRailingType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcRailingTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcRamp : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcRampTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcRamp() { }

		public IfcRamp(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcRampTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcRampFlight : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcRampFlightTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcRampFlight() { }

		public IfcRampFlight(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcRampFlightTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcRampFlightType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcRampFlightTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcRampFlightType() { }

		public IfcRampFlightType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcRampFlightTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcRampType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcRampTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcRampType() { }

		public IfcRampType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcRampTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcRationalBSplineCurveWithKnots : IfcBSplineCurveWithKnots, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public List<IfcReal> WeightsData { get; set; }
		public List<IfcReal> Weights => IfcListToArray(WeightsData, 0, UpperIndexOnControlPoints);
		// DERIVE : Weights : ARRAY [0:UpperIndexOnControlPoints] OF IfcReal := IfcListToArray(WeightsData,0,SELF\IfcBSplineCurve.UpperIndexOnControlPoints);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRationalBSplineCurveWithKnots() { }

		public IfcRationalBSplineCurveWithKnots(IfcInteger Degree, List<IfcCartesianPoint> ControlPointsList, IfcBSplineCurveForm CurveForm, IfcLogical ClosedCurve, IfcLogical SelfIntersect, List<IfcInteger> KnotMultiplicities, List<IfcParameterValue> Knots, IfcKnotType KnotSpec, List<IfcReal> WeightsData)
		{
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
			this.KnotMultiplicities = KnotMultiplicities;
			this.Knots = Knots;
			this.KnotSpec = KnotSpec;
			this.WeightsData = WeightsData;
		}
	}

	public class IfcRationalBSplineSurfaceWithKnots : IfcBSplineSurfaceWithKnots, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public List<List<IfcReal>> WeightsData { get; set; }
		public List<List<IfcReal>> Weights => IfcMakeArrayOfArray(WeightsData, 0, UUpper, 0, VUpper);
		// DERIVE : Weights : ARRAY [0:UUpper] OF ARRAY [0:VUpper] OF IfcReal := IfcMakeArrayOfArray(WeightsData,0,UUpper,0,VUpper);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRationalBSplineSurfaceWithKnots() { }

		public IfcRationalBSplineSurfaceWithKnots(IfcInteger UDegree, IfcInteger VDegree, List<List<IfcCartesianPoint>> ControlPointsList, IfcBSplineSurfaceForm SurfaceForm, IfcLogical UClosed, IfcLogical VClosed, IfcLogical SelfIntersect, List<IfcInteger> UMultiplicities, List<IfcInteger> VMultiplicities, List<IfcParameterValue> UKnots, List<IfcParameterValue> VKnots, IfcKnotType KnotSpec, List<List<IfcReal>> WeightsData)
		{
			this.UDegree = UDegree;
			this.VDegree = VDegree;
			this.ControlPointsList = ControlPointsList;
			this.SurfaceForm = SurfaceForm;
			this.UClosed = UClosed;
			this.VClosed = VClosed;
			this.SelfIntersect = SelfIntersect;
			this.UMultiplicities = UMultiplicities;
			this.VMultiplicities = VMultiplicities;
			this.UKnots = UKnots;
			this.VKnots = VKnots;
			this.KnotSpec = KnotSpec;
			this.WeightsData = WeightsData;
		}
	}

	public class IfcRectangleHollowProfileDef : IfcRectangleProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure WallThickness { get; set; }
		public IfcNonNegativeLengthMeasure InnerFilletRadius { get; set; }
		public IfcNonNegativeLengthMeasure OuterFilletRadius { get; set; }
		public IfcRectangleHollowProfileDef() { }

		public IfcRectangleHollowProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure XDim, IfcPositiveLengthMeasure YDim, IfcPositiveLengthMeasure WallThickness, IfcNonNegativeLengthMeasure InnerFilletRadius, IfcNonNegativeLengthMeasure OuterFilletRadius)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.XDim = XDim;
			this.YDim = YDim;
			this.WallThickness = WallThickness;
			this.InnerFilletRadius = InnerFilletRadius;
			this.OuterFilletRadius = OuterFilletRadius;
		}
	}

	public class IfcRectangleProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure XDim { get; set; }
		public IfcPositiveLengthMeasure YDim { get; set; }
		public IfcRectangleProfileDef() { }

		public IfcRectangleProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure XDim, IfcPositiveLengthMeasure YDim)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.XDim = XDim;
			this.YDim = YDim;
		}
	}

	public class IfcRectangularPyramid : IfcCsgPrimitive3D, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public IfcPositiveLengthMeasure XLength { get; set; }
		public IfcPositiveLengthMeasure YLength { get; set; }
		public IfcPositiveLengthMeasure Height { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRectangularPyramid() { }

		public IfcRectangularPyramid(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure XLength, IfcPositiveLengthMeasure YLength, IfcPositiveLengthMeasure Height)
		{
			this.Position = Position;
			this.XLength = XLength;
			this.YLength = YLength;
			this.Height = Height;
		}
	}

	public class IfcRectangularTrimmedSurface : IfcBoundedSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcSurface BasisSurface { get; set; }
		public IfcParameterValue U1 { get; set; }
		public IfcParameterValue V1 { get; set; }
		public IfcParameterValue U2 { get; set; }
		public IfcParameterValue V2 { get; set; }
		public IfcBoolean Usense { get; set; }
		public IfcBoolean Vsense { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRectangularTrimmedSurface() { }

		public IfcRectangularTrimmedSurface(IfcSurface BasisSurface, IfcParameterValue U1, IfcParameterValue V1, IfcParameterValue U2, IfcParameterValue V2, IfcBoolean Usense, IfcBoolean Vsense)
		{
			this.BasisSurface = BasisSurface;
			this.U1 = U1;
			this.V1 = V1;
			this.U2 = U2;
			this.V2 = V2;
			this.Usense = Usense;
			this.Vsense = Vsense;
		}
	}

	public class IfcRecurrencePattern : IfcBase
	{
		public IfcRecurrenceTypeEnum RecurrenceType { get; set; }
		public List<IfcDayInMonthNumber> DayComponent { get; set; }
		public List<IfcDayInWeekNumber> WeekdayComponent { get; set; }
		public List<IfcMonthInYearNumber> MonthComponent { get; set; }
		public IfcInteger Position { get; set; }
		public IfcInteger Interval { get; set; }
		public IfcInteger Occurrences { get; set; }
		public List<IfcTimePeriod> TimePeriods { get; set; }
		public IfcRecurrencePattern() { }

		public IfcRecurrencePattern(IfcRecurrenceTypeEnum RecurrenceType, List<IfcDayInMonthNumber> DayComponent, List<IfcDayInWeekNumber> WeekdayComponent, List<IfcMonthInYearNumber> MonthComponent, IfcInteger Position, IfcInteger Interval, IfcInteger Occurrences, List<IfcTimePeriod> TimePeriods)
		{
			this.RecurrenceType = RecurrenceType;
			this.DayComponent = DayComponent;
			this.WeekdayComponent = WeekdayComponent;
			this.MonthComponent = MonthComponent;
			this.Position = Position;
			this.Interval = Interval;
			this.Occurrences = Occurrences;
			this.TimePeriods = TimePeriods;
		}
	}

	public class IfcReference : IfcBase, IfcAppliedValueSelect, IfcMetricValueSelect
	{
		public IfcIdentifier TypeIdentifier { get; set; }
		public IfcIdentifier AttributeIdentifier { get; set; }
		public IfcLabel InstanceName { get; set; }
		public List<IfcInteger> ListPositions { get; set; }
		public IfcReference InnerReference { get; set; }
		public IfcReference() { }

		public IfcReference(IfcIdentifier TypeIdentifier, IfcIdentifier AttributeIdentifier, IfcLabel InstanceName, List<IfcInteger> ListPositions, IfcReference InnerReference)
		{
			this.TypeIdentifier = TypeIdentifier;
			this.AttributeIdentifier = AttributeIdentifier;
			this.InstanceName = InstanceName;
			this.ListPositions = ListPositions;
			this.InnerReference = InnerReference;
		}
	}

	public class IfcRegularTimeSeries : IfcTimeSeries, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcTimeMeasure TimeStep { get; set; }
		public List<IfcTimeSeriesValue> Values { get; set; }
		public IfcRegularTimeSeries() { }

		public IfcRegularTimeSeries(IfcLabel Name, IfcText Description, IfcDateTime StartTime, IfcDateTime EndTime, IfcTimeSeriesDataTypeEnum TimeSeriesDataType, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcUnit Unit, IfcTimeMeasure TimeStep, List<IfcTimeSeriesValue> Values)
		{
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
			this.TimeStep = TimeStep;
			this.Values = Values;
		}
	}

	public class IfcReinforcementBarProperties : IfcPreDefinedProperties, IfcResourceObjectSelect
	{
		public IfcAreaMeasure TotalCrossSectionArea { get; set; }
		public IfcLabel SteelGrade { get; set; }
		public IfcReinforcingBarSurfaceEnum BarSurface { get; set; }
		public IfcLengthMeasure EffectiveDepth { get; set; }
		public IfcPositiveLengthMeasure NominalBarDiameter { get; set; }
		public IfcCountMeasure BarCount { get; set; }
		public IfcReinforcementBarProperties() { }

		public IfcReinforcementBarProperties(IfcAreaMeasure TotalCrossSectionArea, IfcLabel SteelGrade, IfcReinforcingBarSurfaceEnum BarSurface, IfcLengthMeasure EffectiveDepth, IfcPositiveLengthMeasure NominalBarDiameter, IfcCountMeasure BarCount)
		{
			this.TotalCrossSectionArea = TotalCrossSectionArea;
			this.SteelGrade = SteelGrade;
			this.BarSurface = BarSurface;
			this.EffectiveDepth = EffectiveDepth;
			this.NominalBarDiameter = NominalBarDiameter;
			this.BarCount = BarCount;
		}
	}

	public class IfcReinforcementDefinitionProperties : IfcPreDefinedPropertySet, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public IfcLabel DefinitionType { get; set; }
		public List<IfcSectionReinforcementProperties> ReinforcementSectionDefinitions { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcReinforcementDefinitionProperties() { }

		public IfcReinforcementDefinitionProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel DefinitionType, List<IfcSectionReinforcementProperties> ReinforcementSectionDefinitions)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.DefinitionType = DefinitionType;
			this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
		}
	}

	public class IfcReinforcingBar : IfcReinforcingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPositiveLengthMeasure NominalDiameter { get; set; }
		public IfcAreaMeasure CrossSectionArea { get; set; }
		public IfcPositiveLengthMeasure BarLength { get; set; }
		public IfcReinforcingBarTypeEnum PredefinedType { get; set; }
		public IfcReinforcingBarSurfaceEnum BarSurface { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcReinforcingBar() { }

		public IfcReinforcingBar(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLabel SteelGrade, IfcPositiveLengthMeasure NominalDiameter, IfcAreaMeasure CrossSectionArea, IfcPositiveLengthMeasure BarLength, IfcReinforcingBarTypeEnum PredefinedType, IfcReinforcingBarSurfaceEnum BarSurface)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.SteelGrade = SteelGrade;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.PredefinedType = PredefinedType;
			this.BarSurface = BarSurface;
		}
	}

	public class IfcReinforcingBarType : IfcReinforcingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcReinforcingBarTypeEnum PredefinedType { get; set; }
		public IfcPositiveLengthMeasure NominalDiameter { get; set; }
		public IfcAreaMeasure CrossSectionArea { get; set; }
		public IfcPositiveLengthMeasure BarLength { get; set; }
		public IfcReinforcingBarSurfaceEnum BarSurface { get; set; }
		public IfcLabel BendingShapeCode { get; set; }
		public List<IfcBendingParameterSelect> BendingParameters { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcReinforcingBarType() { }

		public IfcReinforcingBarType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcReinforcingBarTypeEnum PredefinedType, IfcPositiveLengthMeasure NominalDiameter, IfcAreaMeasure CrossSectionArea, IfcPositiveLengthMeasure BarLength, IfcReinforcingBarSurfaceEnum BarSurface, IfcLabel BendingShapeCode, List<IfcBendingParameterSelect> BendingParameters)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.BarSurface = BarSurface;
			this.BendingShapeCode = BendingShapeCode;
			this.BendingParameters = BendingParameters;
		}
	}

	public abstract class IfcReinforcingElement : IfcElementComponent, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcLabel SteelGrade { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcReinforcingElement() { }

		public IfcReinforcingElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLabel SteelGrade)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.SteelGrade = SteelGrade;
		}
	}

	public abstract class IfcReinforcingElementType : IfcElementComponentType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcReinforcingElementType() { }

		public IfcReinforcingElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcReinforcingMesh : IfcReinforcingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPositiveLengthMeasure MeshLength { get; set; }
		public IfcPositiveLengthMeasure MeshWidth { get; set; }
		public IfcPositiveLengthMeasure LongitudinalBarNominalDiameter { get; set; }
		public IfcPositiveLengthMeasure TransverseBarNominalDiameter { get; set; }
		public IfcAreaMeasure LongitudinalBarCrossSectionArea { get; set; }
		public IfcAreaMeasure TransverseBarCrossSectionArea { get; set; }
		public IfcPositiveLengthMeasure LongitudinalBarSpacing { get; set; }
		public IfcPositiveLengthMeasure TransverseBarSpacing { get; set; }
		public IfcReinforcingMeshTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcReinforcingMesh() { }

		public IfcReinforcingMesh(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLabel SteelGrade, IfcPositiveLengthMeasure MeshLength, IfcPositiveLengthMeasure MeshWidth, IfcPositiveLengthMeasure LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure TransverseBarNominalDiameter, IfcAreaMeasure LongitudinalBarCrossSectionArea, IfcAreaMeasure TransverseBarCrossSectionArea, IfcPositiveLengthMeasure LongitudinalBarSpacing, IfcPositiveLengthMeasure TransverseBarSpacing, IfcReinforcingMeshTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.SteelGrade = SteelGrade;
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcReinforcingMeshType : IfcReinforcingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcReinforcingMeshTypeEnum PredefinedType { get; set; }
		public IfcPositiveLengthMeasure MeshLength { get; set; }
		public IfcPositiveLengthMeasure MeshWidth { get; set; }
		public IfcPositiveLengthMeasure LongitudinalBarNominalDiameter { get; set; }
		public IfcPositiveLengthMeasure TransverseBarNominalDiameter { get; set; }
		public IfcAreaMeasure LongitudinalBarCrossSectionArea { get; set; }
		public IfcAreaMeasure TransverseBarCrossSectionArea { get; set; }
		public IfcPositiveLengthMeasure LongitudinalBarSpacing { get; set; }
		public IfcPositiveLengthMeasure TransverseBarSpacing { get; set; }
		public IfcLabel BendingShapeCode { get; set; }
		public List<IfcBendingParameterSelect> BendingParameters { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcReinforcingMeshType() { }

		public IfcReinforcingMeshType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcReinforcingMeshTypeEnum PredefinedType, IfcPositiveLengthMeasure MeshLength, IfcPositiveLengthMeasure MeshWidth, IfcPositiveLengthMeasure LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure TransverseBarNominalDiameter, IfcAreaMeasure LongitudinalBarCrossSectionArea, IfcAreaMeasure TransverseBarCrossSectionArea, IfcPositiveLengthMeasure LongitudinalBarSpacing, IfcPositiveLengthMeasure TransverseBarSpacing, IfcLabel BendingShapeCode, List<IfcBendingParameterSelect> BendingParameters)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
			this.BendingShapeCode = BendingShapeCode;
			this.BendingParameters = BendingParameters;
		}
	}

	public class IfcRelAggregates : IfcRelDecomposes
	{
		public IfcObjectDefinition RelatingObject { get; set; }
		public List<IfcObjectDefinition> RelatedObjects { get; set; }
		public IfcRelAggregates() { }

		public IfcRelAggregates(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcObjectDefinition RelatingObject, List<IfcObjectDefinition> RelatedObjects)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
	}

	public abstract class IfcRelAssigns : IfcRelationship
	{
		public List<IfcObjectDefinition> RelatedObjects { get; set; }
		public IfcObjectTypeEnum RelatedObjectsType { get; set; }
		public IfcRelAssigns() { }

		public IfcRelAssigns(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
		}
	}

	public class IfcRelAssignsToActor : IfcRelAssigns
	{
		public IfcActor RelatingActor { get; set; }
		public IfcActorRole ActingRole { get; set; }
		public IfcRelAssignsToActor() { }

		public IfcRelAssignsToActor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType, IfcActor RelatingActor, IfcActorRole ActingRole)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
			this.RelatingActor = RelatingActor;
			this.ActingRole = ActingRole;
		}
	}

	public class IfcRelAssignsToControl : IfcRelAssigns
	{
		public IfcControl RelatingControl { get; set; }
		public IfcRelAssignsToControl() { }

		public IfcRelAssignsToControl(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType, IfcControl RelatingControl)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
			this.RelatingControl = RelatingControl;
		}
	}

	public class IfcRelAssignsToGroup : IfcRelAssigns
	{
		public IfcGroup RelatingGroup { get; set; }
		public IfcRelAssignsToGroup() { }

		public IfcRelAssignsToGroup(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType, IfcGroup RelatingGroup)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
			this.RelatingGroup = RelatingGroup;
		}
	}

	public class IfcRelAssignsToGroupByFactor : IfcRelAssignsToGroup
	{
		public IfcRatioMeasure Factor { get; set; }
		public IfcRelAssignsToGroupByFactor() { }

		public IfcRelAssignsToGroupByFactor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType, IfcGroup RelatingGroup, IfcRatioMeasure Factor)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
			this.RelatingGroup = RelatingGroup;
			this.Factor = Factor;
		}
	}

	public class IfcRelAssignsToProcess : IfcRelAssigns
	{
		public IfcProcessSelect RelatingProcess { get; set; }
		public IfcMeasureWithUnit QuantityInProcess { get; set; }
		public IfcRelAssignsToProcess() { }

		public IfcRelAssignsToProcess(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType, IfcProcessSelect RelatingProcess, IfcMeasureWithUnit QuantityInProcess)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
			this.RelatingProcess = RelatingProcess;
			this.QuantityInProcess = QuantityInProcess;
		}
	}

	public class IfcRelAssignsToProduct : IfcRelAssigns
	{
		public IfcProductSelect RelatingProduct { get; set; }
		public IfcRelAssignsToProduct() { }

		public IfcRelAssignsToProduct(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType, IfcProductSelect RelatingProduct)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
			this.RelatingProduct = RelatingProduct;
		}
	}

	public class IfcRelAssignsToResource : IfcRelAssigns
	{
		public IfcResourceSelect RelatingResource { get; set; }
		public IfcRelAssignsToResource() { }

		public IfcRelAssignsToResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcObjectTypeEnum RelatedObjectsType, IfcResourceSelect RelatingResource)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
			this.RelatingResource = RelatingResource;
		}
	}

	public abstract class IfcRelAssociates : IfcRelationship
	{
		public List<IfcDefinitionSelect> RelatedObjects { get; set; }
		public IfcRelAssociates() { }

		public IfcRelAssociates(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDefinitionSelect> RelatedObjects)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
		}
	}

	public class IfcRelAssociatesApproval : IfcRelAssociates
	{
		public IfcApproval RelatingApproval { get; set; }
		public IfcRelAssociatesApproval() { }

		public IfcRelAssociatesApproval(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDefinitionSelect> RelatedObjects, IfcApproval RelatingApproval)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingApproval = RelatingApproval;
		}
	}

	public class IfcRelAssociatesClassification : IfcRelAssociates
	{
		public IfcClassificationSelect RelatingClassification { get; set; }
		public IfcRelAssociatesClassification() { }

		public IfcRelAssociatesClassification(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDefinitionSelect> RelatedObjects, IfcClassificationSelect RelatingClassification)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingClassification = RelatingClassification;
		}
	}

	public class IfcRelAssociatesConstraint : IfcRelAssociates
	{
		public IfcLabel Intent { get; set; }
		public IfcConstraint RelatingConstraint { get; set; }
		public IfcRelAssociatesConstraint() { }

		public IfcRelAssociatesConstraint(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDefinitionSelect> RelatedObjects, IfcLabel Intent, IfcConstraint RelatingConstraint)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.Intent = Intent;
			this.RelatingConstraint = RelatingConstraint;
		}
	}

	public class IfcRelAssociatesDocument : IfcRelAssociates
	{
		public IfcDocumentSelect RelatingDocument { get; set; }
		public IfcRelAssociatesDocument() { }

		public IfcRelAssociatesDocument(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDefinitionSelect> RelatedObjects, IfcDocumentSelect RelatingDocument)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingDocument = RelatingDocument;
		}
	}

	public class IfcRelAssociatesLibrary : IfcRelAssociates
	{
		public IfcLibrarySelect RelatingLibrary { get; set; }
		public IfcRelAssociatesLibrary() { }

		public IfcRelAssociatesLibrary(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDefinitionSelect> RelatedObjects, IfcLibrarySelect RelatingLibrary)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingLibrary = RelatingLibrary;
		}
	}

	public class IfcRelAssociatesMaterial : IfcRelAssociates
	{
		public IfcMaterialSelect RelatingMaterial { get; set; }
		public IfcRelAssociatesMaterial() { }

		public IfcRelAssociatesMaterial(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDefinitionSelect> RelatedObjects, IfcMaterialSelect RelatingMaterial)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingMaterial = RelatingMaterial;
		}
	}

	public abstract class IfcRelConnects : IfcRelationship
	{
		public IfcRelConnects() { }

		public IfcRelConnects(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcRelConnectsElements : IfcRelConnects
	{
		public IfcConnectionGeometry ConnectionGeometry { get; set; }
		public IfcElement RelatingElement { get; set; }
		public IfcElement RelatedElement { get; set; }
		public IfcRelConnectsElements() { }

		public IfcRelConnectsElements(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcConnectionGeometry ConnectionGeometry, IfcElement RelatingElement, IfcElement RelatedElement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
		}
	}

	public class IfcRelConnectsPathElements : IfcRelConnectsElements
	{
		public List<IfcInteger> RelatingPriorities { get; set; }
		public List<IfcInteger> RelatedPriorities { get; set; }
		public IfcConnectionTypeEnum RelatedConnectionType { get; set; }
		public IfcConnectionTypeEnum RelatingConnectionType { get; set; }
		public IfcRelConnectsPathElements() { }

		public IfcRelConnectsPathElements(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcConnectionGeometry ConnectionGeometry, IfcElement RelatingElement, IfcElement RelatedElement, List<IfcInteger> RelatingPriorities, List<IfcInteger> RelatedPriorities, IfcConnectionTypeEnum RelatedConnectionType, IfcConnectionTypeEnum RelatingConnectionType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
			this.RelatingPriorities = RelatingPriorities;
			this.RelatedPriorities = RelatedPriorities;
			this.RelatedConnectionType = RelatedConnectionType;
			this.RelatingConnectionType = RelatingConnectionType;
		}
	}

	public class IfcRelConnectsPortToElement : IfcRelConnects
	{
		public IfcPort RelatingPort { get; set; }
		public IfcDistributionElement RelatedElement { get; set; }
		public IfcRelConnectsPortToElement() { }

		public IfcRelConnectsPortToElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPort RelatingPort, IfcDistributionElement RelatedElement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingPort = RelatingPort;
			this.RelatedElement = RelatedElement;
		}
	}

	public class IfcRelConnectsPorts : IfcRelConnects
	{
		public IfcPort RelatingPort { get; set; }
		public IfcPort RelatedPort { get; set; }
		public IfcElement RealizingElement { get; set; }
		public IfcRelConnectsPorts() { }

		public IfcRelConnectsPorts(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPort RelatingPort, IfcPort RelatedPort, IfcElement RealizingElement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingPort = RelatingPort;
			this.RelatedPort = RelatedPort;
			this.RealizingElement = RealizingElement;
		}
	}

	public class IfcRelConnectsStructuralActivity : IfcRelConnects
	{
		public IfcStructuralActivityAssignmentSelect RelatingElement { get; set; }
		public IfcStructuralActivity RelatedStructuralActivity { get; set; }
		public IfcRelConnectsStructuralActivity() { }

		public IfcRelConnectsStructuralActivity(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcStructuralActivityAssignmentSelect RelatingElement, IfcStructuralActivity RelatedStructuralActivity)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralActivity = RelatedStructuralActivity;
		}
	}

	public class IfcRelConnectsStructuralMember : IfcRelConnects
	{
		public IfcStructuralMember RelatingStructuralMember { get; set; }
		public IfcStructuralConnection RelatedStructuralConnection { get; set; }
		public IfcBoundaryCondition AppliedCondition { get; set; }
		public IfcStructuralConnectionCondition AdditionalConditions { get; set; }
		public IfcLengthMeasure SupportedLength { get; set; }
		public IfcAxis2Placement3D ConditionCoordinateSystem { get; set; }
		public IfcRelConnectsStructuralMember() { }

		public IfcRelConnectsStructuralMember(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcStructuralMember RelatingStructuralMember, IfcStructuralConnection RelatedStructuralConnection, IfcBoundaryCondition AppliedCondition, IfcStructuralConnectionCondition AdditionalConditions, IfcLengthMeasure SupportedLength, IfcAxis2Placement3D ConditionCoordinateSystem)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingStructuralMember = RelatingStructuralMember;
			this.RelatedStructuralConnection = RelatedStructuralConnection;
			this.AppliedCondition = AppliedCondition;
			this.AdditionalConditions = AdditionalConditions;
			this.SupportedLength = SupportedLength;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
	}

	public class IfcRelConnectsWithEccentricity : IfcRelConnectsStructuralMember
	{
		public IfcConnectionGeometry ConnectionConstraint { get; set; }
		public IfcRelConnectsWithEccentricity() { }

		public IfcRelConnectsWithEccentricity(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcStructuralMember RelatingStructuralMember, IfcStructuralConnection RelatedStructuralConnection, IfcBoundaryCondition AppliedCondition, IfcStructuralConnectionCondition AdditionalConditions, IfcLengthMeasure SupportedLength, IfcAxis2Placement3D ConditionCoordinateSystem, IfcConnectionGeometry ConnectionConstraint)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingStructuralMember = RelatingStructuralMember;
			this.RelatedStructuralConnection = RelatedStructuralConnection;
			this.AppliedCondition = AppliedCondition;
			this.AdditionalConditions = AdditionalConditions;
			this.SupportedLength = SupportedLength;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
			this.ConnectionConstraint = ConnectionConstraint;
		}
	}

	public class IfcRelConnectsWithRealizingElements : IfcRelConnectsElements
	{
		public List<IfcElement> RealizingElements { get; set; }
		public IfcLabel ConnectionType { get; set; }
		public IfcRelConnectsWithRealizingElements() { }

		public IfcRelConnectsWithRealizingElements(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcConnectionGeometry ConnectionGeometry, IfcElement RelatingElement, IfcElement RelatedElement, List<IfcElement> RealizingElements, IfcLabel ConnectionType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
			this.RealizingElements = RealizingElements;
			this.ConnectionType = ConnectionType;
		}
	}

	public class IfcRelContainedInSpatialStructure : IfcRelConnects
	{
		public List<IfcProduct> RelatedElements { get; set; }
		public IfcSpatialElement RelatingStructure { get; set; }
		public IfcRelContainedInSpatialStructure() { }

		public IfcRelContainedInSpatialStructure(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcProduct> RelatedElements, IfcSpatialElement RelatingStructure)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
	}

	public class IfcRelCoversBldgElements : IfcRelConnects
	{
		public IfcElement RelatingBuildingElement { get; set; }
		public List<IfcCovering> RelatedCoverings { get; set; }
		public IfcRelCoversBldgElements() { }

		public IfcRelCoversBldgElements(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcElement RelatingBuildingElement, List<IfcCovering> RelatedCoverings)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedCoverings = RelatedCoverings;
		}
	}

	public class IfcRelCoversSpaces : IfcRelConnects
	{
		public IfcSpace RelatingSpace { get; set; }
		public List<IfcCovering> RelatedCoverings { get; set; }
		public IfcRelCoversSpaces() { }

		public IfcRelCoversSpaces(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcSpace RelatingSpace, List<IfcCovering> RelatedCoverings)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingSpace = RelatingSpace;
			this.RelatedCoverings = RelatedCoverings;
		}
	}

	public class IfcRelDeclares : IfcRelationship
	{
		public IfcContext RelatingContext { get; set; }
		public List<IfcDefinitionSelect> RelatedDefinitions { get; set; }
		public IfcRelDeclares() { }

		public IfcRelDeclares(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcContext RelatingContext, List<IfcDefinitionSelect> RelatedDefinitions)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingContext = RelatingContext;
			this.RelatedDefinitions = RelatedDefinitions;
		}
	}

	public abstract class IfcRelDecomposes : IfcRelationship
	{
		public IfcRelDecomposes() { }

		public IfcRelDecomposes(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public abstract class IfcRelDefines : IfcRelationship
	{
		public IfcRelDefines() { }

		public IfcRelDefines(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcRelDefinesByObject : IfcRelDefines
	{
		public List<IfcObject> RelatedObjects { get; set; }
		public IfcObject RelatingObject { get; set; }
		public IfcRelDefinesByObject() { }

		public IfcRelDefinesByObject(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObject> RelatedObjects, IfcObject RelatingObject)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingObject = RelatingObject;
		}
	}

	public class IfcRelDefinesByProperties : IfcRelDefines
	{
		public List<IfcObjectDefinition> RelatedObjects { get; set; }
		public IfcPropertySetDefinitionSelect RelatingPropertyDefinition { get; set; }
		public IfcRelDefinesByProperties() { }

		public IfcRelDefinesByProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObjectDefinition> RelatedObjects, IfcPropertySetDefinitionSelect RelatingPropertyDefinition)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingPropertyDefinition = RelatingPropertyDefinition;
		}
	}

	public class IfcRelDefinesByTemplate : IfcRelDefines
	{
		public List<IfcPropertySetDefinition> RelatedPropertySets { get; set; }
		public IfcPropertySetTemplate RelatingTemplate { get; set; }
		public IfcRelDefinesByTemplate() { }

		public IfcRelDefinesByTemplate(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcPropertySetDefinition> RelatedPropertySets, IfcPropertySetTemplate RelatingTemplate)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedPropertySets = RelatedPropertySets;
			this.RelatingTemplate = RelatingTemplate;
		}
	}

	public class IfcRelDefinesByType : IfcRelDefines
	{
		public List<IfcObject> RelatedObjects { get; set; }
		public IfcTypeObject RelatingType { get; set; }
		public IfcRelDefinesByType() { }

		public IfcRelDefinesByType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcObject> RelatedObjects, IfcTypeObject RelatingType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedObjects = RelatedObjects;
			this.RelatingType = RelatingType;
		}
	}

	public class IfcRelFillsElement : IfcRelConnects
	{
		public IfcOpeningElement RelatingOpeningElement { get; set; }
		public IfcElement RelatedBuildingElement { get; set; }
		public IfcRelFillsElement() { }

		public IfcRelFillsElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcOpeningElement RelatingOpeningElement, IfcElement RelatedBuildingElement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingOpeningElement = RelatingOpeningElement;
			this.RelatedBuildingElement = RelatedBuildingElement;
		}
	}

	public class IfcRelFlowControlElements : IfcRelConnects
	{
		public List<IfcDistributionControlElement> RelatedControlElements { get; set; }
		public IfcDistributionFlowElement RelatingFlowElement { get; set; }
		public IfcRelFlowControlElements() { }

		public IfcRelFlowControlElements(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcDistributionControlElement> RelatedControlElements, IfcDistributionFlowElement RelatingFlowElement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedControlElements = RelatedControlElements;
			this.RelatingFlowElement = RelatingFlowElement;
		}
	}

	public class IfcRelInterferesElements : IfcRelConnects
	{
		public IfcElement RelatingElement { get; set; }
		public IfcElement RelatedElement { get; set; }
		public IfcConnectionGeometry InterferenceGeometry { get; set; }
		public IfcIdentifier InterferenceType { get; set; }
		public LOGICAL ImpliedOrder { get; set; }
		public IfcRelInterferesElements() { }

		public IfcRelInterferesElements(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcElement RelatingElement, IfcElement RelatedElement, IfcConnectionGeometry InterferenceGeometry, IfcIdentifier InterferenceType, LOGICAL ImpliedOrder)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
			this.InterferenceGeometry = InterferenceGeometry;
			this.InterferenceType = InterferenceType;
			this.ImpliedOrder = ImpliedOrder;
		}
	}

	public class IfcRelNests : IfcRelDecomposes
	{
		public IfcObjectDefinition RelatingObject { get; set; }
		public List<IfcObjectDefinition> RelatedObjects { get; set; }
		public IfcRelNests() { }

		public IfcRelNests(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcObjectDefinition RelatingObject, List<IfcObjectDefinition> RelatedObjects)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
	}

	public class IfcRelProjectsElement : IfcRelDecomposes
	{
		public IfcElement RelatingElement { get; set; }
		public IfcFeatureElementAddition RelatedFeatureElement { get; set; }
		public IfcRelProjectsElement() { }

		public IfcRelProjectsElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcElement RelatingElement, IfcFeatureElementAddition RelatedFeatureElement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingElement = RelatingElement;
			this.RelatedFeatureElement = RelatedFeatureElement;
		}
	}

	public class IfcRelReferencedInSpatialStructure : IfcRelConnects
	{
		public List<IfcProduct> RelatedElements { get; set; }
		public IfcSpatialElement RelatingStructure { get; set; }
		public IfcRelReferencedInSpatialStructure() { }

		public IfcRelReferencedInSpatialStructure(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, List<IfcProduct> RelatedElements, IfcSpatialElement RelatingStructure)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
	}

	public class IfcRelSequence : IfcRelConnects
	{
		public IfcProcess RelatingProcess { get; set; }
		public IfcProcess RelatedProcess { get; set; }
		public IfcLagTime TimeLag { get; set; }
		public IfcSequenceEnum SequenceType { get; set; }
		public IfcLabel UserDefinedSequenceType { get; set; }
		public IfcRelSequence() { }

		public IfcRelSequence(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcProcess RelatingProcess, IfcProcess RelatedProcess, IfcLagTime TimeLag, IfcSequenceEnum SequenceType, IfcLabel UserDefinedSequenceType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingProcess = RelatingProcess;
			this.RelatedProcess = RelatedProcess;
			this.TimeLag = TimeLag;
			this.SequenceType = SequenceType;
			this.UserDefinedSequenceType = UserDefinedSequenceType;
		}
	}

	public class IfcRelServicesBuildings : IfcRelConnects
	{
		public IfcSystem RelatingSystem { get; set; }
		public List<IfcSpatialElement> RelatedBuildings { get; set; }
		public IfcRelServicesBuildings() { }

		public IfcRelServicesBuildings(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcSystem RelatingSystem, List<IfcSpatialElement> RelatedBuildings)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingSystem = RelatingSystem;
			this.RelatedBuildings = RelatedBuildings;
		}
	}

	public class IfcRelSpaceBoundary : IfcRelConnects
	{
		public IfcSpaceBoundarySelect RelatingSpace { get; set; }
		public IfcElement RelatedBuildingElement { get; set; }
		public IfcConnectionGeometry ConnectionGeometry { get; set; }
		public IfcPhysicalOrVirtualEnum PhysicalOrVirtualBoundary { get; set; }
		public IfcInternalOrExternalEnum InternalOrExternalBoundary { get; set; }
		public IfcRelSpaceBoundary() { }

		public IfcRelSpaceBoundary(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcSpaceBoundarySelect RelatingSpace, IfcElement RelatedBuildingElement, IfcConnectionGeometry ConnectionGeometry, IfcPhysicalOrVirtualEnum PhysicalOrVirtualBoundary, IfcInternalOrExternalEnum InternalOrExternalBoundary)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		}
	}

	public class IfcRelSpaceBoundary1stLevel : IfcRelSpaceBoundary
	{
		public IfcRelSpaceBoundary1stLevel ParentBoundary { get; set; }
		public List<IfcRelSpaceBoundary1stLevel> InnerBoundaries => Model.GetInstances<IfcRelSpaceBoundary1stLevel>().Where(e => e.ParentBoundary == this).ToList();
		// INVERSE : InnerBoundaries : SET [0:?] OF IfcRelSpaceBoundary1stLevel FOR ParentBoundary;
		public IfcRelSpaceBoundary1stLevel() { }

		public IfcRelSpaceBoundary1stLevel(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcSpaceBoundarySelect RelatingSpace, IfcElement RelatedBuildingElement, IfcConnectionGeometry ConnectionGeometry, IfcPhysicalOrVirtualEnum PhysicalOrVirtualBoundary, IfcInternalOrExternalEnum InternalOrExternalBoundary, IfcRelSpaceBoundary1stLevel ParentBoundary)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
			this.ParentBoundary = ParentBoundary;
		}
	}

	public class IfcRelSpaceBoundary2ndLevel : IfcRelSpaceBoundary1stLevel
	{
		public IfcRelSpaceBoundary2ndLevel CorrespondingBoundary { get; set; }
		public List<IfcRelSpaceBoundary2ndLevel> Corresponds => Model.GetInstances<IfcRelSpaceBoundary2ndLevel>().Where(e => e.CorrespondingBoundary == this).ToList();
		// INVERSE : Corresponds : SET [0:1] OF IfcRelSpaceBoundary2ndLevel FOR CorrespondingBoundary;
		public IfcRelSpaceBoundary2ndLevel() { }

		public IfcRelSpaceBoundary2ndLevel(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcSpaceBoundarySelect RelatingSpace, IfcElement RelatedBuildingElement, IfcConnectionGeometry ConnectionGeometry, IfcPhysicalOrVirtualEnum PhysicalOrVirtualBoundary, IfcInternalOrExternalEnum InternalOrExternalBoundary, IfcRelSpaceBoundary1stLevel ParentBoundary, IfcRelSpaceBoundary2ndLevel CorrespondingBoundary)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
			this.ParentBoundary = ParentBoundary;
			this.CorrespondingBoundary = CorrespondingBoundary;
		}
	}

	public class IfcRelVoidsElement : IfcRelDecomposes
	{
		public IfcElement RelatingBuildingElement { get; set; }
		public IfcFeatureElementSubtraction RelatedOpeningElement { get; set; }
		public IfcRelVoidsElement() { }

		public IfcRelVoidsElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcElement RelatingBuildingElement, IfcFeatureElementSubtraction RelatedOpeningElement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedOpeningElement = RelatedOpeningElement;
		}
	}

	public abstract class IfcRelationship : IfcRoot
	{
		public IfcRelationship() { }

		public IfcRelationship(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcReparametrisedCompositeCurveSegment : IfcCompositeCurveSegment, IfcLayeredItem
	{
		public IfcParameterValue ParamLength { get; set; }
		public IfcReparametrisedCompositeCurveSegment() { }

		public IfcReparametrisedCompositeCurveSegment(IfcTransitionCode Transition, IfcBoolean SameSense, IfcCurve ParentCurve, IfcParameterValue ParamLength)
		{
			this.Transition = Transition;
			this.SameSense = SameSense;
			this.ParentCurve = ParentCurve;
			this.ParamLength = ParamLength;
		}
	}

	public abstract class IfcRepresentation : IfcBase, IfcLayeredItem
	{
		public IfcRepresentationContext ContextOfItems { get; set; }
		public IfcLabel RepresentationIdentifier { get; set; }
		public IfcLabel RepresentationType { get; set; }
		public List<IfcRepresentationItem> Items { get; set; }
		public List<IfcRepresentationMap> RepresentationMap => Model.GetInstances<IfcRepresentationMap>().Where(e => e.MappedRepresentation == this).ToList();
		// INVERSE : RepresentationMap : SET [0:1] OF IfcRepresentationMap FOR MappedRepresentation;
		public List<IfcPresentationLayerAssignment> LayerAssignments => Model.GetInstances<IfcPresentationLayerAssignment>().Where(e => e.AssignedItems.Contains(this)).ToList();
		// INVERSE : LayerAssignments : SET [0:?] OF IfcPresentationLayerAssignment FOR AssignedItems;
		public List<IfcProductRepresentation> OfProductRepresentation => Model.GetInstances<IfcProductRepresentation>().Where(e => e.Representations.Contains(this)).ToList();
		// INVERSE : OfProductRepresentation : SET [0:?] OF IfcProductRepresentation FOR Representations;
		public IfcRepresentation() { }

		public IfcRepresentation(IfcRepresentationContext ContextOfItems, IfcLabel RepresentationIdentifier, IfcLabel RepresentationType, List<IfcRepresentationItem> Items)
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
	}

	public abstract class IfcRepresentationContext : IfcBase
	{
		public IfcLabel ContextIdentifier { get; set; }
		public IfcLabel ContextType { get; set; }
		public List<IfcRepresentation> RepresentationsInContext => Model.GetInstances<IfcRepresentation>().Where(e => e.ContextOfItems == this).ToList();
		// INVERSE : RepresentationsInContext : SET [0:?] OF IfcRepresentation FOR ContextOfItems;
		public IfcRepresentationContext() { }

		public IfcRepresentationContext(IfcLabel ContextIdentifier, IfcLabel ContextType)
		{
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
		}
	}

	public abstract class IfcRepresentationItem : IfcBase, IfcLayeredItem
	{
		public List<IfcPresentationLayerAssignment> LayerAssignment => Model.GetInstances<IfcPresentationLayerAssignment>().Where(e => e.AssignedItems.Contains(this)).ToList();
		// INVERSE : LayerAssignment : SET [0:1] OF IfcPresentationLayerAssignment FOR AssignedItems;
		public List<IfcStyledItem> StyledByItem => Model.GetInstances<IfcStyledItem>().Where(e => e.Item == this).ToList();
		// INVERSE : StyledByItem : SET [0:1] OF IfcStyledItem FOR Item;
		public IfcRepresentationItem() { }
	}

	public class IfcRepresentationMap : IfcBase, IfcProductRepresentationSelect
	{
		public IfcAxis2Placement MappingOrigin { get; set; }
		public IfcRepresentation MappedRepresentation { get; set; }
		public List<IfcShapeAspect> HasShapeAspects => Model.GetInstances<IfcShapeAspect>().Where(e => e.PartOfProductDefinitionShape == this).ToList();
		// INVERSE : HasShapeAspects : SET [0:?] OF IfcShapeAspect FOR PartOfProductDefinitionShape;
		public List<IfcMappedItem> MapUsage => Model.GetInstances<IfcMappedItem>().Where(e => e.MappingSource == this).ToList();
		// INVERSE : MapUsage : SET [0:?] OF IfcMappedItem FOR MappingSource;
		public virtual List<IfcShapeAspect> GetHasShapeAspects() { return HasShapeAspects; }
		public IfcRepresentationMap() { }

		public IfcRepresentationMap(IfcAxis2Placement MappingOrigin, IfcRepresentation MappedRepresentation)
		{
			this.MappingOrigin = MappingOrigin;
			this.MappedRepresentation = MappedRepresentation;
		}
	}

	public abstract class IfcResource : IfcObject, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcText LongDescription { get; set; }
		public List<IfcRelAssignsToResource> ResourceOf => Model.GetInstances<IfcRelAssignsToResource>().Where(e => e.RelatingResource == this).ToList();
		// INVERSE : ResourceOf : SET [0:?] OF IfcRelAssignsToResource FOR RelatingResource;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract List<IfcRelAssigns> GetHasAssignments();
		public abstract List<IfcRelNests> GetNests();
		public abstract List<IfcRelNests> GetIsNestedBy();
		public abstract List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract List<IfcRelAggregates> GetDecomposes();
		public virtual IfcIdentifier GetIdentification() { return Identification; }
		public virtual IfcText GetLongDescription() { return LongDescription; }
		public virtual List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public abstract List<IfcAppliedValue> GetBaseCosts();
		public abstract IfcPhysicalQuantity GetBaseQuantity();
		public IfcResource() { }

		public IfcResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
		}
	}

	public class IfcResourceApprovalRelationship : IfcResourceLevelRelationship
	{
		public List<IfcResourceObjectSelect> RelatedResourceObjects { get; set; }
		public IfcApproval RelatingApproval { get; set; }
		public IfcResourceApprovalRelationship() { }

		public IfcResourceApprovalRelationship(IfcLabel Name, IfcText Description, List<IfcResourceObjectSelect> RelatedResourceObjects, IfcApproval RelatingApproval)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatedResourceObjects = RelatedResourceObjects;
			this.RelatingApproval = RelatingApproval;
		}
	}

	public class IfcResourceConstraintRelationship : IfcResourceLevelRelationship
	{
		public IfcConstraint RelatingConstraint { get; set; }
		public List<IfcResourceObjectSelect> RelatedResourceObjects { get; set; }
		public IfcResourceConstraintRelationship() { }

		public IfcResourceConstraintRelationship(IfcLabel Name, IfcText Description, IfcConstraint RelatingConstraint, List<IfcResourceObjectSelect> RelatedResourceObjects)
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedResourceObjects = RelatedResourceObjects;
		}
	}

	public abstract class IfcResourceLevelRelationship : IfcBase
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcResourceLevelRelationship() { }

		public IfcResourceLevelRelationship(IfcLabel Name, IfcText Description)
		{
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcResourceTime : IfcSchedulingTime
	{
		public IfcDuration ScheduleWork { get; set; }
		public IfcPositiveRatioMeasure ScheduleUsage { get; set; }
		public IfcDateTime ScheduleStart { get; set; }
		public IfcDateTime ScheduleFinish { get; set; }
		public IfcLabel ScheduleContour { get; set; }
		public IfcDuration LevelingDelay { get; set; }
		public IfcBoolean IsOverAllocated { get; set; }
		public IfcDateTime StatusTime { get; set; }
		public IfcDuration ActualWork { get; set; }
		public IfcPositiveRatioMeasure ActualUsage { get; set; }
		public IfcDateTime ActualStart { get; set; }
		public IfcDateTime ActualFinish { get; set; }
		public IfcDuration RemainingWork { get; set; }
		public IfcPositiveRatioMeasure RemainingUsage { get; set; }
		public IfcPositiveRatioMeasure Completion { get; set; }
		public IfcResourceTime() { }

		public IfcResourceTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcDuration ScheduleWork, IfcPositiveRatioMeasure ScheduleUsage, IfcDateTime ScheduleStart, IfcDateTime ScheduleFinish, IfcLabel ScheduleContour, IfcDuration LevelingDelay, IfcBoolean IsOverAllocated, IfcDateTime StatusTime, IfcDuration ActualWork, IfcPositiveRatioMeasure ActualUsage, IfcDateTime ActualStart, IfcDateTime ActualFinish, IfcDuration RemainingWork, IfcPositiveRatioMeasure RemainingUsage, IfcPositiveRatioMeasure Completion)
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.ScheduleWork = ScheduleWork;
			this.ScheduleUsage = ScheduleUsage;
			this.ScheduleStart = ScheduleStart;
			this.ScheduleFinish = ScheduleFinish;
			this.ScheduleContour = ScheduleContour;
			this.LevelingDelay = LevelingDelay;
			this.IsOverAllocated = IsOverAllocated;
			this.StatusTime = StatusTime;
			this.ActualWork = ActualWork;
			this.ActualUsage = ActualUsage;
			this.ActualStart = ActualStart;
			this.ActualFinish = ActualFinish;
			this.RemainingWork = RemainingWork;
			this.RemainingUsage = RemainingUsage;
			this.Completion = Completion;
		}
	}

	public class IfcRevolvedAreaSolid : IfcSweptAreaSolid, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcAxis1Placement Axis { get; set; }
		public IfcPlaneAngleMeasure Angle { get; set; }
		public IfcLine AxisLine => new IfcLine(Axis.Location, new IfcVector(Axis.Z, 1));
		// DERIVE : AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(Axis.Location, 
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRevolvedAreaSolid() { }

		public IfcRevolvedAreaSolid(IfcProfileDef SweptArea, IfcAxis2Placement3D Position, IfcAxis1Placement Axis, IfcPlaneAngleMeasure Angle)
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
			this.Axis = Axis;
			this.Angle = Angle;
		}
	}

	public class IfcRevolvedAreaSolidTapered : IfcRevolvedAreaSolid, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcProfileDef EndSweptArea { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRevolvedAreaSolidTapered() { }

		public IfcRevolvedAreaSolidTapered(IfcProfileDef SweptArea, IfcAxis2Placement3D Position, IfcAxis1Placement Axis, IfcPlaneAngleMeasure Angle, IfcProfileDef EndSweptArea)
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
			this.Axis = Axis;
			this.Angle = Angle;
			this.EndSweptArea = EndSweptArea;
		}
	}

	public class IfcRightCircularCone : IfcCsgPrimitive3D, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public IfcPositiveLengthMeasure Height { get; set; }
		public IfcPositiveLengthMeasure BottomRadius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRightCircularCone() { }

		public IfcRightCircularCone(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure Height, IfcPositiveLengthMeasure BottomRadius)
		{
			this.Position = Position;
			this.Height = Height;
			this.BottomRadius = BottomRadius;
		}
	}

	public class IfcRightCircularCylinder : IfcCsgPrimitive3D, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public IfcPositiveLengthMeasure Height { get; set; }
		public IfcPositiveLengthMeasure Radius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcRightCircularCylinder() { }

		public IfcRightCircularCylinder(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure Height, IfcPositiveLengthMeasure Radius)
		{
			this.Position = Position;
			this.Height = Height;
			this.Radius = Radius;
		}
	}

	public class IfcRoof : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcRoofTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcRoof() { }

		public IfcRoof(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcRoofTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcRoofType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcRoofTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcRoofType() { }

		public IfcRoofType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcRoofTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcRoot : IfcBase
	{
		public IfcGloballyUniqueId GlobalId { get; set; }
		public IfcOwnerHistory OwnerHistory { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcRoot() { }

		public IfcRoot(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcRoundedRectangleProfileDef : IfcRectangleProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure RoundingRadius { get; set; }
		public IfcRoundedRectangleProfileDef() { }

		public IfcRoundedRectangleProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure XDim, IfcPositiveLengthMeasure YDim, IfcPositiveLengthMeasure RoundingRadius)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.XDim = XDim;
			this.YDim = YDim;
			this.RoundingRadius = RoundingRadius;
		}
	}

	public class IfcSIUnit : IfcNamedUnit, IfcUnit
	{
		public IfcSIPrefix Prefix { get; set; }
		public IfcSIUnitName Name { get; set; }
		public IfcSIUnit() { }

		public IfcSIUnit(IfcDimensionalExponents Dimensions, IfcUnitEnum UnitType, IfcSIPrefix Prefix, IfcSIUnitName Name)
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
			this.Prefix = Prefix;
			this.Name = Name;
		}
	}

	public class IfcSanitaryTerminal : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSanitaryTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSanitaryTerminal() { }

		public IfcSanitaryTerminal(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSanitaryTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSanitaryTerminalType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSanitaryTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSanitaryTerminalType() { }

		public IfcSanitaryTerminalType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSanitaryTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcSchedulingTime : IfcBase
	{
		public IfcLabel Name { get; set; }
		public IfcDataOriginEnum DataOrigin { get; set; }
		public IfcLabel UserDefinedDataOrigin { get; set; }
		public IfcSchedulingTime() { }

		public IfcSchedulingTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin)
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		}
	}

	public class IfcSeamCurve : IfcSurfaceCurve, IfcCurveOnSurface, IfcGeometricSetSelect, IfcLayeredItem
	{
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSeamCurve() { }

		public IfcSeamCurve(IfcCurve Curve3D, List<IfcPcurve> AssociatedGeometry, IfcPreferredSurfaceCurveRepresentation MasterRepresentation)
		{
			this.Curve3D = Curve3D;
			this.AssociatedGeometry = AssociatedGeometry;
			this.MasterRepresentation = MasterRepresentation;
		}
	}

	public class IfcSectionProperties : IfcPreDefinedProperties, IfcResourceObjectSelect
	{
		public IfcSectionTypeEnum SectionType { get; set; }
		public IfcProfileDef StartProfile { get; set; }
		public IfcProfileDef EndProfile { get; set; }
		public IfcSectionProperties() { }

		public IfcSectionProperties(IfcSectionTypeEnum SectionType, IfcProfileDef StartProfile, IfcProfileDef EndProfile)
		{
			this.SectionType = SectionType;
			this.StartProfile = StartProfile;
			this.EndProfile = EndProfile;
		}
	}

	public class IfcSectionReinforcementProperties : IfcPreDefinedProperties, IfcResourceObjectSelect
	{
		public IfcLengthMeasure LongitudinalStartPosition { get; set; }
		public IfcLengthMeasure LongitudinalEndPosition { get; set; }
		public IfcLengthMeasure TransversePosition { get; set; }
		public IfcReinforcingBarRoleEnum ReinforcementRole { get; set; }
		public IfcSectionProperties SectionDefinition { get; set; }
		public List<IfcReinforcementBarProperties> CrossSectionReinforcementDefinitions { get; set; }
		public IfcSectionReinforcementProperties() { }

		public IfcSectionReinforcementProperties(IfcLengthMeasure LongitudinalStartPosition, IfcLengthMeasure LongitudinalEndPosition, IfcLengthMeasure TransversePosition, IfcReinforcingBarRoleEnum ReinforcementRole, IfcSectionProperties SectionDefinition, List<IfcReinforcementBarProperties> CrossSectionReinforcementDefinitions)
		{
			this.LongitudinalStartPosition = LongitudinalStartPosition;
			this.LongitudinalEndPosition = LongitudinalEndPosition;
			this.TransversePosition = TransversePosition;
			this.ReinforcementRole = ReinforcementRole;
			this.SectionDefinition = SectionDefinition;
			this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
		}
	}

	public class IfcSectionedSpine : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcCompositeCurve SpineCurve { get; set; }
		public List<IfcProfileDef> CrossSections { get; set; }
		public List<IfcAxis2Placement3D> CrossSectionPositions { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public IfcSectionedSpine() { }

		public IfcSectionedSpine(IfcCompositeCurve SpineCurve, List<IfcProfileDef> CrossSections, List<IfcAxis2Placement3D> CrossSectionPositions)
		{
			this.SpineCurve = SpineCurve;
			this.CrossSections = CrossSections;
			this.CrossSectionPositions = CrossSectionPositions;
		}
	}

	public class IfcSensor : IfcDistributionControlElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSensorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSensor() { }

		public IfcSensor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSensorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSensorType : IfcDistributionControlElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSensorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSensorType() { }

		public IfcSensorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSensorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcShadingDevice : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcShadingDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcShadingDevice() { }

		public IfcShadingDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcShadingDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcShadingDeviceType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcShadingDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcShadingDeviceType() { }

		public IfcShadingDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcShadingDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcShapeAspect : IfcBase
	{
		public List<IfcShapeModel> ShapeRepresentations { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcLogical ProductDefinitional { get; set; }
		public IfcProductRepresentationSelect PartOfProductDefinitionShape { get; set; }
		public IfcShapeAspect() { }

		public IfcShapeAspect(List<IfcShapeModel> ShapeRepresentations, IfcLabel Name, IfcText Description, IfcLogical ProductDefinitional, IfcProductRepresentationSelect PartOfProductDefinitionShape)
		{
			this.ShapeRepresentations = ShapeRepresentations;
			this.Name = Name;
			this.Description = Description;
			this.ProductDefinitional = ProductDefinitional;
			this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		}
	}

	public abstract class IfcShapeModel : IfcRepresentation, IfcLayeredItem
	{
		public List<IfcShapeAspect> OfShapeAspect => Model.GetInstances<IfcShapeAspect>().Where(e => e.ShapeRepresentations.Contains(this)).ToList();
		// INVERSE : OfShapeAspect : SET [0:1] OF IfcShapeAspect FOR ShapeRepresentations;
		public IfcShapeModel() { }

		public IfcShapeModel(IfcRepresentationContext ContextOfItems, IfcLabel RepresentationIdentifier, IfcLabel RepresentationType, List<IfcRepresentationItem> Items)
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
	}

	public class IfcShapeRepresentation : IfcShapeModel, IfcLayeredItem
	{
		public IfcShapeRepresentation() { }

		public IfcShapeRepresentation(IfcRepresentationContext ContextOfItems, IfcLabel RepresentationIdentifier, IfcLabel RepresentationType, List<IfcRepresentationItem> Items)
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
	}

	public class IfcShellBasedSurfaceModel : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public List<IfcShell> SbsmBoundary { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public IfcShellBasedSurfaceModel() { }

		public IfcShellBasedSurfaceModel(List<IfcShell> SbsmBoundary)
		{
			this.SbsmBoundary = SbsmBoundary;
		}
	}

	public abstract class IfcSimpleProperty : IfcProperty, IfcResourceObjectSelect
	{
		public IfcSimpleProperty() { }

		public IfcSimpleProperty(IfcIdentifier Name, IfcText Description)
		{
			this.Name = Name;
			this.Description = Description;
		}
	}

	public class IfcSimplePropertyTemplate : IfcPropertyTemplate, IfcDefinitionSelect
	{
		public IfcSimplePropertyTemplateTypeEnum TemplateType { get; set; }
		public IfcLabel PrimaryMeasureType { get; set; }
		public IfcLabel SecondaryMeasureType { get; set; }
		public IfcPropertyEnumeration Enumerators { get; set; }
		public IfcUnit PrimaryUnit { get; set; }
		public IfcUnit SecondaryUnit { get; set; }
		public IfcLabel Expression { get; set; }
		public IfcStateEnum AccessState { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcSimplePropertyTemplate() { }

		public IfcSimplePropertyTemplate(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcSimplePropertyTemplateTypeEnum TemplateType, IfcLabel PrimaryMeasureType, IfcLabel SecondaryMeasureType, IfcPropertyEnumeration Enumerators, IfcUnit PrimaryUnit, IfcUnit SecondaryUnit, IfcLabel Expression, IfcStateEnum AccessState)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.TemplateType = TemplateType;
			this.PrimaryMeasureType = PrimaryMeasureType;
			this.SecondaryMeasureType = SecondaryMeasureType;
			this.Enumerators = Enumerators;
			this.PrimaryUnit = PrimaryUnit;
			this.SecondaryUnit = SecondaryUnit;
			this.Expression = Expression;
			this.AccessState = AccessState;
		}
	}

	public class IfcSite : IfcSpatialStructureElement, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcCompoundPlaneAngleMeasure RefLatitude { get; set; }
		public IfcCompoundPlaneAngleMeasure RefLongitude { get; set; }
		public IfcLengthMeasure RefElevation { get; set; }
		public IfcLabel LandTitleNumber { get; set; }
		public IfcPostalAddress SiteAddress { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSite() { }

		public IfcSite(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcElementCompositionEnum CompositionType, IfcCompoundPlaneAngleMeasure RefLatitude, IfcCompoundPlaneAngleMeasure RefLongitude, IfcLengthMeasure RefElevation, IfcLabel LandTitleNumber, IfcPostalAddress SiteAddress)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
			this.CompositionType = CompositionType;
			this.RefLatitude = RefLatitude;
			this.RefLongitude = RefLongitude;
			this.RefElevation = RefElevation;
			this.LandTitleNumber = LandTitleNumber;
			this.SiteAddress = SiteAddress;
		}
	}

	public class IfcSlab : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSlabTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSlab() { }

		public IfcSlab(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSlabTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSlabElementedCase : IfcSlab, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSlabElementedCase() { }

		public IfcSlabElementedCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSlabTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSlabStandardCase : IfcSlab, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSlabStandardCase() { }

		public IfcSlabStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSlabTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSlabType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSlabTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSlabType() { }

		public IfcSlabType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSlabTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSlippageConnectionCondition : IfcStructuralConnectionCondition
	{
		public IfcLengthMeasure SlippageX { get; set; }
		public IfcLengthMeasure SlippageY { get; set; }
		public IfcLengthMeasure SlippageZ { get; set; }
		public IfcSlippageConnectionCondition() { }

		public IfcSlippageConnectionCondition(IfcLabel Name, IfcLengthMeasure SlippageX, IfcLengthMeasure SlippageY, IfcLengthMeasure SlippageZ)
		{
			this.Name = Name;
			this.SlippageX = SlippageX;
			this.SlippageY = SlippageY;
			this.SlippageZ = SlippageZ;
		}
	}

	public class IfcSolarDevice : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSolarDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSolarDevice() { }

		public IfcSolarDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSolarDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSolarDeviceType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSolarDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSolarDeviceType() { }

		public IfcSolarDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSolarDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcSolidModel : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public abstract List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract List<IfcStyledItem> GetStyledByItem();
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcSolidModel() { }
	}

	public class IfcSpace : IfcSpatialStructureElement, IfcDefinitionSelect, IfcProductSelect, IfcSpaceBoundarySelect
	{
		public IfcSpaceTypeEnum PredefinedType { get; set; }
		public IfcLengthMeasure ElevationWithFlooring { get; set; }
		public List<IfcRelCoversSpaces> HasCoverings => Model.GetInstances<IfcRelCoversSpaces>().Where(e => e.RelatingSpace == this).ToList();
		// INVERSE : HasCoverings : SET [0:?] OF IfcRelCoversSpaces FOR RelatingSpace;
		public List<IfcRelSpaceBoundary> BoundedBy => Model.GetInstances<IfcRelSpaceBoundary>().Where(e => e.RelatingSpace == this).ToList();
		// INVERSE : BoundedBy : SET [0:?] OF IfcRelSpaceBoundary FOR RelatingSpace;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public virtual IfcLabel GetObjectType() { return ObjectType; }
		public virtual List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public virtual List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public virtual List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public virtual List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public virtual IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public virtual IfcProductRepresentation GetRepresentation() { return Representation; }
		public virtual IfcLabel GetLongName() { return LongName; }
		public virtual List<IfcRelContainedInSpatialStructure> GetContainsElements() { return ContainsElements; }
		public virtual List<IfcRelServicesBuildings> GetServicedBySystems() { return ServicedBySystems; }
		public virtual List<IfcRelReferencedInSpatialStructure> GetReferencesElements() { return ReferencesElements; }
		public virtual List<IfcRelSpaceBoundary> GetBoundedBy() { return BoundedBy; }
		public IfcSpace() { }

		public IfcSpace(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcElementCompositionEnum CompositionType, IfcSpaceTypeEnum PredefinedType, IfcLengthMeasure ElevationWithFlooring)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
			this.CompositionType = CompositionType;
			this.PredefinedType = PredefinedType;
			this.ElevationWithFlooring = ElevationWithFlooring;
		}
	}

	public class IfcSpaceHeater : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSpaceHeaterTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSpaceHeater() { }

		public IfcSpaceHeater(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSpaceHeaterTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSpaceHeaterType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSpaceHeaterTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSpaceHeaterType() { }

		public IfcSpaceHeaterType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSpaceHeaterTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSpaceType : IfcSpatialStructureElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSpaceTypeEnum PredefinedType { get; set; }
		public IfcLabel LongName { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSpaceType() { }

		public IfcSpaceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSpaceTypeEnum PredefinedType, IfcLabel LongName)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
	}

	public abstract class IfcSpatialElement : IfcProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcLabel LongName { get; set; }
		public List<IfcRelContainedInSpatialStructure> ContainsElements => Model.GetInstances<IfcRelContainedInSpatialStructure>().Where(e => e.RelatingStructure == this).ToList();
		// INVERSE : ContainsElements : SET [0:?] OF IfcRelContainedInSpatialStructure FOR RelatingStructure;
		public List<IfcRelServicesBuildings> ServicedBySystems => Model.GetInstances<IfcRelServicesBuildings>().Where(e => e.RelatedBuildings.Contains(this)).ToList();
		// INVERSE : ServicedBySystems : SET [0:?] OF IfcRelServicesBuildings FOR RelatedBuildings;
		public List<IfcRelReferencedInSpatialStructure> ReferencesElements => Model.GetInstances<IfcRelReferencedInSpatialStructure>().Where(e => e.RelatingStructure == this).ToList();
		// INVERSE : ReferencesElements : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatingStructure;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcSpatialElement() { }

		public IfcSpatialElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
		}
	}

	public abstract class IfcSpatialElementType : IfcTypeProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcLabel ElementType { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcSpatialElementType() { }

		public IfcSpatialElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public abstract class IfcSpatialStructureElement : IfcSpatialElement, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcElementCompositionEnum CompositionType { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcSpatialStructureElement() { }

		public IfcSpatialStructureElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcElementCompositionEnum CompositionType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
			this.CompositionType = CompositionType;
		}
	}

	public abstract class IfcSpatialStructureElementType : IfcSpatialElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcSpatialStructureElementType() { }

		public IfcSpatialStructureElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
		}
	}

	public class IfcSpatialZone : IfcSpatialElement, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSpatialZoneTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSpatialZone() { }

		public IfcSpatialZone(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcLabel LongName, IfcSpatialZoneTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.LongName = LongName;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSpatialZoneType : IfcSpatialElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSpatialZoneTypeEnum PredefinedType { get; set; }
		public IfcLabel LongName { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSpatialZoneType() { }

		public IfcSpatialZoneType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSpatialZoneTypeEnum PredefinedType, IfcLabel LongName)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
	}

	public class IfcSphere : IfcCsgPrimitive3D, IfcBooleanOperand, IfcCsgSelect, IfcLayeredItem
	{
		public IfcPositiveLengthMeasure Radius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSphere() { }

		public IfcSphere(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure Radius)
		{
			this.Position = Position;
			this.Radius = Radius;
		}
	}

	public class IfcSphericalSurface : IfcElementarySurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcPositiveLengthMeasure Radius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSphericalSurface() { }

		public IfcSphericalSurface(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure Radius)
		{
			this.Position = Position;
			this.Radius = Radius;
		}
	}

	public class IfcStackTerminal : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcStackTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStackTerminal() { }

		public IfcStackTerminal(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcStackTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStackTerminalType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcStackTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStackTerminalType() { }

		public IfcStackTerminalType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcStackTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStair : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcStairTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStair() { }

		public IfcStair(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcStairTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStairFlight : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcInteger NumberOfRisers { get; set; }
		public IfcInteger NumberOfTreads { get; set; }
		public IfcPositiveLengthMeasure RiserHeight { get; set; }
		public IfcPositiveLengthMeasure TreadLength { get; set; }
		public IfcStairFlightTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStairFlight() { }

		public IfcStairFlight(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcInteger NumberOfRisers, IfcInteger NumberOfTreads, IfcPositiveLengthMeasure RiserHeight, IfcPositiveLengthMeasure TreadLength, IfcStairFlightTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.NumberOfRisers = NumberOfRisers;
			this.NumberOfTreads = NumberOfTreads;
			this.RiserHeight = RiserHeight;
			this.TreadLength = TreadLength;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStairFlightType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcStairFlightTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStairFlightType() { }

		public IfcStairFlightType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcStairFlightTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStairType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcStairTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStairType() { }

		public IfcStairType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcStairTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcStructuralAction : IfcStructuralActivity, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcBoolean DestabilizingLoad { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcStructuralAction() { }

		public IfcStructuralAction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcBoolean DestabilizingLoad)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.DestabilizingLoad = DestabilizingLoad;
		}
	}

	public abstract class IfcStructuralActivity : IfcProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcStructuralLoad AppliedLoad { get; set; }
		public IfcGlobalOrLocalEnum GlobalOrLocal { get; set; }
		public List<IfcRelConnectsStructuralActivity> AssignedToStructuralItem => Model.GetInstances<IfcRelConnectsStructuralActivity>().Where(e => e.RelatedStructuralActivity == this).ToList();
		// INVERSE : AssignedToStructuralItem : SET [0:1] OF IfcRelConnectsStructuralActivity FOR RelatedStructuralActivity;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcStructuralActivity() { }

		public IfcStructuralActivity(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
	}

	public class IfcStructuralAnalysisModel : IfcSystem, IfcDefinitionSelect
	{
		public IfcAnalysisModelTypeEnum PredefinedType { get; set; }
		public IfcAxis2Placement3D OrientationOf2DPlane { get; set; }
		public List<IfcStructuralLoadGroup> LoadedBy { get; set; }
		public List<IfcStructuralResultGroup> HasResults { get; set; }
		public IfcObjectPlacement SharedPlacement { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcStructuralAnalysisModel() { }

		public IfcStructuralAnalysisModel(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcAnalysisModelTypeEnum PredefinedType, IfcAxis2Placement3D OrientationOf2DPlane, List<IfcStructuralLoadGroup> LoadedBy, List<IfcStructuralResultGroup> HasResults, IfcObjectPlacement SharedPlacement)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.PredefinedType = PredefinedType;
			this.OrientationOf2DPlane = OrientationOf2DPlane;
			this.LoadedBy = LoadedBy;
			this.HasResults = HasResults;
			this.SharedPlacement = SharedPlacement;
		}
	}

	public abstract class IfcStructuralConnection : IfcStructuralItem, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcBoundaryCondition AppliedCondition { get; set; }
		public List<IfcRelConnectsStructuralMember> ConnectsStructuralMembers => Model.GetInstances<IfcRelConnectsStructuralMember>().Where(e => e.RelatedStructuralConnection == this).ToList();
		// INVERSE : ConnectsStructuralMembers : SET [1:?] OF IfcRelConnectsStructuralMember FOR RelatedStructuralConnection;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcStructuralConnection() { }

		public IfcStructuralConnection(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcBoundaryCondition AppliedCondition)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedCondition = AppliedCondition;
		}
	}

	public abstract class IfcStructuralConnectionCondition : IfcBase
	{
		public IfcLabel Name { get; set; }
		public IfcStructuralConnectionCondition() { }

		public IfcStructuralConnectionCondition(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcStructuralCurveAction : IfcStructuralAction, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcProjectedOrTrueLengthEnum ProjectedOrTrue { get; set; }
		public IfcStructuralCurveActivityTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralCurveAction() { }

		public IfcStructuralCurveAction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcBoolean DestabilizingLoad, IfcProjectedOrTrueLengthEnum ProjectedOrTrue, IfcStructuralCurveActivityTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.DestabilizingLoad = DestabilizingLoad;
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStructuralCurveConnection : IfcStructuralConnection, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcDirection Axis { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStructuralCurveConnection() { }

		public IfcStructuralCurveConnection(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcBoundaryCondition AppliedCondition, IfcDirection Axis)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedCondition = AppliedCondition;
			this.Axis = Axis;
		}
	}

	public class IfcStructuralCurveMember : IfcStructuralMember, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcStructuralCurveMemberTypeEnum PredefinedType { get; set; }
		public IfcDirection Axis { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStructuralCurveMember() { }

		public IfcStructuralCurveMember(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralCurveMemberTypeEnum PredefinedType, IfcDirection Axis)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.PredefinedType = PredefinedType;
			this.Axis = Axis;
		}
	}

	public class IfcStructuralCurveMemberVarying : IfcStructuralCurveMember, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStructuralCurveMemberVarying() { }

		public IfcStructuralCurveMemberVarying(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralCurveMemberTypeEnum PredefinedType, IfcDirection Axis)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.PredefinedType = PredefinedType;
			this.Axis = Axis;
		}
	}

	public class IfcStructuralCurveReaction : IfcStructuralReaction, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcStructuralCurveActivityTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralCurveReaction() { }

		public IfcStructuralCurveReaction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcStructuralCurveActivityTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcStructuralItem : IfcProduct, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public List<IfcRelConnectsStructuralActivity> AssignedStructuralActivity => Model.GetInstances<IfcRelConnectsStructuralActivity>().Where(e => e.RelatingElement == this).ToList();
		// INVERSE : AssignedStructuralActivity : SET [0:?] OF IfcRelConnectsStructuralActivity FOR RelatingElement;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract IfcLabel GetObjectType();
		public abstract List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract List<IfcRelDefinesByObject> GetDeclares();
		public abstract List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract IfcObjectPlacement GetObjectPlacement();
		public abstract IfcProductRepresentation GetRepresentation();
		public IfcStructuralItem() { }

		public IfcStructuralItem(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
	}

	public class IfcStructuralLinearAction : IfcStructuralCurveAction, IfcDefinitionSelect, IfcProductSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralLinearAction() { }

		public IfcStructuralLinearAction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcBoolean DestabilizingLoad, IfcProjectedOrTrueLengthEnum ProjectedOrTrue, IfcStructuralCurveActivityTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.DestabilizingLoad = DestabilizingLoad;
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcStructuralLoad : IfcBase
	{
		public IfcLabel Name { get; set; }
		public IfcStructuralLoad() { }

		public IfcStructuralLoad(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcStructuralLoadCase : IfcStructuralLoadGroup, IfcDefinitionSelect
	{
		public List<IfcRatioMeasure> SelfWeightCoefficients { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcStructuralLoadCase() { }

		public IfcStructuralLoadCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLoadGroupTypeEnum PredefinedType, IfcActionTypeEnum ActionType, IfcActionSourceTypeEnum ActionSource, IfcRatioMeasure Coefficient, IfcLabel Purpose, List<IfcRatioMeasure> SelfWeightCoefficients)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.PredefinedType = PredefinedType;
			this.ActionType = ActionType;
			this.ActionSource = ActionSource;
			this.Coefficient = Coefficient;
			this.Purpose = Purpose;
			this.SelfWeightCoefficients = SelfWeightCoefficients;
		}
	}

	public class IfcStructuralLoadConfiguration : IfcStructuralLoad
	{
		public List<IfcStructuralLoadOrResult> Values { get; set; }
		public List<List<IfcLengthMeasure>> Locations { get; set; }
		public IfcStructuralLoadConfiguration() { }

		public IfcStructuralLoadConfiguration(IfcLabel Name, List<IfcStructuralLoadOrResult> Values, List<List<IfcLengthMeasure>> Locations)
		{
			this.Name = Name;
			this.Values = Values;
			this.Locations = Locations;
		}
	}

	public class IfcStructuralLoadGroup : IfcGroup, IfcDefinitionSelect
	{
		public IfcLoadGroupTypeEnum PredefinedType { get; set; }
		public IfcActionTypeEnum ActionType { get; set; }
		public IfcActionSourceTypeEnum ActionSource { get; set; }
		public IfcRatioMeasure Coefficient { get; set; }
		public IfcLabel Purpose { get; set; }
		public List<IfcStructuralResultGroup> SourceOfResultGroup => Model.GetInstances<IfcStructuralResultGroup>().Where(e => e.ResultForLoadGroup == this).ToList();
		// INVERSE : SourceOfResultGroup : SET [0:1] OF IfcStructuralResultGroup FOR ResultForLoadGroup;
		public List<IfcStructuralAnalysisModel> LoadGroupFor => Model.GetInstances<IfcStructuralAnalysisModel>().Where(e => e.LoadedBy.Contains(this)).ToList();
		// INVERSE : LoadGroupFor : SET [0:?] OF IfcStructuralAnalysisModel FOR LoadedBy;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcStructuralLoadGroup() { }

		public IfcStructuralLoadGroup(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLoadGroupTypeEnum PredefinedType, IfcActionTypeEnum ActionType, IfcActionSourceTypeEnum ActionSource, IfcRatioMeasure Coefficient, IfcLabel Purpose)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.PredefinedType = PredefinedType;
			this.ActionType = ActionType;
			this.ActionSource = ActionSource;
			this.Coefficient = Coefficient;
			this.Purpose = Purpose;
		}
	}

	public class IfcStructuralLoadLinearForce : IfcStructuralLoadStatic
	{
		public IfcLinearForceMeasure LinearForceX { get; set; }
		public IfcLinearForceMeasure LinearForceY { get; set; }
		public IfcLinearForceMeasure LinearForceZ { get; set; }
		public IfcLinearMomentMeasure LinearMomentX { get; set; }
		public IfcLinearMomentMeasure LinearMomentY { get; set; }
		public IfcLinearMomentMeasure LinearMomentZ { get; set; }
		public IfcStructuralLoadLinearForce() { }

		public IfcStructuralLoadLinearForce(IfcLabel Name, IfcLinearForceMeasure LinearForceX, IfcLinearForceMeasure LinearForceY, IfcLinearForceMeasure LinearForceZ, IfcLinearMomentMeasure LinearMomentX, IfcLinearMomentMeasure LinearMomentY, IfcLinearMomentMeasure LinearMomentZ)
		{
			this.Name = Name;
			this.LinearForceX = LinearForceX;
			this.LinearForceY = LinearForceY;
			this.LinearForceZ = LinearForceZ;
			this.LinearMomentX = LinearMomentX;
			this.LinearMomentY = LinearMomentY;
			this.LinearMomentZ = LinearMomentZ;
		}
	}

	public abstract class IfcStructuralLoadOrResult : IfcStructuralLoad
	{
		public IfcStructuralLoadOrResult() { }

		public IfcStructuralLoadOrResult(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcStructuralLoadPlanarForce : IfcStructuralLoadStatic
	{
		public IfcPlanarForceMeasure PlanarForceX { get; set; }
		public IfcPlanarForceMeasure PlanarForceY { get; set; }
		public IfcPlanarForceMeasure PlanarForceZ { get; set; }
		public IfcStructuralLoadPlanarForce() { }

		public IfcStructuralLoadPlanarForce(IfcLabel Name, IfcPlanarForceMeasure PlanarForceX, IfcPlanarForceMeasure PlanarForceY, IfcPlanarForceMeasure PlanarForceZ)
		{
			this.Name = Name;
			this.PlanarForceX = PlanarForceX;
			this.PlanarForceY = PlanarForceY;
			this.PlanarForceZ = PlanarForceZ;
		}
	}

	public class IfcStructuralLoadSingleDisplacement : IfcStructuralLoadStatic
	{
		public IfcLengthMeasure DisplacementX { get; set; }
		public IfcLengthMeasure DisplacementY { get; set; }
		public IfcLengthMeasure DisplacementZ { get; set; }
		public IfcPlaneAngleMeasure RotationalDisplacementRX { get; set; }
		public IfcPlaneAngleMeasure RotationalDisplacementRY { get; set; }
		public IfcPlaneAngleMeasure RotationalDisplacementRZ { get; set; }
		public IfcStructuralLoadSingleDisplacement() { }

		public IfcStructuralLoadSingleDisplacement(IfcLabel Name, IfcLengthMeasure DisplacementX, IfcLengthMeasure DisplacementY, IfcLengthMeasure DisplacementZ, IfcPlaneAngleMeasure RotationalDisplacementRX, IfcPlaneAngleMeasure RotationalDisplacementRY, IfcPlaneAngleMeasure RotationalDisplacementRZ)
		{
			this.Name = Name;
			this.DisplacementX = DisplacementX;
			this.DisplacementY = DisplacementY;
			this.DisplacementZ = DisplacementZ;
			this.RotationalDisplacementRX = RotationalDisplacementRX;
			this.RotationalDisplacementRY = RotationalDisplacementRY;
			this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		}
	}

	public class IfcStructuralLoadSingleDisplacementDistortion : IfcStructuralLoadSingleDisplacement
	{
		public IfcCurvatureMeasure Distortion { get; set; }
		public IfcStructuralLoadSingleDisplacementDistortion() { }

		public IfcStructuralLoadSingleDisplacementDistortion(IfcLabel Name, IfcLengthMeasure DisplacementX, IfcLengthMeasure DisplacementY, IfcLengthMeasure DisplacementZ, IfcPlaneAngleMeasure RotationalDisplacementRX, IfcPlaneAngleMeasure RotationalDisplacementRY, IfcPlaneAngleMeasure RotationalDisplacementRZ, IfcCurvatureMeasure Distortion)
		{
			this.Name = Name;
			this.DisplacementX = DisplacementX;
			this.DisplacementY = DisplacementY;
			this.DisplacementZ = DisplacementZ;
			this.RotationalDisplacementRX = RotationalDisplacementRX;
			this.RotationalDisplacementRY = RotationalDisplacementRY;
			this.RotationalDisplacementRZ = RotationalDisplacementRZ;
			this.Distortion = Distortion;
		}
	}

	public class IfcStructuralLoadSingleForce : IfcStructuralLoadStatic
	{
		public IfcForceMeasure ForceX { get; set; }
		public IfcForceMeasure ForceY { get; set; }
		public IfcForceMeasure ForceZ { get; set; }
		public IfcTorqueMeasure MomentX { get; set; }
		public IfcTorqueMeasure MomentY { get; set; }
		public IfcTorqueMeasure MomentZ { get; set; }
		public IfcStructuralLoadSingleForce() { }

		public IfcStructuralLoadSingleForce(IfcLabel Name, IfcForceMeasure ForceX, IfcForceMeasure ForceY, IfcForceMeasure ForceZ, IfcTorqueMeasure MomentX, IfcTorqueMeasure MomentY, IfcTorqueMeasure MomentZ)
		{
			this.Name = Name;
			this.ForceX = ForceX;
			this.ForceY = ForceY;
			this.ForceZ = ForceZ;
			this.MomentX = MomentX;
			this.MomentY = MomentY;
			this.MomentZ = MomentZ;
		}
	}

	public class IfcStructuralLoadSingleForceWarping : IfcStructuralLoadSingleForce
	{
		public IfcWarpingMomentMeasure WarpingMoment { get; set; }
		public IfcStructuralLoadSingleForceWarping() { }

		public IfcStructuralLoadSingleForceWarping(IfcLabel Name, IfcForceMeasure ForceX, IfcForceMeasure ForceY, IfcForceMeasure ForceZ, IfcTorqueMeasure MomentX, IfcTorqueMeasure MomentY, IfcTorqueMeasure MomentZ, IfcWarpingMomentMeasure WarpingMoment)
		{
			this.Name = Name;
			this.ForceX = ForceX;
			this.ForceY = ForceY;
			this.ForceZ = ForceZ;
			this.MomentX = MomentX;
			this.MomentY = MomentY;
			this.MomentZ = MomentZ;
			this.WarpingMoment = WarpingMoment;
		}
	}

	public abstract class IfcStructuralLoadStatic : IfcStructuralLoadOrResult
	{
		public IfcStructuralLoadStatic() { }

		public IfcStructuralLoadStatic(IfcLabel Name)
		{
			this.Name = Name;
		}
	}

	public class IfcStructuralLoadTemperature : IfcStructuralLoadStatic
	{
		public IfcThermodynamicTemperatureMeasure DeltaTConstant { get; set; }
		public IfcThermodynamicTemperatureMeasure DeltaTY { get; set; }
		public IfcThermodynamicTemperatureMeasure DeltaTZ { get; set; }
		public IfcStructuralLoadTemperature() { }

		public IfcStructuralLoadTemperature(IfcLabel Name, IfcThermodynamicTemperatureMeasure DeltaTConstant, IfcThermodynamicTemperatureMeasure DeltaTY, IfcThermodynamicTemperatureMeasure DeltaTZ)
		{
			this.Name = Name;
			this.DeltaTConstant = DeltaTConstant;
			this.DeltaTY = DeltaTY;
			this.DeltaTZ = DeltaTZ;
		}
	}

	public abstract class IfcStructuralMember : IfcStructuralItem, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public List<IfcRelConnectsStructuralMember> ConnectedBy => Model.GetInstances<IfcRelConnectsStructuralMember>().Where(e => e.RelatingStructuralMember == this).ToList();
		// INVERSE : ConnectedBy : SET [0:?] OF IfcRelConnectsStructuralMember FOR RelatingStructuralMember;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public abstract override IfcLabel GetObjectType();
		public abstract override List<IfcRelDefinesByObject> GetIsDeclaredBy();
		public abstract override List<IfcRelDefinesByObject> GetDeclares();
		public abstract override List<IfcRelDefinesByType> GetIsTypedBy();
		public abstract override List<IfcRelDefinesByProperties> GetIsDefinedBy();
		public abstract override IfcObjectPlacement GetObjectPlacement();
		public abstract override IfcProductRepresentation GetRepresentation();
		public IfcStructuralMember() { }

		public IfcStructuralMember(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
	}

	public class IfcStructuralPlanarAction : IfcStructuralSurfaceAction, IfcDefinitionSelect, IfcProductSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralPlanarAction() { }

		public IfcStructuralPlanarAction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcBoolean DestabilizingLoad, IfcProjectedOrTrueLengthEnum ProjectedOrTrue, IfcStructuralSurfaceActivityTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.DestabilizingLoad = DestabilizingLoad;
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStructuralPointAction : IfcStructuralAction, IfcDefinitionSelect, IfcProductSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralPointAction() { }

		public IfcStructuralPointAction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcBoolean DestabilizingLoad)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.DestabilizingLoad = DestabilizingLoad;
		}
	}

	public class IfcStructuralPointConnection : IfcStructuralConnection, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcAxis2Placement3D ConditionCoordinateSystem { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStructuralPointConnection() { }

		public IfcStructuralPointConnection(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcBoundaryCondition AppliedCondition, IfcAxis2Placement3D ConditionCoordinateSystem)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedCondition = AppliedCondition;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
	}

	public class IfcStructuralPointReaction : IfcStructuralReaction, IfcDefinitionSelect, IfcProductSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralPointReaction() { }

		public IfcStructuralPointReaction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
	}

	public abstract class IfcStructuralReaction : IfcStructuralActivity, IfcDefinitionSelect, IfcProductSelect
	{
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract override List<IfcRelAssigns> GetHasAssignments();
		public abstract override List<IfcRelNests> GetNests();
		public abstract override List<IfcRelNests> GetIsNestedBy();
		public abstract override List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract override List<IfcRelAggregates> GetDecomposes();
		public abstract override List<IfcRelAssignsToProduct> GetReferencedBy();
		public IfcStructuralReaction() { }

		public IfcStructuralReaction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
	}

	public class IfcStructuralResultGroup : IfcGroup, IfcDefinitionSelect
	{
		public IfcAnalysisTheoryTypeEnum TheoryType { get; set; }
		public IfcStructuralLoadGroup ResultForLoadGroup { get; set; }
		public IfcBoolean IsLinear { get; set; }
		public List<IfcStructuralAnalysisModel> ResultGroupFor => Model.GetInstances<IfcStructuralAnalysisModel>().Where(e => e.HasResults.Contains(this)).ToList();
		// INVERSE : ResultGroupFor : SET [0:1] OF IfcStructuralAnalysisModel FOR HasResults;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcStructuralResultGroup() { }

		public IfcStructuralResultGroup(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcAnalysisTheoryTypeEnum TheoryType, IfcStructuralLoadGroup ResultForLoadGroup, IfcBoolean IsLinear)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.TheoryType = TheoryType;
			this.ResultForLoadGroup = ResultForLoadGroup;
			this.IsLinear = IsLinear;
		}
	}

	public class IfcStructuralSurfaceAction : IfcStructuralAction, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcProjectedOrTrueLengthEnum ProjectedOrTrue { get; set; }
		public IfcStructuralSurfaceActivityTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralSurfaceAction() { }

		public IfcStructuralSurfaceAction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcBoolean DestabilizingLoad, IfcProjectedOrTrueLengthEnum ProjectedOrTrue, IfcStructuralSurfaceActivityTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.DestabilizingLoad = DestabilizingLoad;
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcStructuralSurfaceConnection : IfcStructuralConnection, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStructuralSurfaceConnection() { }

		public IfcStructuralSurfaceConnection(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcBoundaryCondition AppliedCondition)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedCondition = AppliedCondition;
		}
	}

	public class IfcStructuralSurfaceMember : IfcStructuralMember, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcStructuralSurfaceMemberTypeEnum PredefinedType { get; set; }
		public IfcPositiveLengthMeasure Thickness { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStructuralSurfaceMember() { }

		public IfcStructuralSurfaceMember(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralSurfaceMemberTypeEnum PredefinedType, IfcPositiveLengthMeasure Thickness)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.PredefinedType = PredefinedType;
			this.Thickness = Thickness;
		}
	}

	public class IfcStructuralSurfaceMemberVarying : IfcStructuralSurfaceMember, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcStructuralSurfaceMemberVarying() { }

		public IfcStructuralSurfaceMemberVarying(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralSurfaceMemberTypeEnum PredefinedType, IfcPositiveLengthMeasure Thickness)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.PredefinedType = PredefinedType;
			this.Thickness = Thickness;
		}
	}

	public class IfcStructuralSurfaceReaction : IfcStructuralReaction, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcStructuralSurfaceActivityTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcStructuralSurfaceReaction() { }

		public IfcStructuralSurfaceReaction(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcStructuralLoad AppliedLoad, IfcGlobalOrLocalEnum GlobalOrLocal, IfcStructuralSurfaceActivityTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcStyleModel : IfcRepresentation, IfcLayeredItem
	{
		public IfcStyleModel() { }

		public IfcStyleModel(IfcRepresentationContext ContextOfItems, IfcLabel RepresentationIdentifier, IfcLabel RepresentationType, List<IfcRepresentationItem> Items)
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
	}

	public class IfcStyledItem : IfcRepresentationItem, IfcLayeredItem
	{
		public IfcRepresentationItem Item { get; set; }
		public List<IfcStyleAssignmentSelect> Styles { get; set; }
		public IfcLabel Name { get; set; }
		public IfcStyledItem() { }

		public IfcStyledItem(IfcRepresentationItem Item, List<IfcStyleAssignmentSelect> Styles, IfcLabel Name)
		{
			this.Item = Item;
			this.Styles = Styles;
			this.Name = Name;
		}
	}

	public class IfcStyledRepresentation : IfcStyleModel, IfcLayeredItem
	{
		public IfcStyledRepresentation() { }

		public IfcStyledRepresentation(IfcRepresentationContext ContextOfItems, IfcLabel RepresentationIdentifier, IfcLabel RepresentationType, List<IfcRepresentationItem> Items)
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
	}

	public class IfcSubContractResource : IfcConstructionResource, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcSubContractResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcSubContractResource() { }

		public IfcSubContractResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcResourceTime Usage, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcSubContractResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSubContractResourceType : IfcConstructionResourceType, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcSubContractResourceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public override List<IfcAppliedValue> GetBaseCosts() { return BaseCosts; }
		public override IfcPhysicalQuantity GetBaseQuantity() { return BaseQuantity; }
		public IfcSubContractResourceType() { }

		public IfcSubContractResourceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType, List<IfcAppliedValue> BaseCosts, IfcPhysicalQuantity BaseQuantity, IfcSubContractResourceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSubedge : IfcEdge, IfcLayeredItem
	{
		public IfcEdge ParentEdge { get; set; }
		public IfcSubedge() { }

		public IfcSubedge(IfcVertex EdgeStart, IfcVertex EdgeEnd, IfcEdge ParentEdge)
		{
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
			this.ParentEdge = ParentEdge;
		}
	}

	public abstract class IfcSurface : IfcGeometricRepresentationItem, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public abstract List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract List<IfcStyledItem> GetStyledByItem();
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcSurface() { }
	}

	public class IfcSurfaceCurve : IfcCurve, IfcCurveOnSurface, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcCurve Curve3D { get; set; }
		public List<IfcPcurve> AssociatedGeometry { get; set; }
		public IfcPreferredSurfaceCurveRepresentation MasterRepresentation { get; set; }
		public List<IfcSurface> BasisSurface => IfcGetBasisSurface(this);
		// DERIVE : BasisSurface : SET [1:2] OF IfcSurface := IfcGetBasisSurface(SELF);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSurfaceCurve() { }

		public IfcSurfaceCurve(IfcCurve Curve3D, List<IfcPcurve> AssociatedGeometry, IfcPreferredSurfaceCurveRepresentation MasterRepresentation)
		{
			this.Curve3D = Curve3D;
			this.AssociatedGeometry = AssociatedGeometry;
			this.MasterRepresentation = MasterRepresentation;
		}
	}

	public class IfcSurfaceCurveSweptAreaSolid : IfcSweptAreaSolid, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcCurve Directrix { get; set; }
		public IfcParameterValue StartParam { get; set; }
		public IfcParameterValue EndParam { get; set; }
		public IfcSurface ReferenceSurface { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSurfaceCurveSweptAreaSolid() { }

		public IfcSurfaceCurveSweptAreaSolid(IfcProfileDef SweptArea, IfcAxis2Placement3D Position, IfcCurve Directrix, IfcParameterValue StartParam, IfcParameterValue EndParam, IfcSurface ReferenceSurface)
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.ReferenceSurface = ReferenceSurface;
		}
	}

	public class IfcSurfaceFeature : IfcFeatureElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSurfaceFeatureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSurfaceFeature() { }

		public IfcSurfaceFeature(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSurfaceFeatureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSurfaceOfLinearExtrusion : IfcSweptSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcDirection ExtrudedDirection { get; set; }
		public IfcLengthMeasure Depth { get; set; }
		public IfcVector ExtrusionAxis => new IfcVector(ExtrudedDirection, Depth);
		// DERIVE : ExtrusionAxis : IfcVector := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (ExtrudedDirection, Depth);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSurfaceOfLinearExtrusion() { }

		public IfcSurfaceOfLinearExtrusion(IfcProfileDef SweptCurve, IfcAxis2Placement3D Position, IfcDirection ExtrudedDirection, IfcLengthMeasure Depth)
		{
			this.SweptCurve = SweptCurve;
			this.Position = Position;
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
	}

	public class IfcSurfaceOfRevolution : IfcSweptSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcAxis1Placement AxisPosition { get; set; }
		public IfcLine AxisLine => new IfcLine(AxisPosition.Location, new IfcVector(AxisPosition.Z, 1));
		// DERIVE : AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(AxisPosition.Location, 
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSurfaceOfRevolution() { }

		public IfcSurfaceOfRevolution(IfcProfileDef SweptCurve, IfcAxis2Placement3D Position, IfcAxis1Placement AxisPosition)
		{
			this.SweptCurve = SweptCurve;
			this.Position = Position;
			this.AxisPosition = AxisPosition;
		}
	}

	public class IfcSurfaceReinforcementArea : IfcStructuralLoadOrResult
	{
		public List<IfcLengthMeasure> SurfaceReinforcement1 { get; set; }
		public List<IfcLengthMeasure> SurfaceReinforcement2 { get; set; }
		public IfcRatioMeasure ShearReinforcement { get; set; }
		public IfcSurfaceReinforcementArea() { }

		public IfcSurfaceReinforcementArea(IfcLabel Name, List<IfcLengthMeasure> SurfaceReinforcement1, List<IfcLengthMeasure> SurfaceReinforcement2, IfcRatioMeasure ShearReinforcement)
		{
			this.Name = Name;
			this.SurfaceReinforcement1 = SurfaceReinforcement1;
			this.SurfaceReinforcement2 = SurfaceReinforcement2;
			this.ShearReinforcement = ShearReinforcement;
		}
	}

	public class IfcSurfaceStyle : IfcPresentationStyle, IfcPresentationStyleSelect, IfcStyleAssignmentSelect
	{
		public IfcSurfaceSide Side { get; set; }
		public List<IfcSurfaceStyleElementSelect> Styles { get; set; }
		public IfcSurfaceStyle() { }

		public IfcSurfaceStyle(IfcLabel Name, IfcSurfaceSide Side, List<IfcSurfaceStyleElementSelect> Styles)
		{
			this.Name = Name;
			this.Side = Side;
			this.Styles = Styles;
		}
	}

	public class IfcSurfaceStyleLighting : IfcPresentationItem, IfcSurfaceStyleElementSelect
	{
		public IfcColourRgb DiffuseTransmissionColour { get; set; }
		public IfcColourRgb DiffuseReflectionColour { get; set; }
		public IfcColourRgb TransmissionColour { get; set; }
		public IfcColourRgb ReflectanceColour { get; set; }
		public IfcSurfaceStyleLighting() { }

		public IfcSurfaceStyleLighting(IfcColourRgb DiffuseTransmissionColour, IfcColourRgb DiffuseReflectionColour, IfcColourRgb TransmissionColour, IfcColourRgb ReflectanceColour)
		{
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.DiffuseReflectionColour = DiffuseReflectionColour;
			this.TransmissionColour = TransmissionColour;
			this.ReflectanceColour = ReflectanceColour;
		}
	}

	public class IfcSurfaceStyleRefraction : IfcPresentationItem, IfcSurfaceStyleElementSelect
	{
		public IfcReal RefractionIndex { get; set; }
		public IfcReal DispersionFactor { get; set; }
		public IfcSurfaceStyleRefraction() { }

		public IfcSurfaceStyleRefraction(IfcReal RefractionIndex, IfcReal DispersionFactor)
		{
			this.RefractionIndex = RefractionIndex;
			this.DispersionFactor = DispersionFactor;
		}
	}

	public class IfcSurfaceStyleRendering : IfcSurfaceStyleShading, IfcSurfaceStyleElementSelect
	{
		public IfcColourOrFactor DiffuseColour { get; set; }
		public IfcColourOrFactor TransmissionColour { get; set; }
		public IfcColourOrFactor DiffuseTransmissionColour { get; set; }
		public IfcColourOrFactor ReflectionColour { get; set; }
		public IfcColourOrFactor SpecularColour { get; set; }
		public IfcSpecularHighlightSelect SpecularHighlight { get; set; }
		public IfcReflectanceMethodEnum ReflectanceMethod { get; set; }
		public IfcSurfaceStyleRendering() { }

		public IfcSurfaceStyleRendering(IfcColourRgb SurfaceColour, IfcNormalisedRatioMeasure Transparency, IfcColourOrFactor DiffuseColour, IfcColourOrFactor TransmissionColour, IfcColourOrFactor DiffuseTransmissionColour, IfcColourOrFactor ReflectionColour, IfcColourOrFactor SpecularColour, IfcSpecularHighlightSelect SpecularHighlight, IfcReflectanceMethodEnum ReflectanceMethod)
		{
			this.SurfaceColour = SurfaceColour;
			this.Transparency = Transparency;
			this.DiffuseColour = DiffuseColour;
			this.TransmissionColour = TransmissionColour;
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.ReflectionColour = ReflectionColour;
			this.SpecularColour = SpecularColour;
			this.SpecularHighlight = SpecularHighlight;
			this.ReflectanceMethod = ReflectanceMethod;
		}
	}

	public class IfcSurfaceStyleShading : IfcPresentationItem, IfcSurfaceStyleElementSelect
	{
		public IfcColourRgb SurfaceColour { get; set; }
		public IfcNormalisedRatioMeasure Transparency { get; set; }
		public IfcSurfaceStyleShading() { }

		public IfcSurfaceStyleShading(IfcColourRgb SurfaceColour, IfcNormalisedRatioMeasure Transparency)
		{
			this.SurfaceColour = SurfaceColour;
			this.Transparency = Transparency;
		}
	}

	public class IfcSurfaceStyleWithTextures : IfcPresentationItem, IfcSurfaceStyleElementSelect
	{
		public List<IfcSurfaceTexture> Textures { get; set; }
		public IfcSurfaceStyleWithTextures() { }

		public IfcSurfaceStyleWithTextures(List<IfcSurfaceTexture> Textures)
		{
			this.Textures = Textures;
		}
	}

	public abstract class IfcSurfaceTexture : IfcPresentationItem
	{
		public IfcBoolean RepeatS { get; set; }
		public IfcBoolean RepeatT { get; set; }
		public IfcIdentifier Mode { get; set; }
		public IfcCartesianTransformationOperator2D TextureTransform { get; set; }
		public List<IfcIdentifier> Parameter { get; set; }
		public List<IfcTextureCoordinate> IsMappedBy => Model.GetInstances<IfcTextureCoordinate>().Where(e => e.Maps.Contains(this)).ToList();
		// INVERSE : IsMappedBy : SET [0:?] OF IfcTextureCoordinate FOR Maps;
		public List<IfcSurfaceStyleWithTextures> UsedInStyles => Model.GetInstances<IfcSurfaceStyleWithTextures>().Where(e => e.Textures.Contains(this)).ToList();
		// INVERSE : UsedInStyles : SET [0:?] OF IfcSurfaceStyleWithTextures FOR Textures;
		public IfcSurfaceTexture() { }

		public IfcSurfaceTexture(IfcBoolean RepeatS, IfcBoolean RepeatT, IfcIdentifier Mode, IfcCartesianTransformationOperator2D TextureTransform, List<IfcIdentifier> Parameter)
		{
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.Mode = Mode;
			this.TextureTransform = TextureTransform;
			this.Parameter = Parameter;
		}
	}

	public abstract class IfcSweptAreaSolid : IfcSolidModel, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcProfileDef SweptArea { get; set; }
		public IfcAxis2Placement3D Position { get; set; }
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcSweptAreaSolid() { }

		public IfcSweptAreaSolid(IfcProfileDef SweptArea, IfcAxis2Placement3D Position)
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
		}
	}

	public class IfcSweptDiskSolid : IfcSolidModel, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcCurve Directrix { get; set; }
		public IfcPositiveLengthMeasure Radius { get; set; }
		public IfcPositiveLengthMeasure InnerRadius { get; set; }
		public IfcParameterValue StartParam { get; set; }
		public IfcParameterValue EndParam { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSweptDiskSolid() { }

		public IfcSweptDiskSolid(IfcCurve Directrix, IfcPositiveLengthMeasure Radius, IfcPositiveLengthMeasure InnerRadius, IfcParameterValue StartParam, IfcParameterValue EndParam)
		{
			this.Directrix = Directrix;
			this.Radius = Radius;
			this.InnerRadius = InnerRadius;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
		}
	}

	public class IfcSweptDiskSolidPolygonal : IfcSweptDiskSolid, IfcBooleanOperand, IfcLayeredItem, IfcSolidOrShell
	{
		public IfcPositiveLengthMeasure FilletRadius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcSweptDiskSolidPolygonal() { }

		public IfcSweptDiskSolidPolygonal(IfcCurve Directrix, IfcPositiveLengthMeasure Radius, IfcPositiveLengthMeasure InnerRadius, IfcParameterValue StartParam, IfcParameterValue EndParam, IfcPositiveLengthMeasure FilletRadius)
		{
			this.Directrix = Directrix;
			this.Radius = Radius;
			this.InnerRadius = InnerRadius;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.FilletRadius = FilletRadius;
		}
	}

	public abstract class IfcSweptSurface : IfcSurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcProfileDef SweptCurve { get; set; }
		public IfcAxis2Placement3D Position { get; set; }
		public abstract override List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract override List<IfcStyledItem> GetStyledByItem();
		public abstract override IfcDimensionCount GetDim();
		public IfcSweptSurface() { }

		public IfcSweptSurface(IfcProfileDef SweptCurve, IfcAxis2Placement3D Position)
		{
			this.SweptCurve = SweptCurve;
			this.Position = Position;
		}
	}

	public class IfcSwitchingDevice : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSwitchingDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSwitchingDevice() { }

		public IfcSwitchingDevice(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSwitchingDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSwitchingDeviceType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSwitchingDeviceTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSwitchingDeviceType() { }

		public IfcSwitchingDeviceType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSwitchingDeviceTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSystem : IfcGroup, IfcDefinitionSelect
	{
		public List<IfcRelServicesBuildings> ServicesBuildings => Model.GetInstances<IfcRelServicesBuildings>().Where(e => e.RelatingSystem == this).ToList();
		// INVERSE : ServicesBuildings : SET [0:1] OF IfcRelServicesBuildings FOR RelatingSystem;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcSystem() { }

		public IfcSystem(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
		}
	}

	public class IfcSystemFurnitureElement : IfcFurnishingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcSystemFurnitureElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcSystemFurnitureElement() { }

		public IfcSystemFurnitureElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcSystemFurnitureElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcSystemFurnitureElementType : IfcFurnishingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcSystemFurnitureElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcSystemFurnitureElementType() { }

		public IfcSystemFurnitureElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcSystemFurnitureElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTShapeProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure Depth { get; set; }
		public IfcPositiveLengthMeasure FlangeWidth { get; set; }
		public IfcPositiveLengthMeasure WebThickness { get; set; }
		public IfcPositiveLengthMeasure FlangeThickness { get; set; }
		public IfcNonNegativeLengthMeasure FilletRadius { get; set; }
		public IfcNonNegativeLengthMeasure FlangeEdgeRadius { get; set; }
		public IfcNonNegativeLengthMeasure WebEdgeRadius { get; set; }
		public IfcPlaneAngleMeasure WebSlope { get; set; }
		public IfcPlaneAngleMeasure FlangeSlope { get; set; }
		public IfcTShapeProfileDef() { }

		public IfcTShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure Depth, IfcPositiveLengthMeasure FlangeWidth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure FlangeThickness, IfcNonNegativeLengthMeasure FilletRadius, IfcNonNegativeLengthMeasure FlangeEdgeRadius, IfcNonNegativeLengthMeasure WebEdgeRadius, IfcPlaneAngleMeasure WebSlope, IfcPlaneAngleMeasure FlangeSlope)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.WebEdgeRadius = WebEdgeRadius;
			this.WebSlope = WebSlope;
			this.FlangeSlope = FlangeSlope;
		}
	}

	public class IfcTable : IfcBase, IfcMetricValueSelect, IfcObjectReferenceSelect
	{
		public IfcLabel Name { get; set; }
		public List<IfcTableRow> Rows { get; set; }
		public List<IfcTableColumn> Columns { get; set; }
		public IfcInteger NumberOfCellsInRow => (IfcInteger)Rows[0].RowCells.Count;
		// DERIVE : NumberOfCellsInRow : IfcInteger := HIINDEX(Rows[1].RowCells);
		public IfcInteger NumberOfHeadings => (IfcInteger)Rows.Where(Temp => Temp.IsHeading).Count();
		// DERIVE : NumberOfHeadings : IfcInteger := SIZEOF(QUERY( Temp <* Rows | Temp.IsHeading));
		public IfcInteger NumberOfDataRows => (IfcInteger)Rows.Where(Temp => !Temp.IsHeading).Count();
		// DERIVE : NumberOfDataRows : IfcInteger := SIZEOF(QUERY( Temp <* Rows | NOT(Temp.IsHeading)));
		public IfcTable() { }

		public IfcTable(IfcLabel Name, List<IfcTableRow> Rows, List<IfcTableColumn> Columns)
		{
			this.Name = Name;
			this.Rows = Rows;
			this.Columns = Columns;
		}
	}

	public class IfcTableColumn : IfcBase
	{
		public IfcIdentifier Identifier { get; set; }
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcUnit Unit { get; set; }
		public IfcReference ReferencePath { get; set; }
		public IfcTableColumn() { }

		public IfcTableColumn(IfcIdentifier Identifier, IfcLabel Name, IfcText Description, IfcUnit Unit, IfcReference ReferencePath)
		{
			this.Identifier = Identifier;
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.ReferencePath = ReferencePath;
		}
	}

	public class IfcTableRow : IfcBase
	{
		public List<IfcValue> RowCells { get; set; }
		public IfcBoolean IsHeading { get; set; }
		public IfcTableRow() { }

		public IfcTableRow(List<IfcValue> RowCells, IfcBoolean IsHeading)
		{
			this.RowCells = RowCells;
			this.IsHeading = IsHeading;
		}
	}

	public class IfcTank : IfcFlowStorageDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcTankTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcTank() { }

		public IfcTank(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcTankTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTankType : IfcFlowStorageDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcTankTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcTankType() { }

		public IfcTankType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcTankTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTask : IfcProcess, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcLabel Status { get; set; }
		public IfcLabel WorkMethod { get; set; }
		public IfcBoolean IsMilestone { get; set; }
		public IfcInteger Priority { get; set; }
		public IfcTaskTime TaskTime { get; set; }
		public IfcTaskTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcTask() { }

		public IfcTask(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcText LongDescription, IfcLabel Status, IfcLabel WorkMethod, IfcBoolean IsMilestone, IfcInteger Priority, IfcTaskTime TaskTime, IfcTaskTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.Status = Status;
			this.WorkMethod = WorkMethod;
			this.IsMilestone = IsMilestone;
			this.Priority = Priority;
			this.TaskTime = TaskTime;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTaskTime : IfcSchedulingTime
	{
		public IfcTaskDurationEnum DurationType { get; set; }
		public IfcDuration ScheduleDuration { get; set; }
		public IfcDateTime ScheduleStart { get; set; }
		public IfcDateTime ScheduleFinish { get; set; }
		public IfcDateTime EarlyStart { get; set; }
		public IfcDateTime EarlyFinish { get; set; }
		public IfcDateTime LateStart { get; set; }
		public IfcDateTime LateFinish { get; set; }
		public IfcDuration FreeFloat { get; set; }
		public IfcDuration TotalFloat { get; set; }
		public IfcBoolean IsCritical { get; set; }
		public IfcDateTime StatusTime { get; set; }
		public IfcDuration ActualDuration { get; set; }
		public IfcDateTime ActualStart { get; set; }
		public IfcDateTime ActualFinish { get; set; }
		public IfcDuration RemainingTime { get; set; }
		public IfcPositiveRatioMeasure Completion { get; set; }
		public IfcTaskTime() { }

		public IfcTaskTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTaskDurationEnum DurationType, IfcDuration ScheduleDuration, IfcDateTime ScheduleStart, IfcDateTime ScheduleFinish, IfcDateTime EarlyStart, IfcDateTime EarlyFinish, IfcDateTime LateStart, IfcDateTime LateFinish, IfcDuration FreeFloat, IfcDuration TotalFloat, IfcBoolean IsCritical, IfcDateTime StatusTime, IfcDuration ActualDuration, IfcDateTime ActualStart, IfcDateTime ActualFinish, IfcDuration RemainingTime, IfcPositiveRatioMeasure Completion)
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.DurationType = DurationType;
			this.ScheduleDuration = ScheduleDuration;
			this.ScheduleStart = ScheduleStart;
			this.ScheduleFinish = ScheduleFinish;
			this.EarlyStart = EarlyStart;
			this.EarlyFinish = EarlyFinish;
			this.LateStart = LateStart;
			this.LateFinish = LateFinish;
			this.FreeFloat = FreeFloat;
			this.TotalFloat = TotalFloat;
			this.IsCritical = IsCritical;
			this.StatusTime = StatusTime;
			this.ActualDuration = ActualDuration;
			this.ActualStart = ActualStart;
			this.ActualFinish = ActualFinish;
			this.RemainingTime = RemainingTime;
			this.Completion = Completion;
		}
	}

	public class IfcTaskTimeRecurring : IfcTaskTime
	{
		public IfcRecurrencePattern Recurrence { get; set; }
		public IfcTaskTimeRecurring() { }

		public IfcTaskTimeRecurring(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTaskDurationEnum DurationType, IfcDuration ScheduleDuration, IfcDateTime ScheduleStart, IfcDateTime ScheduleFinish, IfcDateTime EarlyStart, IfcDateTime EarlyFinish, IfcDateTime LateStart, IfcDateTime LateFinish, IfcDuration FreeFloat, IfcDuration TotalFloat, IfcBoolean IsCritical, IfcDateTime StatusTime, IfcDuration ActualDuration, IfcDateTime ActualStart, IfcDateTime ActualFinish, IfcDuration RemainingTime, IfcPositiveRatioMeasure Completion, IfcRecurrencePattern Recurrence)
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.DurationType = DurationType;
			this.ScheduleDuration = ScheduleDuration;
			this.ScheduleStart = ScheduleStart;
			this.ScheduleFinish = ScheduleFinish;
			this.EarlyStart = EarlyStart;
			this.EarlyFinish = EarlyFinish;
			this.LateStart = LateStart;
			this.LateFinish = LateFinish;
			this.FreeFloat = FreeFloat;
			this.TotalFloat = TotalFloat;
			this.IsCritical = IsCritical;
			this.StatusTime = StatusTime;
			this.ActualDuration = ActualDuration;
			this.ActualStart = ActualStart;
			this.ActualFinish = ActualFinish;
			this.RemainingTime = RemainingTime;
			this.Completion = Completion;
			this.Recurrence = Recurrence;
		}
	}

	public class IfcTaskType : IfcTypeProcess, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcTaskTypeEnum PredefinedType { get; set; }
		public IfcLabel WorkMethod { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override IfcIdentifier GetIdentification() { return Identification; }
		public override IfcText GetLongDescription() { return LongDescription; }
		public override List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcTaskType() { }

		public IfcTaskType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ProcessType, IfcTaskTypeEnum PredefinedType, IfcLabel WorkMethod)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ProcessType = ProcessType;
			this.PredefinedType = PredefinedType;
			this.WorkMethod = WorkMethod;
		}
	}

	public class IfcTelecomAddress : IfcAddress, IfcObjectReferenceSelect
	{
		public List<IfcLabel> TelephoneNumbers { get; set; }
		public List<IfcLabel> FacsimileNumbers { get; set; }
		public IfcLabel PagerNumber { get; set; }
		public List<IfcLabel> ElectronicMailAddresses { get; set; }
		public IfcURIReference WWWHomePageURL { get; set; }
		public List<IfcURIReference> MessagingIDs { get; set; }
		public IfcTelecomAddress() { }

		public IfcTelecomAddress(IfcAddressTypeEnum Purpose, IfcText Description, IfcLabel UserDefinedPurpose, List<IfcLabel> TelephoneNumbers, List<IfcLabel> FacsimileNumbers, IfcLabel PagerNumber, List<IfcLabel> ElectronicMailAddresses, IfcURIReference WWWHomePageURL, List<IfcURIReference> MessagingIDs)
		{
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
			this.TelephoneNumbers = TelephoneNumbers;
			this.FacsimileNumbers = FacsimileNumbers;
			this.PagerNumber = PagerNumber;
			this.ElectronicMailAddresses = ElectronicMailAddresses;
			this.WWWHomePageURL = WWWHomePageURL;
			this.MessagingIDs = MessagingIDs;
		}
	}

	public class IfcTendon : IfcReinforcingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcTendonTypeEnum PredefinedType { get; set; }
		public IfcPositiveLengthMeasure NominalDiameter { get; set; }
		public IfcAreaMeasure CrossSectionArea { get; set; }
		public IfcForceMeasure TensionForce { get; set; }
		public IfcPressureMeasure PreStress { get; set; }
		public IfcNormalisedRatioMeasure FrictionCoefficient { get; set; }
		public IfcPositiveLengthMeasure AnchorageSlip { get; set; }
		public IfcPositiveLengthMeasure MinCurvatureRadius { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcTendon() { }

		public IfcTendon(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLabel SteelGrade, IfcTendonTypeEnum PredefinedType, IfcPositiveLengthMeasure NominalDiameter, IfcAreaMeasure CrossSectionArea, IfcForceMeasure TensionForce, IfcPressureMeasure PreStress, IfcNormalisedRatioMeasure FrictionCoefficient, IfcPositiveLengthMeasure AnchorageSlip, IfcPositiveLengthMeasure MinCurvatureRadius)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.SteelGrade = SteelGrade;
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.TensionForce = TensionForce;
			this.PreStress = PreStress;
			this.FrictionCoefficient = FrictionCoefficient;
			this.AnchorageSlip = AnchorageSlip;
			this.MinCurvatureRadius = MinCurvatureRadius;
		}
	}

	public class IfcTendonAnchor : IfcReinforcingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcTendonAnchorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcTendonAnchor() { }

		public IfcTendonAnchor(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcLabel SteelGrade, IfcTendonAnchorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.SteelGrade = SteelGrade;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTendonAnchorType : IfcReinforcingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcTendonAnchorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcTendonAnchorType() { }

		public IfcTendonAnchorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcTendonAnchorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTendonType : IfcReinforcingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcTendonTypeEnum PredefinedType { get; set; }
		public IfcPositiveLengthMeasure NominalDiameter { get; set; }
		public IfcAreaMeasure CrossSectionArea { get; set; }
		public IfcPositiveLengthMeasure SheathDiameter { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcTendonType() { }

		public IfcTendonType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcTendonTypeEnum PredefinedType, IfcPositiveLengthMeasure NominalDiameter, IfcAreaMeasure CrossSectionArea, IfcPositiveLengthMeasure SheathDiameter)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.SheathDiameter = SheathDiameter;
		}
	}

	public abstract class IfcTessellatedFaceSet : IfcTessellatedItem, IfcBooleanOperand, IfcLayeredItem
	{
		public IfcCartesianPointList3D Coordinates { get; set; }
		public IfcDimensionCount Dim => (IfcDimensionCount)3;
		// DERIVE : Dim : IfcDimensionCount := 3;
		public List<IfcIndexedColourMap> HasColours => Model.GetInstances<IfcIndexedColourMap>().Where(e => e.MappedTo == this).ToList();
		// INVERSE : HasColours : SET [0:1] OF IfcIndexedColourMap FOR MappedTo;
		public List<IfcIndexedTextureMap> HasTextures => Model.GetInstances<IfcIndexedTextureMap>().Where(e => e.MappedTo == this).ToList();
		// INVERSE : HasTextures : SET [0:?] OF IfcIndexedTextureMap FOR MappedTo;
		public abstract List<IfcPresentationLayerAssignment> GetLayerAssignment();
		public abstract List<IfcStyledItem> GetStyledByItem();
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcTessellatedFaceSet() { }

		public IfcTessellatedFaceSet(IfcCartesianPointList3D Coordinates)
		{
			this.Coordinates = Coordinates;
		}
	}

	public abstract class IfcTessellatedItem : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcTessellatedItem() { }
	}

	public class IfcTextLiteral : IfcGeometricRepresentationItem, IfcLayeredItem
	{
		public IfcPresentableText Literal { get; set; }
		public IfcAxis2Placement Placement { get; set; }
		public IfcTextPath Path { get; set; }
		public IfcTextLiteral() { }

		public IfcTextLiteral(IfcPresentableText Literal, IfcAxis2Placement Placement, IfcTextPath Path)
		{
			this.Literal = Literal;
			this.Placement = Placement;
			this.Path = Path;
		}
	}

	public class IfcTextLiteralWithExtent : IfcTextLiteral, IfcLayeredItem
	{
		public IfcPlanarExtent Extent { get; set; }
		public IfcBoxAlignment BoxAlignment { get; set; }
		public IfcTextLiteralWithExtent() { }

		public IfcTextLiteralWithExtent(IfcPresentableText Literal, IfcAxis2Placement Placement, IfcTextPath Path, IfcPlanarExtent Extent, IfcBoxAlignment BoxAlignment)
		{
			this.Literal = Literal;
			this.Placement = Placement;
			this.Path = Path;
			this.Extent = Extent;
			this.BoxAlignment = BoxAlignment;
		}
	}

	public class IfcTextStyle : IfcPresentationStyle, IfcPresentationStyleSelect, IfcStyleAssignmentSelect
	{
		public IfcTextStyleForDefinedFont TextCharacterAppearance { get; set; }
		public IfcTextStyleTextModel TextStyle { get; set; }
		public IfcTextFontSelect TextFontStyle { get; set; }
		public IfcBoolean ModelOrDraughting { get; set; }
		public IfcTextStyle() { }

		public IfcTextStyle(IfcLabel Name, IfcTextStyleForDefinedFont TextCharacterAppearance, IfcTextStyleTextModel TextStyle, IfcTextFontSelect TextFontStyle, IfcBoolean ModelOrDraughting)
		{
			this.Name = Name;
			this.TextCharacterAppearance = TextCharacterAppearance;
			this.TextStyle = TextStyle;
			this.TextFontStyle = TextFontStyle;
			this.ModelOrDraughting = ModelOrDraughting;
		}
	}

	public class IfcTextStyleFontModel : IfcPreDefinedTextFont, IfcTextFontSelect
	{
		public List<IfcTextFontName> FontFamily { get; set; }
		public IfcFontStyle FontStyle { get; set; }
		public IfcFontVariant FontVariant { get; set; }
		public IfcFontWeight FontWeight { get; set; }
		public IfcSizeSelect FontSize { get; set; }
		public override IfcLabel GetName() { return Name; }
		public IfcTextStyleFontModel() { }

		public IfcTextStyleFontModel(IfcLabel Name, List<IfcTextFontName> FontFamily, IfcFontStyle FontStyle, IfcFontVariant FontVariant, IfcFontWeight FontWeight, IfcSizeSelect FontSize)
		{
			this.Name = Name;
			this.FontFamily = FontFamily;
			this.FontStyle = FontStyle;
			this.FontVariant = FontVariant;
			this.FontWeight = FontWeight;
			this.FontSize = FontSize;
		}
	}

	public class IfcTextStyleForDefinedFont : IfcPresentationItem
	{
		public IfcColour Colour { get; set; }
		public IfcColour BackgroundColour { get; set; }
		public IfcTextStyleForDefinedFont() { }

		public IfcTextStyleForDefinedFont(IfcColour Colour, IfcColour BackgroundColour)
		{
			this.Colour = Colour;
			this.BackgroundColour = BackgroundColour;
		}
	}

	public class IfcTextStyleTextModel : IfcPresentationItem
	{
		public IfcSizeSelect TextIndent { get; set; }
		public IfcTextAlignment TextAlign { get; set; }
		public IfcTextDecoration TextDecoration { get; set; }
		public IfcSizeSelect LetterSpacing { get; set; }
		public IfcSizeSelect WordSpacing { get; set; }
		public IfcTextTransformation TextTransform { get; set; }
		public IfcSizeSelect LineHeight { get; set; }
		public IfcTextStyleTextModel() { }

		public IfcTextStyleTextModel(IfcSizeSelect TextIndent, IfcTextAlignment TextAlign, IfcTextDecoration TextDecoration, IfcSizeSelect LetterSpacing, IfcSizeSelect WordSpacing, IfcTextTransformation TextTransform, IfcSizeSelect LineHeight)
		{
			this.TextIndent = TextIndent;
			this.TextAlign = TextAlign;
			this.TextDecoration = TextDecoration;
			this.LetterSpacing = LetterSpacing;
			this.WordSpacing = WordSpacing;
			this.TextTransform = TextTransform;
			this.LineHeight = LineHeight;
		}
	}

	public abstract class IfcTextureCoordinate : IfcPresentationItem
	{
		public List<IfcSurfaceTexture> Maps { get; set; }
		public IfcTextureCoordinate() { }

		public IfcTextureCoordinate(List<IfcSurfaceTexture> Maps)
		{
			this.Maps = Maps;
		}
	}

	public class IfcTextureCoordinateGenerator : IfcTextureCoordinate
	{
		public IfcLabel Mode { get; set; }
		public List<IfcReal> Parameter { get; set; }
		public IfcTextureCoordinateGenerator() { }

		public IfcTextureCoordinateGenerator(List<IfcSurfaceTexture> Maps, IfcLabel Mode, List<IfcReal> Parameter)
		{
			this.Maps = Maps;
			this.Mode = Mode;
			this.Parameter = Parameter;
		}
	}

	public class IfcTextureMap : IfcTextureCoordinate
	{
		public List<IfcTextureVertex> Vertices { get; set; }
		public IfcFace MappedTo { get; set; }
		public IfcTextureMap() { }

		public IfcTextureMap(List<IfcSurfaceTexture> Maps, List<IfcTextureVertex> Vertices, IfcFace MappedTo)
		{
			this.Maps = Maps;
			this.Vertices = Vertices;
			this.MappedTo = MappedTo;
		}
	}

	public class IfcTextureVertex : IfcPresentationItem
	{
		public List<IfcParameterValue> Coordinates { get; set; }
		public IfcTextureVertex() { }

		public IfcTextureVertex(List<IfcParameterValue> Coordinates)
		{
			this.Coordinates = Coordinates;
		}
	}

	public class IfcTextureVertexList : IfcPresentationItem
	{
		public List<List<IfcParameterValue>> TexCoordsList { get; set; }
		public IfcTextureVertexList() { }

		public IfcTextureVertexList(List<List<IfcParameterValue>> TexCoordsList)
		{
			this.TexCoordsList = TexCoordsList;
		}
	}

	public class IfcTimePeriod : IfcBase
	{
		public IfcTime StartTime { get; set; }
		public IfcTime EndTime { get; set; }
		public IfcTimePeriod() { }

		public IfcTimePeriod(IfcTime StartTime, IfcTime EndTime)
		{
			this.StartTime = StartTime;
			this.EndTime = EndTime;
		}
	}

	public abstract class IfcTimeSeries : IfcBase, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		public IfcLabel Name { get; set; }
		public IfcText Description { get; set; }
		public IfcDateTime StartTime { get; set; }
		public IfcDateTime EndTime { get; set; }
		public IfcTimeSeriesDataTypeEnum TimeSeriesDataType { get; set; }
		public IfcDataOriginEnum DataOrigin { get; set; }
		public IfcLabel UserDefinedDataOrigin { get; set; }
		public IfcUnit Unit { get; set; }
		public List<IfcExternalReferenceRelationship> HasExternalReference => Model.GetInstances<IfcExternalReferenceRelationship>().Where(e => e.RelatedResourceObjects.Contains(this)).ToList();
		// INVERSE : HasExternalReference : SET [1:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
		public IfcTimeSeries() { }

		public IfcTimeSeries(IfcLabel Name, IfcText Description, IfcDateTime StartTime, IfcDateTime EndTime, IfcTimeSeriesDataTypeEnum TimeSeriesDataType, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcUnit Unit)
		{
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
		}
	}

	public class IfcTimeSeriesValue : IfcBase
	{
		public List<IfcValue> ListValues { get; set; }
		public IfcTimeSeriesValue() { }

		public IfcTimeSeriesValue(List<IfcValue> ListValues)
		{
			this.ListValues = ListValues;
		}
	}

	public abstract class IfcTopologicalRepresentationItem : IfcRepresentationItem, IfcLayeredItem
	{
		public IfcTopologicalRepresentationItem() { }
	}

	public class IfcTopologyRepresentation : IfcShapeModel, IfcLayeredItem
	{
		public IfcTopologyRepresentation() { }

		public IfcTopologyRepresentation(IfcRepresentationContext ContextOfItems, IfcLabel RepresentationIdentifier, IfcLabel RepresentationType, List<IfcRepresentationItem> Items)
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
	}

	public class IfcToroidalSurface : IfcElementarySurface, IfcGeometricSetSelect, IfcLayeredItem, IfcSurfaceOrFaceSurface
	{
		public IfcPositiveLengthMeasure MajorRadius { get; set; }
		public IfcPositiveLengthMeasure MinorRadius { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcToroidalSurface() { }

		public IfcToroidalSurface(IfcAxis2Placement3D Position, IfcPositiveLengthMeasure MajorRadius, IfcPositiveLengthMeasure MinorRadius)
		{
			this.Position = Position;
			this.MajorRadius = MajorRadius;
			this.MinorRadius = MinorRadius;
		}
	}

	public class IfcTransformer : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcTransformerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcTransformer() { }

		public IfcTransformer(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcTransformerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTransformerType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcTransformerTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcTransformerType() { }

		public IfcTransformerType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcTransformerTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTransportElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcTransportElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcTransportElement() { }

		public IfcTransportElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcTransportElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTransportElementType : IfcElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcTransportElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcTransportElementType() { }

		public IfcTransportElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcTransportElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTrapeziumProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure BottomXDim { get; set; }
		public IfcPositiveLengthMeasure TopXDim { get; set; }
		public IfcPositiveLengthMeasure YDim { get; set; }
		public IfcLengthMeasure TopXOffset { get; set; }
		public IfcTrapeziumProfileDef() { }

		public IfcTrapeziumProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure BottomXDim, IfcPositiveLengthMeasure TopXDim, IfcPositiveLengthMeasure YDim, IfcLengthMeasure TopXOffset)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.BottomXDim = BottomXDim;
			this.TopXDim = TopXDim;
			this.YDim = YDim;
			this.TopXOffset = TopXOffset;
		}
	}

	public class IfcTriangulatedFaceSet : IfcTessellatedFaceSet, IfcBooleanOperand, IfcLayeredItem
	{
		public List<List<IfcParameterValue>> Normals { get; set; }
		public IfcBoolean Closed { get; set; }
		public List<List<IfcPositiveInteger>> CoordIndex { get; set; }
		public List<IfcPositiveInteger> PnIndex { get; set; }
		public IfcInteger NumberOfTriangles => (IfcInteger)CoordIndex.Count();
		// DERIVE : NumberOfTriangles : IfcInteger := SIZEOF(CoordIndex);
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcTriangulatedFaceSet() { }

		public IfcTriangulatedFaceSet(IfcCartesianPointList3D Coordinates, List<List<IfcParameterValue>> Normals, IfcBoolean Closed, List<List<IfcPositiveInteger>> CoordIndex, List<IfcPositiveInteger> PnIndex)
		{
			this.Coordinates = Coordinates;
			this.Normals = Normals;
			this.Closed = Closed;
			this.CoordIndex = CoordIndex;
			this.PnIndex = PnIndex;
		}
	}

	public class IfcTrimmedCurve : IfcBoundedCurve, IfcCurveOrEdgeCurve, IfcGeometricSetSelect, IfcLayeredItem
	{
		public IfcCurve BasisCurve { get; set; }
		public List<IfcTrimmingSelect> Trim1 { get; set; }
		public List<IfcTrimmingSelect> Trim2 { get; set; }
		public IfcBoolean SenseAgreement { get; set; }
		public IfcTrimmingPreference MasterRepresentation { get; set; }
		public override List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public override List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public override IfcDimensionCount GetDim() { return Dim; }
		public IfcTrimmedCurve() { }

		public IfcTrimmedCurve(IfcCurve BasisCurve, List<IfcTrimmingSelect> Trim1, List<IfcTrimmingSelect> Trim2, IfcBoolean SenseAgreement, IfcTrimmingPreference MasterRepresentation)
		{
			this.BasisCurve = BasisCurve;
			this.Trim1 = Trim1;
			this.Trim2 = Trim2;
			this.SenseAgreement = SenseAgreement;
			this.MasterRepresentation = MasterRepresentation;
		}
	}

	public class IfcTubeBundle : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcTubeBundleTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcTubeBundle() { }

		public IfcTubeBundle(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcTubeBundleTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTubeBundleType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcTubeBundleTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcTubeBundleType() { }

		public IfcTubeBundleType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcTubeBundleTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcTypeObject : IfcObjectDefinition, IfcDefinitionSelect
	{
		public IfcIdentifier ApplicableOccurrence { get; set; }
		public List<IfcPropertySetDefinition> HasPropertySets { get; set; }
		public List<IfcRelDefinesByType> Types => Model.GetInstances<IfcRelDefinesByType>().Where(e => e.RelatingType == this).ToList();
		// INVERSE : Types : SET [0:1] OF IfcRelDefinesByType FOR RelatingType;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcTypeObject() { }

		public IfcTypeObject(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
		}
	}

	public abstract class IfcTypeProcess : IfcTypeObject, IfcDefinitionSelect, IfcProcessSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcText LongDescription { get; set; }
		public IfcLabel ProcessType { get; set; }
		public List<IfcRelAssignsToProcess> OperatesOn => Model.GetInstances<IfcRelAssignsToProcess>().Where(e => e.RelatingProcess == this).ToList();
		// INVERSE : OperatesOn : SET [0:?] OF IfcRelAssignsToProcess FOR RelatingProcess;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract List<IfcRelAssigns> GetHasAssignments();
		public abstract List<IfcRelNests> GetNests();
		public abstract List<IfcRelNests> GetIsNestedBy();
		public abstract List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract List<IfcRelAggregates> GetDecomposes();
		public virtual IfcIdentifier GetIdentification() { return Identification; }
		public virtual IfcText GetLongDescription() { return LongDescription; }
		public virtual List<IfcRelAssignsToProcess> GetOperatesOn() { return OperatesOn; }
		public IfcTypeProcess() { }

		public IfcTypeProcess(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ProcessType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ProcessType = ProcessType;
		}
	}

	public class IfcTypeProduct : IfcTypeObject, IfcDefinitionSelect, IfcProductSelect
	{
		public List<IfcRepresentationMap> RepresentationMaps { get; set; }
		public IfcLabel Tag { get; set; }
		public List<IfcRelAssignsToProduct> ReferencedBy => Model.GetInstances<IfcRelAssignsToProduct>().Where(e => e.RelatingProduct == this).ToList();
		// INVERSE : ReferencedBy : SET [0:?] OF IfcRelAssignsToProduct FOR RelatingProduct;
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public virtual List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public virtual List<IfcRelNests> GetNests() { return Nests; }
		public virtual List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public virtual List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public virtual List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public virtual List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcTypeProduct() { }

		public IfcTypeProduct(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
		}
	}

	public abstract class IfcTypeResource : IfcTypeObject, IfcDefinitionSelect, IfcResourceSelect
	{
		public IfcIdentifier Identification { get; set; }
		public IfcText LongDescription { get; set; }
		public IfcLabel ResourceType { get; set; }
		public List<IfcRelAssignsToResource> ResourceOf => Model.GetInstances<IfcRelAssignsToResource>().Where(e => e.RelatingResource == this).ToList();
		// INVERSE : ResourceOf : SET [0:?] OF IfcRelAssignsToResource FOR RelatingResource;
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public abstract List<IfcRelAssigns> GetHasAssignments();
		public abstract List<IfcRelNests> GetNests();
		public abstract List<IfcRelNests> GetIsNestedBy();
		public abstract List<IfcRelAggregates> GetIsDecomposedBy();
		public abstract List<IfcRelAggregates> GetDecomposes();
		public virtual IfcIdentifier GetIdentification() { return Identification; }
		public virtual IfcText GetLongDescription() { return LongDescription; }
		public virtual List<IfcRelAssignsToResource> GetResourceOf() { return ResourceOf; }
		public abstract List<IfcAppliedValue> GetBaseCosts();
		public abstract IfcPhysicalQuantity GetBaseQuantity();
		public IfcTypeResource() { }

		public IfcTypeResource(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, IfcIdentifier Identification, IfcText LongDescription, IfcLabel ResourceType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
		}
	}

	public class IfcUShapeProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure Depth { get; set; }
		public IfcPositiveLengthMeasure FlangeWidth { get; set; }
		public IfcPositiveLengthMeasure WebThickness { get; set; }
		public IfcPositiveLengthMeasure FlangeThickness { get; set; }
		public IfcNonNegativeLengthMeasure FilletRadius { get; set; }
		public IfcNonNegativeLengthMeasure EdgeRadius { get; set; }
		public IfcPlaneAngleMeasure FlangeSlope { get; set; }
		public IfcUShapeProfileDef() { }

		public IfcUShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure Depth, IfcPositiveLengthMeasure FlangeWidth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure FlangeThickness, IfcNonNegativeLengthMeasure FilletRadius, IfcNonNegativeLengthMeasure EdgeRadius, IfcPlaneAngleMeasure FlangeSlope)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.FlangeSlope = FlangeSlope;
		}
	}

	public class IfcUnitAssignment : IfcBase
	{
		public List<IfcUnit> Units { get; set; }
		public IfcUnitAssignment() { }

		public IfcUnitAssignment(List<IfcUnit> Units)
		{
			this.Units = Units;
		}
	}

	public class IfcUnitaryControlElement : IfcDistributionControlElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcUnitaryControlElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcUnitaryControlElement() { }

		public IfcUnitaryControlElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcUnitaryControlElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcUnitaryControlElementType : IfcDistributionControlElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcUnitaryControlElementTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcUnitaryControlElementType() { }

		public IfcUnitaryControlElementType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcUnitaryControlElementTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcUnitaryEquipment : IfcEnergyConversionDevice, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcUnitaryEquipmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcUnitaryEquipment() { }

		public IfcUnitaryEquipment(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcUnitaryEquipmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcUnitaryEquipmentType : IfcEnergyConversionDeviceType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcUnitaryEquipmentTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcUnitaryEquipmentType() { }

		public IfcUnitaryEquipmentType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcUnitaryEquipmentTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcValve : IfcFlowController, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcValveTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcValve() { }

		public IfcValve(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcValveTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcValveType : IfcFlowControllerType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcValveTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcValveType() { }

		public IfcValveType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcValveTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcVector : IfcGeometricRepresentationItem, IfcHatchLineDistanceSelect, IfcLayeredItem, IfcVectorOrDirection
	{
		public IfcDirection Orientation { get; set; }
		public IfcLengthMeasure Magnitude { get; set; }
		public IfcDimensionCount Dim => Orientation.Dim;
		// DERIVE : Dim : IfcDimensionCount := Orientation.Dim;
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public virtual IfcDimensionCount GetDim() { return Dim; }
		public IfcVector() { }

		public IfcVector(IfcDirection Orientation, IfcLengthMeasure Magnitude)
		{
			this.Orientation = Orientation;
			this.Magnitude = Magnitude;
		}
	}

	public class IfcVertex : IfcTopologicalRepresentationItem, IfcLayeredItem
	{
		public IfcVertex() { }
	}

	public class IfcVertexLoop : IfcLoop, IfcLayeredItem
	{
		public IfcVertex LoopVertex { get; set; }
		public IfcVertexLoop() { }

		public IfcVertexLoop(IfcVertex LoopVertex)
		{
			this.LoopVertex = LoopVertex;
		}
	}

	public class IfcVertexPoint : IfcVertex, IfcLayeredItem, IfcPointOrVertexPoint
	{
		public IfcPoint VertexGeometry { get; set; }
		public virtual List<IfcPresentationLayerAssignment> GetLayerAssignment() { return LayerAssignment; }
		public virtual List<IfcStyledItem> GetStyledByItem() { return StyledByItem; }
		public IfcVertexPoint() { }

		public IfcVertexPoint(IfcPoint VertexGeometry)
		{
			this.VertexGeometry = VertexGeometry;
		}
	}

	public class IfcVibrationIsolator : IfcElementComponent, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcVibrationIsolatorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcVibrationIsolator() { }

		public IfcVibrationIsolator(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcVibrationIsolatorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcVibrationIsolatorType : IfcElementComponentType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcVibrationIsolatorTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcVibrationIsolatorType() { }

		public IfcVibrationIsolatorType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcVibrationIsolatorTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcVirtualElement : IfcElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcVirtualElement() { }

		public IfcVirtualElement(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
		}
	}

	public class IfcVirtualGridIntersection : IfcBase, IfcGridPlacementDirectionSelect
	{
		public List<IfcGridAxis> IntersectingAxes { get; set; }
		public List<IfcLengthMeasure> OffsetDistances { get; set; }
		public IfcVirtualGridIntersection() { }

		public IfcVirtualGridIntersection(List<IfcGridAxis> IntersectingAxes, List<IfcLengthMeasure> OffsetDistances)
		{
			this.IntersectingAxes = IntersectingAxes;
			this.OffsetDistances = OffsetDistances;
		}
	}

	public class IfcVoidingFeature : IfcFeatureElementSubtraction, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcVoidingFeatureTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcVoidingFeature() { }

		public IfcVoidingFeature(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcVoidingFeatureTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWall : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcWallTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcWall() { }

		public IfcWall(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcWallTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWallElementedCase : IfcWall, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcWallElementedCase() { }

		public IfcWallElementedCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcWallTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWallStandardCase : IfcWall, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcWallStandardCase() { }

		public IfcWallStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcWallTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWallType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcWallTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcWallType() { }

		public IfcWallType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcWallTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWasteTerminal : IfcFlowTerminal, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcWasteTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcWasteTerminal() { }

		public IfcWasteTerminal(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcWasteTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWasteTerminalType : IfcFlowTerminalType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcWasteTerminalTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcWasteTerminalType() { }

		public IfcWasteTerminalType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcWasteTerminalTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWindow : IfcBuildingElement, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public IfcPositiveLengthMeasure OverallHeight { get; set; }
		public IfcPositiveLengthMeasure OverallWidth { get; set; }
		public IfcWindowTypeEnum PredefinedType { get; set; }
		public IfcWindowTypePartitioningEnum PartitioningType { get; set; }
		public IfcLabel UserDefinedPartitioningType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcWindow() { }

		public IfcWindow(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPositiveLengthMeasure OverallHeight, IfcPositiveLengthMeasure OverallWidth, IfcWindowTypeEnum PredefinedType, IfcWindowTypePartitioningEnum PartitioningType, IfcLabel UserDefinedPartitioningType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.PartitioningType = PartitioningType;
			this.UserDefinedPartitioningType = UserDefinedPartitioningType;
		}
	}

	public class IfcWindowLiningProperties : IfcPreDefinedPropertySet, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public IfcPositiveLengthMeasure LiningDepth { get; set; }
		public IfcNonNegativeLengthMeasure LiningThickness { get; set; }
		public IfcNonNegativeLengthMeasure TransomThickness { get; set; }
		public IfcNonNegativeLengthMeasure MullionThickness { get; set; }
		public IfcNormalisedRatioMeasure FirstTransomOffset { get; set; }
		public IfcNormalisedRatioMeasure SecondTransomOffset { get; set; }
		public IfcNormalisedRatioMeasure FirstMullionOffset { get; set; }
		public IfcNormalisedRatioMeasure SecondMullionOffset { get; set; }
		public IfcShapeAspect ShapeAspectStyle { get; set; }
		public IfcLengthMeasure LiningOffset { get; set; }
		public IfcLengthMeasure LiningToPanelOffsetX { get; set; }
		public IfcLengthMeasure LiningToPanelOffsetY { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcWindowLiningProperties() { }

		public IfcWindowLiningProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcPositiveLengthMeasure LiningDepth, IfcNonNegativeLengthMeasure LiningThickness, IfcNonNegativeLengthMeasure TransomThickness, IfcNonNegativeLengthMeasure MullionThickness, IfcNormalisedRatioMeasure FirstTransomOffset, IfcNormalisedRatioMeasure SecondTransomOffset, IfcNormalisedRatioMeasure FirstMullionOffset, IfcNormalisedRatioMeasure SecondMullionOffset, IfcShapeAspect ShapeAspectStyle, IfcLengthMeasure LiningOffset, IfcLengthMeasure LiningToPanelOffsetX, IfcLengthMeasure LiningToPanelOffsetY)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.TransomThickness = TransomThickness;
			this.MullionThickness = MullionThickness;
			this.FirstTransomOffset = FirstTransomOffset;
			this.SecondTransomOffset = SecondTransomOffset;
			this.FirstMullionOffset = FirstMullionOffset;
			this.SecondMullionOffset = SecondMullionOffset;
			this.ShapeAspectStyle = ShapeAspectStyle;
			this.LiningOffset = LiningOffset;
			this.LiningToPanelOffsetX = LiningToPanelOffsetX;
			this.LiningToPanelOffsetY = LiningToPanelOffsetY;
		}
	}

	public class IfcWindowPanelProperties : IfcPreDefinedPropertySet, IfcDefinitionSelect, IfcPropertySetDefinitionSelect
	{
		public IfcWindowPanelOperationEnum OperationType { get; set; }
		public IfcWindowPanelPositionEnum PanelPosition { get; set; }
		public IfcPositiveLengthMeasure FrameDepth { get; set; }
		public IfcPositiveLengthMeasure FrameThickness { get; set; }
		public IfcShapeAspect ShapeAspectStyle { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcWindowPanelProperties() { }

		public IfcWindowPanelProperties(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcWindowPanelOperationEnum OperationType, IfcWindowPanelPositionEnum PanelPosition, IfcPositiveLengthMeasure FrameDepth, IfcPositiveLengthMeasure FrameThickness, IfcShapeAspect ShapeAspectStyle)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
	}

	public class IfcWindowStandardCase : IfcWindow, IfcDefinitionSelect, IfcProductSelect, IfcStructuralActivityAssignmentSelect
	{
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public override IfcLabel GetObjectType() { return ObjectType; }
		public override List<IfcRelDefinesByObject> GetIsDeclaredBy() { return IsDeclaredBy; }
		public override List<IfcRelDefinesByObject> GetDeclares() { return Declares; }
		public override List<IfcRelDefinesByType> GetIsTypedBy() { return IsTypedBy; }
		public override List<IfcRelDefinesByProperties> GetIsDefinedBy() { return IsDefinedBy; }
		public override IfcObjectPlacement GetObjectPlacement() { return ObjectPlacement; }
		public override IfcProductRepresentation GetRepresentation() { return Representation; }
		public IfcWindowStandardCase() { }

		public IfcWindowStandardCase(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcObjectPlacement ObjectPlacement, IfcProductRepresentation Representation, IfcIdentifier Tag, IfcPositiveLengthMeasure OverallHeight, IfcPositiveLengthMeasure OverallWidth, IfcWindowTypeEnum PredefinedType, IfcWindowTypePartitioningEnum PartitioningType, IfcLabel UserDefinedPartitioningType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
			this.Tag = Tag;
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.PartitioningType = PartitioningType;
			this.UserDefinedPartitioningType = UserDefinedPartitioningType;
		}
	}

	public class IfcWindowStyle : IfcTypeProduct, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcWindowStyleConstructionEnum ConstructionType { get; set; }
		public IfcWindowStyleOperationEnum OperationType { get; set; }
		public IfcBoolean ParameterTakesPrecedence { get; set; }
		public IfcBoolean Sizeable { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcWindowStyle() { }

		public IfcWindowStyle(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcWindowStyleConstructionEnum ConstructionType, IfcWindowStyleOperationEnum OperationType, IfcBoolean ParameterTakesPrecedence, IfcBoolean Sizeable)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ConstructionType = ConstructionType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
	}

	public class IfcWindowType : IfcBuildingElementType, IfcDefinitionSelect, IfcProductSelect
	{
		public IfcWindowTypeEnum PredefinedType { get; set; }
		public IfcWindowTypePartitioningEnum PartitioningType { get; set; }
		public IfcBoolean ParameterTakesPrecedence { get; set; }
		public IfcLabel UserDefinedPartitioningType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public override List<IfcRelAssigns> GetHasAssignments() { return HasAssignments; }
		public override List<IfcRelNests> GetNests() { return Nests; }
		public override List<IfcRelNests> GetIsNestedBy() { return IsNestedBy; }
		public override List<IfcRelAggregates> GetIsDecomposedBy() { return IsDecomposedBy; }
		public override List<IfcRelAggregates> GetDecomposes() { return Decomposes; }
		public override List<IfcRelAssignsToProduct> GetReferencedBy() { return ReferencedBy; }
		public IfcWindowType() { }

		public IfcWindowType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, List<IfcPropertySetDefinition> HasPropertySets, List<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcWindowTypeEnum PredefinedType, IfcWindowTypePartitioningEnum PartitioningType, IfcBoolean ParameterTakesPrecedence, IfcLabel UserDefinedPartitioningType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
			this.ElementType = ElementType;
			this.PredefinedType = PredefinedType;
			this.PartitioningType = PartitioningType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.UserDefinedPartitioningType = UserDefinedPartitioningType;
		}
	}

	public class IfcWorkCalendar : IfcControl, IfcDefinitionSelect
	{
		public List<IfcWorkTime> WorkingTimes { get; set; }
		public List<IfcWorkTime> ExceptionTimes { get; set; }
		public IfcWorkCalendarTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcWorkCalendar() { }

		public IfcWorkCalendar(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, List<IfcWorkTime> WorkingTimes, List<IfcWorkTime> ExceptionTimes, IfcWorkCalendarTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.WorkingTimes = WorkingTimes;
			this.ExceptionTimes = ExceptionTimes;
			this.PredefinedType = PredefinedType;
		}
	}

	public abstract class IfcWorkControl : IfcControl, IfcDefinitionSelect
	{
		public IfcDateTime CreationDate { get; set; }
		public List<IfcPerson> Creators { get; set; }
		public IfcLabel Purpose { get; set; }
		public IfcDuration Duration { get; set; }
		public IfcDuration TotalFloat { get; set; }
		public IfcDateTime StartTime { get; set; }
		public IfcDateTime FinishTime { get; set; }
		public abstract override IfcGloballyUniqueId GetGlobalId();
		public abstract override IfcOwnerHistory GetOwnerHistory();
		public abstract override IfcLabel GetName();
		public abstract override IfcText GetDescription();
		public abstract override List<IfcRelDeclares> GetHasContext();
		public abstract override List<IfcRelAssociates> GetHasAssociations();
		public IfcWorkControl() { }

		public IfcWorkControl(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcDateTime CreationDate, List<IfcPerson> Creators, IfcLabel Purpose, IfcDuration Duration, IfcDuration TotalFloat, IfcDateTime StartTime, IfcDateTime FinishTime)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
		}
	}

	public class IfcWorkPlan : IfcWorkControl, IfcDefinitionSelect
	{
		public IfcWorkPlanTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcWorkPlan() { }

		public IfcWorkPlan(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcDateTime CreationDate, List<IfcPerson> Creators, IfcLabel Purpose, IfcDuration Duration, IfcDuration TotalFloat, IfcDateTime StartTime, IfcDateTime FinishTime, IfcWorkPlanTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWorkSchedule : IfcWorkControl, IfcDefinitionSelect
	{
		public IfcWorkScheduleTypeEnum PredefinedType { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcWorkSchedule() { }

		public IfcWorkSchedule(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcDateTime CreationDate, List<IfcPerson> Creators, IfcLabel Purpose, IfcDuration Duration, IfcDuration TotalFloat, IfcDateTime StartTime, IfcDateTime FinishTime, IfcWorkScheduleTypeEnum PredefinedType)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.Identification = Identification;
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
			this.PredefinedType = PredefinedType;
		}
	}

	public class IfcWorkTime : IfcSchedulingTime
	{
		public IfcRecurrencePattern RecurrencePattern { get; set; }
		public IfcDate Start { get; set; }
		public IfcDate Finish { get; set; }
		public IfcWorkTime() { }

		public IfcWorkTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcRecurrencePattern RecurrencePattern, IfcDate Start, IfcDate Finish)
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.RecurrencePattern = RecurrencePattern;
			this.Start = Start;
			this.Finish = Finish;
		}
	}

	public class IfcZShapeProfileDef : IfcParameterizedProfileDef, IfcResourceObjectSelect
	{
		public IfcPositiveLengthMeasure Depth { get; set; }
		public IfcPositiveLengthMeasure FlangeWidth { get; set; }
		public IfcPositiveLengthMeasure WebThickness { get; set; }
		public IfcPositiveLengthMeasure FlangeThickness { get; set; }
		public IfcNonNegativeLengthMeasure FilletRadius { get; set; }
		public IfcNonNegativeLengthMeasure EdgeRadius { get; set; }
		public IfcZShapeProfileDef() { }

		public IfcZShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure Depth, IfcPositiveLengthMeasure FlangeWidth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure FlangeThickness, IfcNonNegativeLengthMeasure FilletRadius, IfcNonNegativeLengthMeasure EdgeRadius)
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
			this.Position = Position;
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
		}
	}

	public class IfcZone : IfcSystem, IfcDefinitionSelect
	{
		public IfcLabel LongName { get; set; }
		public override IfcGloballyUniqueId GetGlobalId() { return GlobalId; }
		public override IfcOwnerHistory GetOwnerHistory() { return OwnerHistory; }
		public override IfcLabel GetName() { return Name; }
		public override IfcText GetDescription() { return Description; }
		public override List<IfcRelDeclares> GetHasContext() { return HasContext; }
		public override List<IfcRelAssociates> GetHasAssociations() { return HasAssociations; }
		public IfcZone() { }

		public IfcZone(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcLabel LongName)
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
			this.ObjectType = ObjectType;
			this.LongName = LongName;
		}
	}

}
